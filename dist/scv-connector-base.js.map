{"version":3,"file":"scv-connector-base.js","mappings":"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","sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/webpack/runtime/compat get default export","webpack://SCVConnectorBase/webpack/runtime/define property getters","webpack://SCVConnectorBase/webpack/runtime/hasOwnProperty shorthand","webpack://SCVConnectorBase/webpack/runtime/make namespace object","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/construct.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, () => {\nreturn ","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","function asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nexport { _asyncToGenerator as default };","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    SHARED_MESSAGE_TYPE: {\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        AGENT_WORK_EVENT: 'AGENT_WORK_EVENT',\n        GET_CONTACTS: 'GET_CONTACTS'\n    },\n    VOICE_MESSAGE_TYPE: {\n        ACCEPT_CALL: 'ACCEPT_CALL',\n        DECLINE_CALL: 'DECLINE_CALL',\n        END_CALL: 'END_CALL',\n        MUTE: 'MUTE',\n        UNMUTE: 'UNMUTE',\n        HOLD: 'HOLD',\n        RESUME: 'RESUME',\n        DIAL: 'DIAL',\n        SEND_DIGITS: 'SEND_DIGITS',\n        GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n        SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n        ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n        CONFERENCE: 'CONFERENCE',\n        PAUSE_RECORDING: 'PAUSE_RECORDING',\n        RESUME_RECORDING: 'RESUME_RECORDING',\n        SUPERVISE_CALL: 'SUPERVISE_CALL',\n        SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n        SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT',\n        SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n        GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n        WRAP_UP_CALL: 'WRAP_UP_CALL',\n        AGENT_AVAILABLE: 'AGENT_AVAILABLE',\n        GET_AUDIO_DEVICES: 'GET_AUDIO_DEVICES'\n    },\n    SHARED_EVENT_TYPE: {\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        MESSAGE: 'MESSAGE',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE',\n        REMOTE_CONTROLLER: 'REMOTE_CONTROLLER',\n        SHOW_STORAGE_ACCESS: 'SHOW_STORAGE_ACCESS',\n        STORAGE_ACCESS_RESULT: 'STORAGE_ACCESS_RESULT',\n        GET_CONTACTS_RESULT: 'GET_CONTACTS_RESULT',\n        AFTER_CONVERSATION_WORK_STARTED: 'AFTER_CONVERSATION_WORK_STARTED',\n        AFTER_CONVERSATION_WORK_ENDED: 'AFTER_CONVERSATION_WORK_ENDED'\n    },\n    VOICE_EVENT_TYPE: {\n        QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n        CALL_STARTED: 'CALL_STARTED',\n        CALL_CONNECTED: 'CALL_CONNECTED',\n        CALL_FAILED: 'CALL_FAILED',\n        MUTE_TOGGLE: 'MUTE_TOGGLE',\n        HOLD_TOGGLE: 'HOLD_TOGGLE',\n        PHONE_CONTACTS: 'PHONE_CONTACTS',\n        PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n        PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n        PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n        RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n        PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n        PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n        UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n        SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n        SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n        SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n        SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n        CALL_BARGED_IN : 'CALL_BARGED_IN',\n        WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n        AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n        AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n        AGENT_ERROR: 'AGENT_ERROR',\n        HANGUP: 'HANGUP',\n        SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n        SHOW_TRANSFER_VIEW: 'SHOW_TRANSFER_VIEW',\n        GET_AUDIO_DEVICES: 'GET_AUDIO_DEVICES',\n        AUDIO_STATS: 'AUDIO_STATS',\n        CALL_UPDATED: 'CALL_UPDATED' //sent during a call to update call controls\n    },\n    INFO_TYPE: {\n        CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n    },\n    SHARED_ERROR_TYPE: {\n        CUSTOM_ERROR: 'CUSTOM_ERROR',\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT',\n        INVALID_STORAGE_ACCESS_RESULT: 'INVALID_STORAGE_ACCESS_RESULT',\n        INVALID_ACW_INFO: 'INVALID_ACW_INFO'\n    },\n    VOICE_ERROR_TYPE: {\n        CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n        CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n        CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n        CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n        CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n        CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n        CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n        CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n        CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n        INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n        INVALID_PARAMS: 'INVALID_PARAMS',\n        CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n        CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n        CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n        INVALID_DESTINATION: 'INVALID_DESTINATION',\n        INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n        CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n        CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n        CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n        CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n        CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n        CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n        CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n        CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n        CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n        CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n        CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n        CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n        CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n        CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n        AGENT_ERROR: 'AGENT_ERROR',\n        MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n        UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER',\n        CAN_NOT_GET_AUDIO_DEVICES: 'CAN_NOT_GET_AUDIO_DEVICES',\n        CAN_NOT_UPDATE_CALL: 'CAN_NOT_UPDATE_CALL'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork'\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer',\n        INTERNAL_CALL: 'InternalCall',\n        DIALED_CALLBACK: 'DialedCallback',\n        CONSULT: 'Consult'\n    },\n    CALL_SUBTYPE: {\n        PSTN: 'PSTN',\n        WEB_RTC: 'WebRTC'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    SHARED_CAPABILITIES_TYPE: {\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        VENDOR_PROVIDED_QUEUE_WAIT_TIME: 'VENDOR_PROVIDED_QUEUE_WAIT_TIME',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE',\n        SFDC_PENDING_STATE: 'SFDC_PENDING_STATE',\n        AUTO_ACCEPT_ENABLED:'AUTO_ACCEPT_ENABLED'\n    },\n    VOICE_CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        PHONEBOOK: 'PHONEBOOK',\n        HAS_GET_EXTERNAL_SPEAKER: 'HAS_GET_EXTERNAL_SPEAKER',\n        HAS_SET_EXTERNAL_SPEAKER: 'HAS_SET_EXTERNAL_SPEAKER',\n        HAS_GET_EXTERNAL_MICROPHONE: 'HAS_GET_EXTERNAL_MICROPHONE',\n        HAS_SET_EXTERNAL_MICROPHONE: 'HAS_SET_EXTERNAL_MICROPHONE',\n        CAN_CONSULT: 'CAN_CONSULT',\n        DIAL_PAD: 'DIAL_PAD',\n        HAS_HID_SUPPORT: 'HAS_HID_SUPPORT',\n        PHONEBOOK_DISABLE: 'PHONEBOOK_DISABLE'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        AGENT: \"AGENT\",\n        QUEUE: \"QUEUE\",\n        CONTACT: \"CONTACT\",\n        DIRECTORY: \"DIRECTORY\",\n        FLOW: \"FLOW\",\n        AVAILABLE: \"AVAILABLE\"\n    },\n    WORK_EVENT: {\n        ASSIGNED: 'ASSIGNED',\n        ACCEPTED: 'ACCEPTED',\n        DECLINED: 'DECLINED',\n        COMPLETED: 'COMPLETED',\n        CLOSED: 'CLOSED',\n        PAUSED: 'PAUSED',\n        UNPAUSED: 'UNPAUSED'\n    },\n    DIAL_OPTIONS: {\n        CALLBACK: \"isCallback=true\",\n        CONSULT: \"isConsultCall\"\n    },\n    HANGUP_STATUS: {\n        MISSED_AGENT: \"MissedCallAgent\",\n        DECLINED: \"DeclinedByAgent\",\n        FAILED_CONNECT_AGENT: \"FailedConnectAgent\",\n        FAILED_CONNECT_CUSTOMER: \"FailedConnectCustomer\",\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n\n/**\n * Fields in the connector configuration that are NOT logged. \n */\nexport const CONNECTOR_CONFIG_EXCEPTION_FIELDS = [\n    \"/reqHvcc/reqTelephonyIntegrationCertificate\"\n];\n","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _classCallCheck as default };","function _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nexport { _getPrototypeOf as default };","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && setPrototypeOf(t, e);\n}\nexport { _inherits as default };","function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\nexport { _isNativeReflectConstruct as default };","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nfunction _wrapNativeSuper(t) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return _wrapNativeSuper = function _wrapNativeSuper(t) {\n    if (null === t || !isNativeFunction(t)) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== r) {\n      if (r.has(t)) return r.get(t);\n      r.set(t, Wrapper);\n    }\n    function Wrapper() {\n      return construct(t, arguments, getPrototypeOf(this).constructor);\n    }\n    return Wrapper.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), setPrototypeOf(Wrapper, t);\n  }, _wrapNativeSuper(t);\n}\nexport { _wrapNativeSuper as default };","function _isNativeFunction(t) {\n  try {\n    return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n  } catch (n) {\n    return \"function\" == typeof t;\n  }\n}\nexport { _isNativeFunction as default };","import isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nexport { _construct as default };","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\n export function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return assertThisInitialized(t);\n}\nexport { _possibleConstructorReturn as default };","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    /**\n    * @enum {string}\n    */\n    SHARED_EVENT_TYPE: {\n        LOGIN_RESULT: constants.SHARED_EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.SHARED_EVENT_TYPE.LOGOUT_RESULT,\n        MESSAGE: constants.SHARED_EVENT_TYPE.MESSAGE,\n        SET_AGENT_STATUS: constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.SHARED_EVENT_TYPE.STATE_CHANGE,\n        STORAGE_ACCESS_RESULT: constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT,\n        GET_CONTACTS_RESULT: constants.SHARED_EVENT_TYPE.GET_CONTACTS_RESULT,\n        AFTER_CONVERSATION_WORK_STARTED: constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED,\n        AFTER_CONVERSATION_WORK_ENDED: constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED\n    },\n    /**\n    * @enum {string}\n    */\n    VOICE_EVENT_TYPE: {\n        CALL_STARTED: constants.VOICE_EVENT_TYPE.CALL_STARTED,\n        QUEUED_CALL_STARTED: constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED,\n        CALL_CONNECTED: constants.VOICE_EVENT_TYPE.CALL_CONNECTED,\n        HANGUP: constants.VOICE_EVENT_TYPE.HANGUP,\n        MUTE_TOGGLE: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE,\n        HOLD_TOGGLE: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE,\n        RECORDING_TOGGLE: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE,\n        PARTICIPANTS_SWAPPED: constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED,\n        PARTICIPANTS_CONFERENCED: constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED,\n        PARTICIPANT_ADDED: constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, \n        PARTICIPANT_CONNECTED: constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED,\n        PARTICIPANT_REMOVED: constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED,\n        AFTER_CALL_WORK_STARTED: constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED,\n        WRAP_UP_ENDED: constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED,\n        AGENT_ERROR: constants.VOICE_EVENT_TYPE.AGENT_ERROR,\n        SOFTPHONE_ERROR: constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR,\n        UPDATE_AUDIO_STATS: constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS,\n        CALL_BARGED_IN: constants.VOICE_EVENT_TYPE.CALL_BARGED_IN,\n        SUPERVISOR_BARGED_IN: constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN,\n        SUPERVISOR_CALL_STARTED : constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED,\n        SUPERVISOR_CALL_CONNECTED: constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED,\n        SUPERVISOR_HANGUP : constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP,\n        SHOW_TRANSFER_VIEW: constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW,\n        AUDIO_STATS: constants.VOICE_EVENT_TYPE.AUDIO_STATS,\n        CALL_UPDATED: constants.VOICE_EVENT_TYPE.CALL_UPDATED\n    },\n    /**\n    * @enum {string}\n    */\n    SHARED_ERROR_TYPE: {\n        GENERIC_ERROR: constants.SHARED_ERROR_TYPE.GENERIC_ERROR,\n        INVALID_AGENT_STATUS: constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS\n    },\n    /**\n    * @enum {string}\n    */\n    VOICE_ERROR_TYPE: {\n        INVALID_PARTICIPANT: constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT,\n        INVALID_DESTINATION: constants.VOICE_ERROR_TYPE.INVALID_DESTINATION,\n        CAN_NOT_UPDATE_PHONE_NUMBER: constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER,\n        INVALID_PARAMS: constants.VOICE_ERROR_TYPE.INVALID_PARAMS\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n     * @enum {string}\n     */\n    CALL_SUBTYPE: { ...constants.CALL_SUBTYPE },\n    /**\n     * @enum {string}\n     */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n    REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES },\n    /**\n     * @enum {String}\n     */\n    WORK_EVENT: { ...constants.WORK_EVENT },\n    /**\n     * @enum {String}\n     */\n    HANGUP_STATUS: { ...constants.HANGUP_STATUS }\n};\n\n/**\n * Class representing a Custom Error\n */\nexport class CustomError extends Error {\n    /**\n     * Custom error\n     * @param {object} param\n     * @param {String} param.labelName\n     * @param {String} param.namespace\n     * @param {String} [param.message]\n     */\n    constructor({ labelName, namespace, message }) {\n        super(message);\n\n        Validator.validateString(labelName);\n        Validator.validateString(namespace);\n        if (message) {\n            Validator.validateString(message);\n        }\n        this.labelName = labelName;\n        this.namespace = namespace;\n        this.message = message;\n    }\n}\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing a Hid Device\n */\nexport class HidDevice {\n    /**\n     * Create Hid Device\n     * @param productId\n     * @param vendorId\n     */\n     constructor({ productId, vendorId }) {\n         if (productId) {\n             Validator.validateNumber(productId);\n         }\n         if (vendorId) {\n             Validator.validateNumber(vendorId);\n         }\n\n         this.productId = productId;\n         this.vendorId = vendorId;\n     }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create MuteToggleResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     * @param {PhoneCall} param.call\n     * @param {boolean} param.isGlobal\n     */\n    constructor({ isMuted, call, isGlobal }) {\n        this.isMuted = isMuted;\n        this.call = call;\n        this.isGlobal = isGlobal;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getAudioDevices()\n */\nexport class AudioDevicesResult {\n    /**\n     * Create AudioDevicesResult\n     * @param {object} param\n     * @param {AudioDevice[]} param.audioDevices\n     */\n    constructor({ audioDevices = [] }) {\n        this.audioDevices = audioDevices;\n    }\n}\n\n/**\n * Class representing result type for getSharedCapabilities()\n */\nexport class SharedCapabilitiesResult {\n    /**\n     * Create SharedCapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability, false if Salesforce provides it.\n     * @param {boolean} [param.hasQueueWaitTime] True if getPhoneContacts also provides estimated queue wait time, false if Salesforce provides it.\n     * @param {boolean} [param.hasTransferToOmniFlow] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     * @param {boolean} [param.hasSFDCPendingState] True if amazon connect has sfdc_pending state\n     * @param {boolean} [param.hasAutoAcceptEnabled] True if agent has enabled auto accept\n     */\n    constructor({\n        debugEnabled = true,\n        hasContactSearch = false,\n        hasAgentAvailability = false,\n        hasQueueWaitTime = false,\n        hasTransferToOmniFlow = false,\n        hasPendingStatusChange = false,\n        hasSFDCPendingState = false,\n        hasAutoAcceptEnabled = false\n    }){\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(hasQueueWaitTime);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n        Validator.validateBoolean(hasSFDCPendingState);\n        Validator.validateBoolean(hasAutoAcceptEnabled);\n\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.hasQueueWaitTime = hasQueueWaitTime;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n        this.hasSFDCPendingState = hasSFDCPendingState;\n        this.hasAutoAcceptEnabled = hasAutoAcceptEnabled;\n    }\n}\n\n/**\n * Class representing result type for getVoiceCapabilities()\n */\nexport class VoiceCapabilitiesResult {\n    /**\n     * Create VoiceCapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasPhoneBook] True if vendor supports the phoneBook UI\n     * @param {boolean} [param.hasGetExternalSpeakerDeviceSetting] True if vendor supports retrieving the speaker device ID\n     * @param {boolean} [param.hasSetExternalSpeakerDeviceSetting] True if vendor supports setting the speaker device ID\n     * @param {boolean} [param.hasGetExternalMicrophoneDeviceSetting] True if vendor supports retrieving the microphone device ID\n     * @param {boolean} [param.hasSetExternalMicrophoneDeviceSetting] True if vendor supports setting the microphone device ID\n     * @param {boolean} [param.canConsult] True if can consult\n     * @param {boolean} [param.isDialPadDisabled] True if dial pad is disabled\n     * @param {boolean} [param.isHidSupported] True if vendor supports hid or headset controllers\n     * @param {boolean} [param.isPhoneBookDisabled] True if phone book is disabled\n     */\n    constructor({\n        hasMute = true,\n        hasRecord = true,\n        hasMerge = true,\n        hasSwap = true,\n        hasBlindTransfer = false,\n        hasSignedRecordingUrl = false,\n        supportsMos = false,\n        hasSupervisorListenIn = false,\n        hasSupervisorBargeIn = false,\n        hasPhoneBook = false,\n        hasGetExternalSpeakerDeviceSetting = false,\n        hasSetExternalSpeakerDeviceSetting = false,\n        hasGetExternalMicrophoneDeviceSetting = false,\n        hasSetExternalMicrophoneDeviceSetting = false,\n        canConsult= false,\n        isDialPadDisabled = false,\n        isHidSupported = false,\n        isPhoneBookDisabled = false\n    }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasPhoneBook);\n        Validator.validateBoolean(hasGetExternalSpeakerDeviceSetting);\n        Validator.validateBoolean(hasSetExternalSpeakerDeviceSetting);\n        Validator.validateBoolean(hasGetExternalMicrophoneDeviceSetting);\n        Validator.validateBoolean(hasSetExternalMicrophoneDeviceSetting);\n        Validator.validateBoolean(canConsult);\n        Validator.validateBoolean(isDialPadDisabled);\n        Validator.validateBoolean(isHidSupported);\n        Validator.validateBoolean(isPhoneBookDisabled);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasPhoneBook = hasPhoneBook;\n        this.hasGetExternalSpeakerDeviceSetting = hasGetExternalSpeakerDeviceSetting;\n        this.hasSetExternalSpeakerDeviceSetting = hasSetExternalSpeakerDeviceSetting;\n        this.hasGetExternalMicrophoneDeviceSetting = hasGetExternalMicrophoneDeviceSetting;\n        this.hasSetExternalMicrophoneDeviceSetting = hasSetExternalMicrophoneDeviceSetting;\n        this.canConsult = canConsult;\n        this.isDialPadDisabled = isDialPadDisabled;\n        this.isHidSupported = isHidSupported;\n        this.isPhoneBookDisabled = isPhoneBookDisabled;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} param.phones\n     * @param {Phone} param.selectedPhone\n     * @param {string} param.speakerDeviceId\n     * @param {string} param.microphoneDeviceId\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}),\n                    speakerDeviceId = '', microphoneDeviceId = ''}) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n        Validator.validateString(speakerDeviceId);\n        Validator.validateString(microphoneDeviceId);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n        this.speakerDeviceId = speakerDeviceId;\n        this.microphoneDeviceId = microphoneDeviceId;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} param.selectedPhone\n     * @param {string} param.speakerDeviceId\n     * @param {string} param.microphoneDeviceId\n     * @param {HidDevice} param.hidDeviceInfo\n     */\n    constructor({ selectedPhone,speakerDeviceId, microphoneDeviceId, hidDeviceInfo }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        //Hid device info is optional\n        if (hidDeviceInfo !== undefined) {\n            Validator.validateClassObject(hidDeviceInfo, HidDevice);\n        }\n        this.selectedPhone = selectedPhone;\n        this.speakerDeviceId = speakerDeviceId;\n        this.microphoneDeviceId = microphoneDeviceId;\n        this.hidDeviceInfo = hidDeviceInfo;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     * @param {Contact} param.contact\n     */\n    constructor({ initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId, contact = null }) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.callAttributes = callAttributes;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n        this.contact = contact\n    }\n}\n\n/**\n * Class representing result type for getContacts()\n */\nexport class ContactsResult {\n     /**\n     * Create ContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n * NOTE: TO BE DEPRECATED, Use ContactsResult instead\n */\nexport class PhoneContactsResult extends ContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        super({ contacts, contactTypes });\n    }\n}\n\n\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls }) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     * @param {boolean} [param.isSilentLogin]\n     * @param {boolean} [param.showStorageAccess]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350, isSilentLogin = false, showStorageAccess = false }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n        this.isSilentLogin = this.showLogin ? false : isSilentLogin;\n        this.showStorageAccess = showStorageAccess;\n    }\n}\n\n/**\n * Class representing dial options for outbound dialing \n */\nexport class DialOptions {\n    /**\n     * Create DialOptions\n     * @param {boolean} [param.isCallback]\n     * @param {boolean} [param.isConsultCall]\n     */\n    constructor({ isCallback = false, isConsultCall = false }) {\n        this.isCallback = isCallback;\n        this.isConsultCall = isConsultCall;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing result type for setAgentConfig()\n */\nexport class SetAgentConfigResult extends GenericResult {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     */\n    constructor({ success, isSystemEvent = false }) {\n        super({ success });\n        this.isSystemEvent = isSystemEvent;\n    }\n    \n    setIsSystemEvent(isSystemEvent) {\n        this.isSystemEvent = isSystemEvent;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {string} [param.queueName]\n     * @param {string} [param.queueId]\n     * @param {Date} [param.queueTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {boolean} [param.showMuteButton]\n     * @param {boolean} [param.showRecordButton]\n     * @param {boolean} [param.showAddCallerButton]\n     * @param {boolean} [param.showAddBlindTransferButton]\n     * @param {boolean} [param.showMergeButton]\n     * @param {boolean} [param.showSwapButton]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call.\n     * @param {String} [param.additionalFields] - Represents additional standard and custom fields in the voice call record, where each key-value pair value corresponds to a standard or custom field and its values.\n     * @param {boolean} [param.isMultiParty]\n     * @param {boolean} [param.isHIDCall]\n     * @param {boolean} [param.endCallDisabled]\n     * @param {string} [param.renderContactId]\n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, queueId = null, queueName = null, queueTimestamp = null, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        showMuteButton = true, showRecordButton = true, showAddCallerButton = true, showAddBlindTransferButton = true, showMergeButton = true,\n\n        showSwapButton = true, removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS, additionalFields = null, isMultiParty = false, isHIDCall = false, endCallDisabled = false, renderContactId = null }) {\n\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        if (queueTimestamp) {\n            Validator.validateDate(queueTimestamp);\n        }\n        if (queueId) {\n            Validator.validateString(queueId);\n        }\n        if (queueName) {\n            Validator.validateString(queueName);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        Validator.validateBoolean(showMuteButton);\n        Validator.validateBoolean(showRecordButton);\n        Validator.validateBoolean(showAddCallerButton);\n        Validator.validateBoolean(showAddBlindTransferButton);\n        Validator.validateBoolean(showMergeButton);\n        Validator.validateBoolean(showSwapButton);\n        Validator.validateBoolean(isHIDCall);\n        Validator.validateBoolean(endCallDisabled);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        if (additionalFields) {\n            Validator.validateString(additionalFields);\n        }\n        Validator.validateBoolean(isMultiParty);\n        if (renderContactId) {\n            Validator.validateString(renderContactId);\n        }\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.queueName = queueName;\n        this.queueId = queueId;\n        this.queueTimestamp = queueTimestamp;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n        this.showMuteButton = showMuteButton;\n        this.showRecordButton = showRecordButton;\n        this.showAddCallerButton = showAddCallerButton;\n        this.showAddBlindTransferButton = showAddBlindTransferButton;\n        this.showMergeButton = showMergeButton;\n        this.showSwapButton = showSwapButton;\n        this.additionalFields = additionalFields;\n        this.isMultiParty = isMultiParty;\n        this.isHIDCall = isHIDCall;\n        this.endCallDisabled = endCallDisabled;\n        this.renderContactId = renderContactId;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description\n     * @param {string} [param.queueWaitTime] - Estimated Queue Wait Time\n     */\n    constructor({phoneNumber, id, type, name, prefix, extension, endpointARN, queue, availability, recordId, description, queueWaitTime}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n        if (queueWaitTime) {\n            Validator.validateString(queueWaitTime);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.queueWaitTime = queueWaitTime;\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     * @param {boolean} [param.isAutoMergeOn] - for multiparty conference, the call cannot be put on hold, and is being auto-merged\n     * @param {boolean} [param.isConsultCall] - true if the call is a Consult call\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false, isAutoMergeOn = false, isConsultCall = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n        Validator.validateBoolean(isAutoMergeOn);\n        Validator.validateBoolean(isConsultCall);\n        \n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n        this.isAutoMergeOn = isAutoMergeOn;\n        this.isConsultCall = isConsultCall;\n    }\n}\n\n/** \n* Class representing a PhoneCall (PSTN or WebRTC).\n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {CALL_SUBTYPE} [param.callSubtype] - The subtype of the call, one of the CALL_SUBTYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact \n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     * @param {string} [param.agentARN]\n     */\n    constructor({callId, callType, callSubtype, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus, agentARN }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (callSubtype) {\n            Validator.validateEnum(callSubtype, Object.values(constants.CALL_SUBTYPE));\n            this.callSubtype = callSubtype;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        if (agentARN) {\n            this.agentARN = agentARN;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a TelephonyConnector\n*/\nexport class TelephonyConnector {\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @param {DialOptions} dialOptions\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact, dialOptions) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @param {ContactsFilter} filterType\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts(filter) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact: The transfer target\n     * @param {PhoneCall} parentCall: The call to which a participant will be added\n     * @param {Boolean} isBlindTransfer: True if blind transfering a call and hanging up upon transfer\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, parentCall, isBlindTransfer) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get voice capabilities\n     * @returns {Promise<VoiceCapabilitiesResult>}\n     */\n    getVoiceCapabilities() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervise a call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the call to be supervised\n     * @returns {Promise <SuperviseCallResult>}\n     */\n    superviseCall(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the supervised call to be disconnected\n     * @returns {Promise <SupervisorHangupResult>}\n     */\n    supervisorDisconnect(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the supervised call which supervisor barges in\n     * @returns {Promise <SuperviseCallResult>}\n     */\n    supervisorBargeIn(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Gets the telephonyConnector\n     * @returns {Promise<TelephonyConnector>} \n     * \n     */\n    getTelephonyConnector() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Sends non-voice agent work events to vendor such as work accepted, declined, etc\n     * @param {AgentWork} agentWork\n     * \n     */\n    onAgentWorkEvent(agentWork) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {Constants.AGENT_STATUS} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n\n    /**\n     * To get the Contacts for this workItem's transfer/other channel operation\n     * @param {ContactsFilter} filter It has fields like the search term  and contact Type\n     * @param {String} workItemId\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getContacts(filter, workItemId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Returns a list of valid device IDs that can be used for the speaker and microphone devices.\n     */\n    getAudioDevices() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get shared capabilities\n     * @returns {Promise<SharedCapabilitiesResult>}\n     */\n    getSharedCapabilities() {\n        throw new Error('Not implemented');\n    }\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n    \n    static validateClassObjects(object, ...classNames) {\n        let isValid = false;\n        for (let i = 0; i < classNames.length; i++) {\n            try {\n                this.validateClassObject(object, classNames[i]);\n                isValid = true;\n                break;\n            } catch(e) {\n                // continue on\n            }\n        }\n        if (!isValid) {\n            throw new Error(`Invalid className. Expecting object matching a class name in ${classNames} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n* Class representing an AgentWork\n*/\nexport class AgentWork {\n    /**\n     * Create an AgentWork.\n     * @param {object} param\n     * @param {string} [param.workItemId] - Salesforce agent work item Id\n     * @param {string} [param.workId] - Salesforce work Id\n     * @param {WORK_EVENT} [param.workEvent] - The work lifecycle event\n     */\n    constructor({ workItemId, workId, workEvent }) {\n        Validator.validateEnum(workEvent, Object.values(constants.WORK_EVENT));\n        this.workEvent = workEvent;\n        this.workItemId = workItemId;\n        this.workId = workId;\n    }\n }\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn}) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }\n\n/** \n * Class representing result type for STORAGE_ACCESS_RESULT\n * @param {object} param\n * @param {boolean} [param.success]\n * @param {boolean} [param.showLogin] \n * @param {number} [param.loginFrameHeight]\n */\nexport class ShowStorageAccessResult {\n    constructor({success= false, showLogin = false, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class used to filter contacts. Passed as a parameter to TelephonyConnector.getPhoneContacts\n * @param {object} param\n * @param {string} param.contains\n * @param {number} param.limit\n * @param {number} param.offset\n * @param {CONTACTS_FILTER_TYPES[]} param.types \n */ \nexport class ContactsFilter {\n    constructor(param) {\n        if (param) {\n            const {contains = null, limit = 50, offset = 0, types = []} = param;\n            if (contains) {\n                Validator.validateString(contains);\n            }\n            Validator.validateNumber(limit);\n            Validator.validateNumber(offset);\n            for (const type of types){\n                Validator.validateEnum(types, Object.values(constants.CONTACTS_FILTER_TYPES));\n            }\n            this.contains = contains;\n            this.limit = limit;\n            this.offset = offset;\n            this.types = types;\n        }\n    }\n}\n\n/**\n * Class used as a parameter to AFTER_CONVERSATION_WORK_STARTED and AFTER_CONVERSATION_WORK_ENDED\n */\nexport class ACWInfo {\n    /**\n     * @param {object} param\n     * @param {string} param.agentWorkId the id of the AgentWork\n     * @param {string} param.workItemId the id of the work item (voice call or messaging session)\n     */\n    constructor({agentWorkId, workItemId}) {\n        if (agentWorkId) {\n            Validator.validateString(agentWorkId);\n            this.agentWorkId = agentWorkId;\n        }\n        if (workItemId) {\n            Validator.validateString(workItemId);\n            this.workItemId = workItemId;\n        }\n        if (!agentWorkId && !workItemId) {\n            throw new Error('You must pass at least one of agent work id or work item (voice call or messaging session) id');\n        }\n    }\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH, CONNECTOR_CONFIG_EXCEPTION_FIELDS } from './constants.js';\nimport { Validator, GenericResult, InitResult, CallResult, HangupResult, HoldToggleResult, ContactsResult, PhoneContactsResult, MuteToggleResult,\n    ParticipantResult, RecordingToggleResult, AgentConfigResult, ActiveCallsResult, SignedRecordingUrlResult, LogoutResult,\n    VendorConnector, Contact, AudioStats, SuperviseCallResult, SupervisorHangupResult, AgentStatusInfo, SupervisedCallInfo,\n    SharedCapabilitiesResult, VoiceCapabilitiesResult, AgentVendorStatusInfo, StateChangeResult, CustomError, DialOptions, ShowStorageAccessResult,\n    AudioDevicesResult, ACWInfo, SetAgentConfigResult } from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.VOICE_EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n    channelPort.postMessage({\n        type: constants.SHARED_MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.VOICE_EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.SHARED_MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {constants.VOICE_ERROR_TYPE} errorType Error Type, ex: constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.ERROR, { message: errorType }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {CustomError} error Error object representing the custom error\n * @param {string} eventType The event that caused this error, ex: constants.SHARED_MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchCustomError(error, eventType) {\n    // eslint-disable-next-line no-console\n    const payload = {\n        customError: {\n            labelName: error.labelName,\n            namespace: error.namespace,\n            message: error.message\n        }\n    };\n    console.error(`SCV dispatched custom error for eventType ${eventType}`, payload);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.ERROR, payload, false);\n    dispatchEventLog(eventType, { errorType: constants.SHARED_ERROR_TYPE.CUSTOM_ERROR, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.INFO, { message: eventType }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const telephonyConnector = await vendorConnector.getTelephonyConnector();\n        const agentConfigResult = await telephonyConnector.getAgentConfig();\n        const sharedCapabilitiesResult = await vendorConnector.getSharedCapabilities();\n        const voiceCapabilitiesResult = await telephonyConnector.getVoiceCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(voiceCapabilitiesResult, VoiceCapabilitiesResult);\n        if (voiceCapabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await telephonyConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.SHARED_CAPABILITIES_TYPE.DEBUG_ENABLED] : sharedCapabilitiesResult.debugEnabled,\n                [constants.SHARED_CAPABILITIES_TYPE.CONTACT_SEARCH] : sharedCapabilitiesResult.hasContactSearch,\n                [constants.SHARED_CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : sharedCapabilitiesResult.hasAgentAvailability,\n                [constants.SHARED_CAPABILITIES_TYPE.VENDOR_PROVIDED_QUEUE_WAIT_TIME] : sharedCapabilitiesResult.hasQueueWaitTime,\n                [constants.SHARED_CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : sharedCapabilitiesResult.hasTransferToOmniFlow,\n                [constants.SHARED_CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : sharedCapabilitiesResult.hasPendingStatusChange,\n                [constants.SHARED_CAPABILITIES_TYPE.SFDC_PENDING_STATE]: sharedCapabilitiesResult.hasSFDCPendingState,\n                [constants.SHARED_CAPABILITIES_TYPE.AUTO_ACCEPT_ENABLED]: sharedCapabilitiesResult.hasAutoAcceptEnabled,\n                [constants.VOICE_CAPABILITIES_TYPE.MUTE] : voiceCapabilitiesResult.hasMute,\n                [constants.VOICE_CAPABILITIES_TYPE.RECORD] : voiceCapabilitiesResult.hasRecord,\n                [constants.VOICE_CAPABILITIES_TYPE.MERGE] : voiceCapabilitiesResult.hasMerge,\n                [constants.VOICE_CAPABILITIES_TYPE.SWAP] : voiceCapabilitiesResult.hasSwap,\n                [constants.VOICE_CAPABILITIES_TYPE.BLIND_TRANSFER] : voiceCapabilitiesResult.hasBlindTransfer,\n                [constants.VOICE_CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : voiceCapabilitiesResult.hasSignedRecordingUrl,\n                [constants.VOICE_CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : voiceCapabilitiesResult.hasSupervisorListenIn,\n                [constants.VOICE_CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : voiceCapabilitiesResult.hasSupervisorBargeIn,\n                [constants.VOICE_CAPABILITIES_TYPE.MOS] : voiceCapabilitiesResult.supportsMos,\n                [constants.VOICE_CAPABILITIES_TYPE.PHONEBOOK] : voiceCapabilitiesResult.hasPhoneBook,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_GET_EXTERNAL_SPEAKER] : voiceCapabilitiesResult.hasGetExternalSpeakerDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_SET_EXTERNAL_SPEAKER] : voiceCapabilitiesResult.hasSetExternalSpeakerDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_GET_EXTERNAL_MICROPHONE] : voiceCapabilitiesResult.hasGetExternalMicrophoneDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_SET_EXTERNAL_MICROPHONE] : voiceCapabilitiesResult.hasSetExternalMicrophoneDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.CAN_CONSULT]: voiceCapabilitiesResult.canConsult,\n                [constants.VOICE_CAPABILITIES_TYPE.DIAL_PAD]: voiceCapabilitiesResult.isDialPadDisabled,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_HID_SUPPORT]: voiceCapabilitiesResult.isHidSupported,\n                [constants.VOICE_CAPABILITIES_TYPE.PHONEBOOK_DISABLE]: voiceCapabilitiesResult.isPhoneBookDisabled\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.SHARED_MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    (message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase() ||\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase())) {\n                    return;\n                }\n                initAudioStats();\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await telephonyConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.VOICE_EVENT_TYPE.CALL_STARTED : constants.VOICE_EVENT_TYPE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL);\n                } else {\n                    dispatchInfo(constants.INFO_TYPE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL, additionalInfo: e});\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.DECLINE_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload =  await telephonyConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, call);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.DECLINE_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_DECLINE_THE_CALL, e, constants.VOICE_MESSAGE_TYPE.DECLINE_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.END_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.END_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, e, constants.VOICE_MESSAGE_TYPE.END_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.MUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.mute(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.MUTE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_MUTE_CALL, e, constants.VOICE_MESSAGE_TYPE.MUTE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.UNMUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.unmute(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.UNMUTE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_UNMUTE_CALL, e, constants.VOICE_MESSAGE_TYPE.UNMUTE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.HOLD:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.hold(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.HOLD);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.HOLD);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.HOLD);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.RESUME:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resume(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.RESUME);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.RESUME);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.RESUME);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult);\n                const { success } = payload;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                } else {\n                    if (message.data.statusInfo) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success: false });\n                    }\n                    switch(getErrorType(e)) {\n                        case constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS:\n                            dispatchError(constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                        default:\n                            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS);\n                } else {\n                    dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.DIAL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const isCallback = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CALLBACK) >= 0;\n                const isConsultCall = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CONSULT) >= 0;\n                const payload = await telephonyConnector.dial(new Contact(message.data.contact),\n                                                              new DialOptions({ isCallback, isConsultCall }));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                // If connectors wants this to be created as callback \n                if (constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase() === call.callType.toLowerCase() && isCallback) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED, call);\n                } else { // continue treating this as outbound\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, call);\n                }\n            } catch (e) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_FAILED);\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.DIAL);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                        case constants.SHARED_ERROR_TYPE.GENERIC_ERROR:\n                            dispatchError(constants.SHARED_ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SEND_DIGITS:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                await telephonyConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.VOICE_MESSAGE_TYPE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS:\n            try  {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.GET_CONTACTS:\n            try  {\n                const payload = await vendorConnector.getContacts(message.data.filter, message.data.workItemId);\n                Validator.validateClassObject(payload, ContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_CONTACTS_RESULT, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.GET_CONTACTS);\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.CONFERENCE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.CONFERENCE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, e, constants.VOICE_MESSAGE_TYPE.CONFERENCE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, {\n                    reason: constants.SHARED_EVENT_TYPE.ERROR.toLowerCase()\n                });\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_PAUSE_RECORDING, e, constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_RESUME_RECORDING, e, constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.LOGOUT);\n                } else {\n                    dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.SHARED_MESSAGE_TYPE.LOGOUT);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.VOICE_MESSAGE_TYPE.WRAP_UP_CALL: {\n            const telephonyConnector = await vendorConnector.getTelephonyConnector();\n            telephonyConnector.wrapUpCall(message.data.call);\n        }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.AGENT_AVAILABLE: {\n            if (message.data && message.data.isAvailable) {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    contact:call.contact,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    contact:call.contact,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObjects(result, GenericResult, SetAgentConfigResult);\n                if (result instanceof SetAgentConfigResult) {\n                    result.setIsSystemEvent(!!message.data.config.isSystemEvent);\n                }\n                dispatchEvent(constants.VOICE_EVENT_TYPE.AGENT_CONFIG_UPDATED, result);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG);\n                } else {\n                    dispatchError(getErrorType(e) === constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.VOICE_ERROR_TYPE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.GET_AUDIO_DEVICES:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getAudioDevices();\n                Validator.validateClassObject(result, AudioDevicesResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.GET_AUDIO_DEVICES, result);\n            } catch (e) {\n                dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_GET_AUDIO_DEVICES, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.GET_AUDIO_DEVICES);\n            }\n            break;\n        case constants.VOICE_MESSAGE_TYPE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.VOICE_MESSAGE_TYPE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.SHARED_MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await telephonyConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, e, constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.AGENT_WORK_EVENT: {\n            let { workItemId, workId, workEvent } = message.data.agentWork;\n            vendorConnector.onAgentWorkEvent({\n                workItemId,\n                workId,\n                workEvent\n            });\n        }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.vf\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showStorageAccess) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_STORAGE_ACCESS, {\n                            success: true\n                        });\n                    } else if (payload.showLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else if (payload.isSilentLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            isSilentLogin: payload.isSilentLogin\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    if (e instanceof CustomError) {\n                        dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                    } else {\n                        switch(getErrorType(e)) {\n                            case constants.VOICE_ERROR_TYPE.INVALID_PARAMS:\n                                dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARAMS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                            default:\n                                dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                        }\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop) && !CONNECTOR_CONFIG_EXCEPTION_FIELDS.includes(key)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    if (error instanceof CustomError) {\n        dispatchCustomError(error, eventType);\n        return;\n    }\n\n    switch(eventType) {\n        case constants.SHARED_EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.SHARED_EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.SHARED_EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.SHARED_EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_STARTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_STARTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_CONNECTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_CONNECTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.HANGUP: \n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, error, constants.VOICE_EVENT_TYPE.HANGUP);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT ? constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT : constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED); \n            break;\n        case constants.VOICE_EVENT_TYPE.MUTE_TOGGLE:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, error, constants.VOICE_EVENT_TYPE.MUTE_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT ? constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT : constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, error, constants.VOICE_EVENT_TYPE.HOLD_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, error, constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, error, constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.VOICE_EVENT_TYPE.AGENT_ERROR:\n            dispatchError(constants.VOICE_ERROR_TYPE.AGENT_ERROR, error, constants.VOICE_EVENT_TYPE.AGENT_ERROR);\n            break;\n        case constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.VOICE_ERROR_TYPE.UNSUPPORTED_BROWSER:\n                    dispatchError(constants.VOICE_ERROR_TYPE.UNSUPPORTED_BROWSER, error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                case constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED:\n                    dispatchError(constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED, error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.SHARED_ERROR_TYPE.GENERIC_ERROR, error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_UPDATED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_UPDATED);\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n * AUDIO_STATS - AudioStats\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.SHARED_EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, constants.SHARED_EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, constants.SHARED_EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.CALL_STARTED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload, true /* ignoring registerLog for critical event*/);\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n                    break;\n                } \n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, constants.VOICE_EVENT_TYPE.HANGUP)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED)) {\n                const { contact, initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, {\n                    contact,\n                    initialCallHasEnded,\n                    callInfo,\n                    callAttributes,\n                    phoneNumber,\n                    callId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.VOICE_ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId, contact } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    callAttributes,\n                    phoneNumber,\n                    callId,\n                    contact\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, call, true /* ignoring registerLog for critical event*/);\n                    } else if (call && call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED : constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        }, true /* ignoring registerLog for critical event*/)\n                    } else {\n                        dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, {\n                            callId:  call? call.callId : null, reason: call? call.reason : null\n                        }, true /* ignoring registerLog for critical event*/);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.SHARED_EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED:\n            dispatchEvent(constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.SHARED_EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.VOICE_EVENT_TYPE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, constants.VOICE_EVENT_TYPE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, constants.VOICE_EVENT_TYPE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        }\n        break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.CALL_UPDATED: {\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_CALL, constants.VOICE_EVENT_TYPE.CALL_UPDATED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_UPDATED, payload, registerLog);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                    let audioStats;\n                    if (payload.callId) {\n                        audioStats = {stats: payload.stats, callId: payload.callId};\n                    } else {\n                        audioStats = {stats: payload.stats}\n                    }\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.AUDIO_STATS, {audioStats}, registerLog);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.SHARED_ERROR_TYPE.GENERIC_ERROR, constants.VOICE_EVENT_TYPE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_BARGED_IN, payload, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.SHARED_ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW: {\n            dispatchEvent(constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW, payload);\n            break;\n        }\n\n        case constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT: {\n            if(validatePayload(payload, ShowStorageAccessResult, constants.SHARED_ERROR_TYPE.INVALID_STORAGE_ACCESS_RESULT, constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT, payload);\n                if(payload.success) {\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        }, registerLog);\n                    } else {\n                        setConnectorReady();\n                    }   \n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED: {\n            if (validatePayload(payload, ACWInfo, constants.SHARED_ERROR_TYPE.INVALID_ACW_INFO, constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED)){\n                dispatchEvent(constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED, payload, registerLog);\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED: {\n            if (validatePayload(payload, ACWInfo, constants.SHARED_ERROR_TYPE.INVALID_ACW_INFO, constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED)){\n                dispatchEvent(constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.SHARED_ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.SHARED_EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.SHARED_ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.SHARED_EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","this","_typeof","_regeneratorRuntime","e","__esModule","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","definition","key","get","obj","prop","toPropertyKey","toPrimitive","String","_defineProperty","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","SHARED_MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","SET_AGENT_STATUS","GET_AGENT_STATUS","LOGOUT","MESSAGE","DOWNLOAD_VENDOR_LOGS","AGENT_WORK_EVENT","GET_CONTACTS","VOICE_MESSAGE_TYPE","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","WRAP_UP_CALL","AGENT_AVAILABLE","GET_AUDIO_DEVICES","SHARED_EVENT_TYPE","ERROR","WARNING","INFO","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","STATE_CHANGE","REMOTE_CONTROLLER","SHOW_STORAGE_ACCESS","STORAGE_ACCESS_RESULT","GET_CONTACTS_RESULT","AFTER_CONVERSATION_WORK_STARTED","AFTER_CONVERSATION_WORK_ENDED","VOICE_EVENT_TYPE","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","HANGUP","SOFTPHONE_ERROR","SHOW_TRANSFER_VIEW","AUDIO_STATS","CALL_UPDATED","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","SHARED_ERROR_TYPE","CUSTOM_ERROR","GENERIC_ERROR","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_GET_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_STATE_CHANGE_RESULT","INVALID_STORAGE_ACCESS_RESULT","INVALID_ACW_INFO","VOICE_ERROR_TYPE","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","CAN_NOT_GET_AUDIO_DEVICES","CAN_NOT_UPDATE_CALL","AGENT_STATUS","ONLINE","OFFLINE","ACW","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","INTERNAL_CALL","DIALED_CALLBACK","CONSULT","CALL_SUBTYPE","PSTN","WEB_RTC","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","SHARED_CAPABILITIES_TYPE","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","VENDOR_PROVIDED_QUEUE_WAIT_TIME","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","SFDC_PENDING_STATE","AUTO_ACCEPT_ENABLED","VOICE_CAPABILITIES_TYPE","RECORD","MERGE","SWAP","BLIND_TRANSFER","SUPERVISOR_LISTEN_IN","MOS","HAS_GET_EXTERNAL_SPEAKER","HAS_SET_EXTERNAL_SPEAKER","HAS_GET_EXTERNAL_MICROPHONE","HAS_SET_EXTERNAL_MICROPHONE","CAN_CONSULT","DIAL_PAD","HAS_HID_SUPPORT","PHONEBOOK_DISABLE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONTACT","DIRECTORY","WORK_EVENT","ASSIGNED","ACCEPTED","DECLINED","COMPLETED","CLOSED","PAUSED","UNPAUSED","DIAL_OPTIONS","HANGUP_STATUS","MISSED_AGENT","FAILED_CONNECT_AGENT","FAILED_CONNECT_CUSTOMER","CALLBACK_MISSED_OR_REJECTED","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","CONNECTOR_CONFIG_EXCEPTION_FIELDS","_defineProperties","_createClass","_classCallCheck","_getPrototypeOf","bind","_setPrototypeOf","_inherits","_isNativeReflectConstruct","Boolean","valueOf","Reflect","construct","_wrapNativeSuper","Map","toString","indexOf","has","set","Wrapper","MAX_LOGS_SIZE","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","constants","logStr","Date","toISOString","concat","join","_log","downloadLogs","data","fileName","document","dataStr","file","Blob","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","ReferenceError","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","_objectSpread","CustomError","_Error","_ref","_this","labelName","namespace","message","_callSuper","Validator","validateString","Phone","_ref2","number","validateEnum","HidDevice","_ref3","productId","vendorId","validateNumber","MuteToggleResult","_ref4","isMuted","isGlobal","ActiveCallsResult","_ref5","_ref5$activeCalls","activeCalls","activeCall","validateClassObject","PhoneCall","AudioDevicesResult","_ref6","_ref6$audioDevices","audioDevices","SharedCapabilitiesResult","_ref7","_ref7$debugEnabled","debugEnabled","_ref7$hasContactSearc","hasContactSearch","_ref7$hasAgentAvailab","hasAgentAvailability","_ref7$hasQueueWaitTim","hasQueueWaitTime","_ref7$hasTransferToOm","hasTransferToOmniFlow","_ref7$hasPendingStatu","hasPendingStatusChange","_ref7$hasSFDCPendingS","hasSFDCPendingState","_ref7$hasAutoAcceptEn","hasAutoAcceptEnabled","validateBoolean","VoiceCapabilitiesResult","_ref8","_ref8$hasMute","hasMute","_ref8$hasRecord","hasRecord","_ref8$hasMerge","hasMerge","_ref8$hasSwap","hasSwap","_ref8$hasBlindTransfe","hasBlindTransfer","_ref8$hasSignedRecord","hasSignedRecordingUrl","_ref8$supportsMos","supportsMos","_ref8$hasSupervisorLi","hasSupervisorListenIn","_ref8$hasSupervisorBa","hasSupervisorBargeIn","_ref8$hasPhoneBook","hasPhoneBook","_ref8$hasGetExternalS","hasGetExternalSpeakerDeviceSetting","_ref8$hasSetExternalS","hasSetExternalSpeakerDeviceSetting","_ref8$hasGetExternalM","hasGetExternalMicrophoneDeviceSetting","_ref8$hasSetExternalM","hasSetExternalMicrophoneDeviceSetting","_ref8$canConsult","canConsult","_ref8$isDialPadDisabl","isDialPadDisabled","_ref8$isHidSupported","isHidSupported","_ref8$isPhoneBookDisa","isPhoneBookDisabled","AgentConfigResult","_ref9","_ref9$phones","phones","_ref9$selectedPhone","selectedPhone","_ref9$speakerDeviceId","speakerDeviceId","_ref9$microphoneDevic","microphoneDeviceId","Array","AgentConfig","_ref10","hidDeviceInfo","RecordingToggleResult","_ref11","isRecordingPaused","_ref11$contactId","contactId","_ref11$initialContact","initialContactId","_ref11$instanceId","instanceId","_ref11$region","region","ParticipantResult","_ref12","initialCallHasEnded","callInfo","callAttributes","phoneNumber","callId","_ref12$contact","contact","CallInfo","ContactsResult","_ref13","_ref13$contacts","contacts","_ref13$contactTypes","contactTypes","Contact","filterType","PhoneContactsResult","_ContactsResult","_ref14","_ref14$contacts","_ref14$contactTypes","CallResult","_ref15","HangupResult","_ref16","calls","HoldToggleResult","_ref17","isThirdPartyOnHold","isCustomerOnHold","SignedRecordingUrlResult","_ref18","success","url","duration","InitResult","_ref19","_ref19$showLogin","showLogin","_ref19$loginFrameHeig","loginFrameHeight","_ref19$isSilentLogin","isSilentLogin","_ref19$showStorageAcc","showStorageAccess","DialOptions","_ref20","_ref20$isCallback","isCallback","_ref20$isConsultCall","isConsultCall","GenericResult","_ref21","SetAgentConfigResult","_GenericResult","_ref22","_this2","_ref22$isSystemEvent","isSystemEvent","LogoutResult","_ref23","_ref23$loginFrameHeig","_ref24","_ref24$callStateTimes","callStateTimestamp","isOnHold","_ref24$isMuted","_ref24$isRecordingPau","initialCallId","_ref24$queueId","queueId","_ref24$queueName","queueName","_ref24$queueTimestamp","queueTimestamp","_ref24$isSoftphoneCal","isSoftphoneCall","_ref24$acceptEnabled","acceptEnabled","_ref24$declineEnabled","declineEnabled","_ref24$muteEnabled","muteEnabled","_ref24$swapEnabled","swapEnabled","_ref24$conferenceEnab","conferenceEnabled","_ref24$holdEnabled","holdEnabled","_ref24$recordEnabled","recordEnabled","_ref24$addCallerEnabl","addCallerEnabled","_ref24$extensionEnabl","extensionEnabled","_ref24$isReplayable","isReplayable","_ref24$isBargeable","isBargeable","isExternalTransfer","_ref24$showMuteButton","showMuteButton","_ref24$showRecordButt","showRecordButton","_ref24$showAddCallerB","showAddCallerButton","_ref24$showAddBlindTr","showAddBlindTransferButton","_ref24$showMergeButto","showMergeButton","_ref24$showSwapButton","showSwapButton","_ref24$removeParticip","removeParticipantVariant","_ref24$additionalFiel","additionalFields","_ref24$isMultiParty","isMultiParty","_ref24$isHIDCall","isHIDCall","_ref24$endCallDisable","endCallDisabled","_ref24$renderContactI","renderContactId","validateDate","_ref25","id","prefix","extension","endpointARN","queue","availability","recordId","description","queueWaitTime","PhoneCallAttributes","_ref26","voiceCallId","participantType","_ref26$dialerType","dialerType","parentId","_ref26$hasSupervisorB","hasSupervisorBargedIn","_ref26$isAutoMergeOn","isAutoMergeOn","_ref26$isConsultCall","_ref27","callType","callSubtype","state","reason","closeCallOnError","agentStatus","agentARN","TelephonyConnector","dialOptions","digits","filter","call1","call2","parentCall","isBlindTransfer","config","recordingUrl","vendorCallKey","supervisedCallInfo","VendorConnector","agentWork","statusInfo","enqueueNextState","logMessageToVendor","payload","workItemId","enumValues","RegExp","test","object","className","isValid","_len","classNames","_key","AgentWork","_ref28","workId","workEvent","AgentStatusInfo","_ref29","statusId","statusApiName","statusName","AgentVendorStatusInfo","_ref30","statusType","StateChangeResult","_ref31","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","_ref32","from","to","supervisorName","isBargedIn","AudioStats","_ref33","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","_ref34","inputChannelStats","outputChannelStats","StatsInfo","_ref35","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","_ref36","SupervisorHangupResult","_HangupResult","_ref37","ShowStorageAccessResult","_ref38","_ref38$success","_ref38$showLogin","_ref38$loginFrameHeig","ContactsFilter","param","_param$contains","contains","_param$limit","limit","_param$offset","offset","_param$types","types","_step","_iterator","_createForOfIteratorHelper","err","ACWInfo","_ref39","agentWorkId","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","getErrorType","sanitizePayload","isArray","sanitizedPayload","element","property","getErrorMessage","dispatchEventLog","eventType","isError","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","error","console","dispatchCustomError","customError","dispatchInfo","info","setConnectorReady","_setConnectorReady","_callee","_capabilities","telephonyConnector","agentConfigResult","sharedCapabilitiesResult","voiceCapabilitiesResult","activeCallsResult","_context","getTelephonyConnector","getAgentConfig","getSharedCapabilities","getVoiceCapabilities","getActiveCalls","agentConfig","capabilities","callInProgress","t0","channelMessageHandler","_x","_channelMessageHandler","_callee2","hangupPayload","_telephonyConnector","_payload","_call","_telephonyConnector2","_payload2","_telephonyConnector3","_payload3","_telephonyConnector4","_payload4","_telephonyConnector5","_payload5","_telephonyConnector6","_payload6","_payload7","_payload8","_telephonyConnector7","_payload9","_call2","_telephonyConnector8","_telephonyConnector9","_payload10","_payload11","_contacts","_telephonyConnector10","_payload12","_telephonyConnector11","_payload13","_telephonyConnector12","_payload14","_telephonyConnector13","_payload15","_telephonyConnector14","_payload16","_payload17","_success","_telephonyConnector16","_activeCallsResult","_activeCalls","_call3","shouldReplay","isSupervisorCall","_telephonyConnector17","result","_telephonyConnector18","_result","_message$data","_callId","_telephonyConnector19","_result2","signedRecordingUrlResult","_message$data2","_payload18","_telephonyConnector20","_result3","_telephonyConnector21","_result4","_telephonyConnector22","_result5","_message$data$agentWo","_context2","toLowerCase","supervisorDisconnect","acceptCall","t1","messagetype","additionalInfo","declineCall","t2","endCall","t3","mute","publishEvent","t4","unmute","t5","hold","t6","t7","resume","t8","t9","setAgentStatus","t10","t11","getAgentStatus","t12","params","dial","t13","t14","sendDigits","t15","getPhoneContacts","map","t16","getContacts","t17","swap","callToHold","callToResume","t18","conference","t19","addParticipant","t20","t21","pauseRecording","t22","resumeRecording","t23","logout","t24","handleMessage","wrapUpCall","isAvailable","t25","t26","isReplayedCall","t27","setAgentConfig","validateClassObjects","setIsSystemEvent","t28","getAudioDevices","t29","getSignedRecordingUrl","t30","parse","superviseCall","t31","t32","supervisorBargeIn","t33","onAgentWorkEvent","windowMessageHandler","_x2","_windowMessageHandler","_callee3","sfDomain","originUrl","_context3","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","startsWith","includes","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","_x3","_publishEvent","_callee4","_ref3$registerLog","_initialCallHasEnded","_callInfo","_callAttributes","_phoneNumber","_callId2","_contact","_telephonyConnector23","_isThirdPartyOnHold","_isCustomerOnHold","_calls","_isThirdPartyOnHold2","_isCustomerOnHold2","audioStats","_callId3","mos","_context4","statsArray"],"sourceRoot":""}