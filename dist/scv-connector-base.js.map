{"version":3,"file":"scv-connector-base.js","mappings":"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","sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/webpack/runtime/compat get default export","webpack://SCVConnectorBase/webpack/runtime/define property getters","webpack://SCVConnectorBase/webpack/runtime/hasOwnProperty shorthand","webpack://SCVConnectorBase/webpack/runtime/make namespace object","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/construct.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, () => {\nreturn ","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","function asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nexport { _asyncToGenerator as default };","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    SHARED_MESSAGE_TYPE: {\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        AGENT_WORK_EVENT: 'AGENT_WORK_EVENT',\n        GET_CONTACTS: 'GET_CONTACTS'\n    },\n    VOICE_MESSAGE_TYPE: {\n        ACCEPT_CALL: 'ACCEPT_CALL',\n        DECLINE_CALL: 'DECLINE_CALL',\n        END_CALL: 'END_CALL',\n        MUTE: 'MUTE',\n        UNMUTE: 'UNMUTE',\n        HOLD: 'HOLD',\n        RESUME: 'RESUME',\n        DIAL: 'DIAL',\n        SEND_DIGITS: 'SEND_DIGITS',\n        GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n        SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n        ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n        CONFERENCE: 'CONFERENCE',\n        PAUSE_RECORDING: 'PAUSE_RECORDING',\n        RESUME_RECORDING: 'RESUME_RECORDING',\n        SUPERVISE_CALL: 'SUPERVISE_CALL',\n        SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n        SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT',\n        SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n        GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n        WRAP_UP_CALL: 'WRAP_UP_CALL',\n        AGENT_AVAILABLE: 'AGENT_AVAILABLE',\n        GET_AUDIO_DEVICES: 'GET_AUDIO_DEVICES'\n    },\n    SHARED_EVENT_TYPE: {\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        MESSAGE: 'MESSAGE',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE',\n        REMOTE_CONTROLLER: 'REMOTE_CONTROLLER',\n        SHOW_STORAGE_ACCESS: 'SHOW_STORAGE_ACCESS',\n        STORAGE_ACCESS_RESULT: 'STORAGE_ACCESS_RESULT',\n        GET_CONTACTS_RESULT: 'GET_CONTACTS_RESULT',\n        AFTER_CONVERSATION_WORK_STARTED: 'AFTER_CONVERSATION_WORK_STARTED',\n        AFTER_CONVERSATION_WORK_ENDED: 'AFTER_CONVERSATION_WORK_ENDED'\n    },\n    VOICE_EVENT_TYPE: {\n        QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n        CALL_STARTED: 'CALL_STARTED',\n        CALL_CONNECTED: 'CALL_CONNECTED',\n        CALL_FAILED: 'CALL_FAILED',\n        MUTE_TOGGLE: 'MUTE_TOGGLE',\n        HOLD_TOGGLE: 'HOLD_TOGGLE',\n        PHONE_CONTACTS: 'PHONE_CONTACTS',\n        PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n        PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n        PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n        RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n        PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n        PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n        UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n        SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n        SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n        SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n        SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n        CALL_BARGED_IN : 'CALL_BARGED_IN',\n        WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n        AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n        AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n        AGENT_ERROR: 'AGENT_ERROR',\n        HANGUP: 'HANGUP',\n        SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n        SHOW_TRANSFER_VIEW: 'SHOW_TRANSFER_VIEW',\n        GET_AUDIO_DEVICES: 'GET_AUDIO_DEVICES',\n        AUDIO_STATS: 'AUDIO_STATS',\n        CALL_UPDATED: 'CALL_UPDATED' //sent during a call to update call controls\n    },\n    INFO_TYPE: {\n        CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n    },\n    SHARED_ERROR_TYPE: {\n        CUSTOM_ERROR: 'CUSTOM_ERROR',\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT',\n        INVALID_STORAGE_ACCESS_RESULT: 'INVALID_STORAGE_ACCESS_RESULT',\n        INVALID_ACW_INFO: 'INVALID_ACW_INFO'\n    },\n    VOICE_ERROR_TYPE: {\n        CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n        CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n        CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n        CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n        CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n        CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n        CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n        CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n        CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n        INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n        INVALID_PARAMS: 'INVALID_PARAMS',\n        CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n        CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n        CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n        INVALID_DESTINATION: 'INVALID_DESTINATION',\n        INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n        CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n        CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n        CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n        CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n        CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n        CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n        CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n        CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n        CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n        CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n        CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n        CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n        CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n        CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n        AGENT_ERROR: 'AGENT_ERROR',\n        MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n        UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER',\n        USER_BUSY_ERROR: 'USER_BUSY_ERROR',\n        WEBRTC_ERROR: 'WEBRTC_ERROR',\n        CAN_NOT_GET_AUDIO_DEVICES: 'CAN_NOT_GET_AUDIO_DEVICES',\n        CAN_NOT_UPDATE_CALL: 'CAN_NOT_UPDATE_CALL'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork'\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer',\n        INTERNAL_CALL: 'InternalCall',\n        DIALED_CALLBACK: 'DialedCallback',\n        CONSULT: 'Consult'\n    },\n    CALL_SUBTYPE: {\n        PSTN: 'PSTN',\n        WEB_RTC: 'WebRTC'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    CONTACT_LIST_TYPE: {\n        TRANSFER: 'Transfer',\n        CONFERENCE: 'Conference',\n        ALL: 'All'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    SHARED_CAPABILITIES_TYPE: {\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        VENDOR_PROVIDED_QUEUE_WAIT_TIME: 'VENDOR_PROVIDED_QUEUE_WAIT_TIME',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE',\n        SFDC_PENDING_STATE: 'SFDC_PENDING_STATE',\n        AUTO_ACCEPT_ENABLED:'AUTO_ACCEPT_ENABLED'\n    },\n    VOICE_CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        PHONEBOOK: 'PHONEBOOK',\n        HAS_GET_EXTERNAL_SPEAKER: 'HAS_GET_EXTERNAL_SPEAKER',\n        HAS_SET_EXTERNAL_SPEAKER: 'HAS_SET_EXTERNAL_SPEAKER',\n        HAS_GET_EXTERNAL_MICROPHONE: 'HAS_GET_EXTERNAL_MICROPHONE',\n        HAS_SET_EXTERNAL_MICROPHONE: 'HAS_SET_EXTERNAL_MICROPHONE',\n        CAN_CONSULT: 'CAN_CONSULT',\n        DIAL_PAD: 'DIAL_PAD',\n        HAS_HID_SUPPORT: 'HAS_HID_SUPPORT',\n        PHONEBOOK_DISABLE: 'PHONEBOOK_DISABLE'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        AGENT: \"AGENT\",\n        QUEUE: \"QUEUE\",\n        CONTACT: \"CONTACT\",\n        DIRECTORY: \"DIRECTORY\",\n        FLOW: \"FLOW\",\n        AVAILABLE: \"AVAILABLE\"\n    },\n    WORK_EVENT: {\n        ASSIGNED: 'ASSIGNED',\n        ACCEPTED: 'ACCEPTED',\n        DECLINED: 'DECLINED',\n        COMPLETED: 'COMPLETED',\n        CLOSED: 'CLOSED',\n        PAUSED: 'PAUSED',\n        UNPAUSED: 'UNPAUSED'\n    },\n    DIAL_OPTIONS: {\n        CALLBACK: \"isCallback=true\",\n        CONSULT: \"isConsultCall\"\n    },\n    HANGUP_STATUS: {\n        MISSED_AGENT: \"MissedCallAgent\",\n        DECLINED: \"DeclinedByAgent\",\n        FAILED_CONNECT_AGENT: \"FailedConnectAgent\",\n        FAILED_CONNECT_CUSTOMER: \"FailedConnectCustomer\",\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n\n/**\n * Fields in the connector configuration that are NOT logged. \n */\nexport const CONNECTOR_CONFIG_EXCEPTION_FIELDS = [\n    \"/reqHvcc/reqTelephonyIntegrationCertificate\"\n];\n","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _classCallCheck as default };","function _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nexport { _getPrototypeOf as default };","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && setPrototypeOf(t, e);\n}\nexport { _inherits as default };","function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\nexport { _isNativeReflectConstruct as default };","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nfunction _wrapNativeSuper(t) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return _wrapNativeSuper = function _wrapNativeSuper(t) {\n    if (null === t || !isNativeFunction(t)) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== r) {\n      if (r.has(t)) return r.get(t);\n      r.set(t, Wrapper);\n    }\n    function Wrapper() {\n      return construct(t, arguments, getPrototypeOf(this).constructor);\n    }\n    return Wrapper.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), setPrototypeOf(Wrapper, t);\n  }, _wrapNativeSuper(t);\n}\nexport { _wrapNativeSuper as default };","function _isNativeFunction(t) {\n  try {\n    return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n  } catch (n) {\n    return \"function\" == typeof t;\n  }\n}\nexport { _isNativeFunction as default };","import isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nexport { _construct as default };","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\n export function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return assertThisInitialized(t);\n}\nexport { _possibleConstructorReturn as default };","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    /**\n    * @enum {string}\n    */\n    SHARED_EVENT_TYPE: {\n        LOGIN_RESULT: constants.SHARED_EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.SHARED_EVENT_TYPE.LOGOUT_RESULT,\n        MESSAGE: constants.SHARED_EVENT_TYPE.MESSAGE,\n        SET_AGENT_STATUS: constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.SHARED_EVENT_TYPE.STATE_CHANGE,\n        STORAGE_ACCESS_RESULT: constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT,\n        GET_CONTACTS_RESULT: constants.SHARED_EVENT_TYPE.GET_CONTACTS_RESULT,\n        AFTER_CONVERSATION_WORK_STARTED: constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED,\n        AFTER_CONVERSATION_WORK_ENDED: constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED\n    },\n    /**\n    * @enum {string}\n    */\n    VOICE_EVENT_TYPE: {\n        CALL_STARTED: constants.VOICE_EVENT_TYPE.CALL_STARTED,\n        QUEUED_CALL_STARTED: constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED,\n        CALL_CONNECTED: constants.VOICE_EVENT_TYPE.CALL_CONNECTED,\n        HANGUP: constants.VOICE_EVENT_TYPE.HANGUP,\n        MUTE_TOGGLE: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE,\n        HOLD_TOGGLE: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE,\n        RECORDING_TOGGLE: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE,\n        PARTICIPANTS_SWAPPED: constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED,\n        PARTICIPANTS_CONFERENCED: constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED,\n        PARTICIPANT_ADDED: constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, \n        PARTICIPANT_CONNECTED: constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED,\n        PARTICIPANT_REMOVED: constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED,\n        AFTER_CALL_WORK_STARTED: constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED,\n        WRAP_UP_ENDED: constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED,\n        AGENT_ERROR: constants.VOICE_EVENT_TYPE.AGENT_ERROR,\n        SOFTPHONE_ERROR: constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR,\n        UPDATE_AUDIO_STATS: constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS,\n        CALL_BARGED_IN: constants.VOICE_EVENT_TYPE.CALL_BARGED_IN,\n        SUPERVISOR_BARGED_IN: constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN,\n        SUPERVISOR_CALL_STARTED : constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED,\n        SUPERVISOR_CALL_CONNECTED: constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED,\n        SUPERVISOR_HANGUP : constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP,\n        SHOW_TRANSFER_VIEW: constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW,\n        AUDIO_STATS: constants.VOICE_EVENT_TYPE.AUDIO_STATS,\n        CALL_UPDATED: constants.VOICE_EVENT_TYPE.CALL_UPDATED\n    },\n    /**\n    * @enum {string}\n    */\n    SHARED_ERROR_TYPE: {\n        GENERIC_ERROR: constants.SHARED_ERROR_TYPE.GENERIC_ERROR,\n        INVALID_AGENT_STATUS: constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS\n    },\n    /**\n    * @enum {string}\n    */\n    VOICE_ERROR_TYPE: {\n        INVALID_PARTICIPANT: constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT,\n        INVALID_DESTINATION: constants.VOICE_ERROR_TYPE.INVALID_DESTINATION,\n        CAN_NOT_UPDATE_PHONE_NUMBER: constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER,\n        INVALID_PARAMS: constants.VOICE_ERROR_TYPE.INVALID_PARAMS\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n     * @enum {string}\n     */\n    CALL_SUBTYPE: { ...constants.CALL_SUBTYPE },\n    /**\n     * @enum {string}\n     */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_LIST_TYPE: { ...constants.CONTACT_LIST_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n    REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES },\n    /**\n     * @enum {String}\n     */\n    WORK_EVENT: { ...constants.WORK_EVENT },\n    /**\n     * @enum {String}\n     */\n    HANGUP_STATUS: { ...constants.HANGUP_STATUS }\n};\n\n/**\n * Class representing a Custom Error\n */\nexport class CustomError extends Error {\n    /**\n     * Custom error\n     * @param {object} param\n     * @param {String} param.labelName\n     * @param {String} param.namespace\n     * @param {String} [param.message]\n     */\n    constructor({ labelName, namespace, message }) {\n        super(message);\n\n        Validator.validateString(labelName);\n        Validator.validateString(namespace);\n        if (message) {\n            Validator.validateString(message);\n        }\n        this.labelName = labelName;\n        this.namespace = namespace;\n        this.message = message;\n    }\n}\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing a Hid Device\n */\nexport class HidDevice {\n    /**\n     * Create Hid Device\n     * @param productId\n     * @param vendorId\n     */\n     constructor({ productId, vendorId }) {\n         if (productId) {\n             Validator.validateNumber(productId);\n         }\n         if (vendorId) {\n             Validator.validateNumber(vendorId);\n         }\n\n         this.productId = productId;\n         this.vendorId = vendorId;\n     }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create MuteToggleResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     * @param {PhoneCall} param.call\n     * @param {boolean} param.isGlobal\n     */\n    constructor({ isMuted, call, isGlobal }) {\n        this.isMuted = isMuted;\n        this.call = call;\n        this.isGlobal = isGlobal;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getAudioDevices()\n */\nexport class AudioDevicesResult {\n    /**\n     * Create AudioDevicesResult\n     * @param {object} param\n     * @param {AudioDevice[]} param.audioDevices\n     */\n    constructor({ audioDevices = [] }) {\n        this.audioDevices = audioDevices;\n    }\n}\n\n/**\n * Class representing result type for getSharedCapabilities()\n */\nexport class SharedCapabilitiesResult {\n    /**\n     * Create SharedCapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability, false if Salesforce provides it.\n     * @param {boolean} [param.hasQueueWaitTime] True if getPhoneContacts also provides estimated queue wait time, false if Salesforce provides it.\n     * @param {boolean} [param.hasTransferToOmniFlow] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     * @param {boolean} [param.hasSFDCPendingState] True if amazon connect has sfdc_pending state\n     * @param {boolean} [param.hasAutoAcceptEnabled] True if agent has enabled auto accept\n     */\n    constructor({\n        debugEnabled = true,\n        hasContactSearch = false,\n        hasAgentAvailability = false,\n        hasQueueWaitTime = false,\n        hasTransferToOmniFlow = false,\n        hasPendingStatusChange = false,\n        hasSFDCPendingState = false,\n        hasAutoAcceptEnabled = false\n    }){\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(hasQueueWaitTime);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n        Validator.validateBoolean(hasSFDCPendingState);\n        Validator.validateBoolean(hasAutoAcceptEnabled);\n\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.hasQueueWaitTime = hasQueueWaitTime;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n        this.hasSFDCPendingState = hasSFDCPendingState;\n        this.hasAutoAcceptEnabled = hasAutoAcceptEnabled;\n    }\n}\n\n/**\n * Class representing result type for getVoiceCapabilities()\n */\nexport class VoiceCapabilitiesResult {\n    /**\n     * Create VoiceCapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasPhoneBook] True if vendor supports the phoneBook UI\n     * @param {boolean} [param.hasGetExternalSpeakerDeviceSetting] True if vendor supports retrieving the speaker device ID\n     * @param {boolean} [param.hasSetExternalSpeakerDeviceSetting] True if vendor supports setting the speaker device ID\n     * @param {boolean} [param.hasGetExternalMicrophoneDeviceSetting] True if vendor supports retrieving the microphone device ID\n     * @param {boolean} [param.hasSetExternalMicrophoneDeviceSetting] True if vendor supports setting the microphone device ID\n     * @param {boolean} [param.canConsult] True if can consult\n     * @param {boolean} [param.isDialPadDisabled] True if dial pad is disabled\n     * @param {boolean} [param.isHidSupported] True if vendor supports hid or headset controllers\n     * @param {boolean} [param.isPhoneBookDisabled] True if phone book is disabled\n     */\n    constructor({\n        hasMute = true,\n        hasRecord = true,\n        hasMerge = true,\n        hasSwap = true,\n        hasBlindTransfer = false,\n        hasSignedRecordingUrl = false,\n        supportsMos = false,\n        hasSupervisorListenIn = false,\n        hasSupervisorBargeIn = false,\n        hasPhoneBook = false,\n        hasGetExternalSpeakerDeviceSetting = false,\n        hasSetExternalSpeakerDeviceSetting = false,\n        hasGetExternalMicrophoneDeviceSetting = false,\n        hasSetExternalMicrophoneDeviceSetting = false,\n        canConsult= false,\n        isDialPadDisabled = false,\n        isHidSupported = false,\n        isPhoneBookDisabled = false\n    }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasPhoneBook);\n        Validator.validateBoolean(hasGetExternalSpeakerDeviceSetting);\n        Validator.validateBoolean(hasSetExternalSpeakerDeviceSetting);\n        Validator.validateBoolean(hasGetExternalMicrophoneDeviceSetting);\n        Validator.validateBoolean(hasSetExternalMicrophoneDeviceSetting);\n        Validator.validateBoolean(canConsult);\n        Validator.validateBoolean(isDialPadDisabled);\n        Validator.validateBoolean(isHidSupported);\n        Validator.validateBoolean(isPhoneBookDisabled);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasPhoneBook = hasPhoneBook;\n        this.hasGetExternalSpeakerDeviceSetting = hasGetExternalSpeakerDeviceSetting;\n        this.hasSetExternalSpeakerDeviceSetting = hasSetExternalSpeakerDeviceSetting;\n        this.hasGetExternalMicrophoneDeviceSetting = hasGetExternalMicrophoneDeviceSetting;\n        this.hasSetExternalMicrophoneDeviceSetting = hasSetExternalMicrophoneDeviceSetting;\n        this.canConsult = canConsult;\n        this.isDialPadDisabled = isDialPadDisabled;\n        this.isHidSupported = isHidSupported;\n        this.isPhoneBookDisabled = isPhoneBookDisabled;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} param.phones\n     * @param {Phone} param.selectedPhone\n     * @param {string} param.speakerDeviceId\n     * @param {string} param.microphoneDeviceId\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}),\n                    speakerDeviceId = '', microphoneDeviceId = ''}) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n        Validator.validateString(speakerDeviceId);\n        Validator.validateString(microphoneDeviceId);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n        this.speakerDeviceId = speakerDeviceId;\n        this.microphoneDeviceId = microphoneDeviceId;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} param.selectedPhone\n     * @param {string} param.speakerDeviceId\n     * @param {string} param.microphoneDeviceId\n     * @param {HidDevice} param.hidDeviceInfo\n     */\n    constructor({ selectedPhone,speakerDeviceId, microphoneDeviceId, hidDeviceInfo }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        //Hid device info is optional\n        if (hidDeviceInfo !== undefined) {\n            Validator.validateClassObject(hidDeviceInfo, HidDevice);\n        }\n        this.selectedPhone = selectedPhone;\n        this.speakerDeviceId = speakerDeviceId;\n        this.microphoneDeviceId = microphoneDeviceId;\n        this.hidDeviceInfo = hidDeviceInfo;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     * @param {Contact} param.contact\n     * @param {string} param.connectionId - optional connectionID representing a call leg.\n     */\n    constructor({ initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId, contact = null , connectionId}) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.callAttributes = callAttributes;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n        this.contact = contact\n        if (connectionId) {\n            this.connectionId = connectionId;\n        } else {\n            this.connectionId = callId;\n        }\n    }\n}\n\n/**\n * Class representing result type for getContacts()\n */\nexport class ContactsResult {\n     /**\n     * Create ContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n * NOTE: TO BE DEPRECATED, Use ContactsResult instead\n */\nexport class PhoneContactsResult extends ContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        super({ contacts, contactTypes });\n    }\n}\n\n\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     * @param {boolean} param.isCallMerged\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls , isCallMerged}) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n        this.isCallMerged = isCallMerged;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     * @param {boolean} [param.isSilentLogin]\n     * @param {boolean} [param.showStorageAccess]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350, isSilentLogin = false, showStorageAccess = false }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n        this.isSilentLogin = this.showLogin ? false : isSilentLogin;\n        this.showStorageAccess = showStorageAccess;\n    }\n}\n\n/**\n * Class representing dial options for outbound dialing \n */\nexport class DialOptions {\n    /**\n     * Create DialOptions\n     * @param {boolean} [param.isCallback]\n     * @param {boolean} [param.isConsultCall]\n     */\n    constructor({ isCallback = false, isConsultCall = false }) {\n        this.isCallback = isCallback;\n        this.isConsultCall = isConsultCall;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing result type for setAgentStatus()\n */\nexport class SetAgentStateResult extends GenericResult {\n    /**\n     * Create AgentState\n     * @param {object} param\n     */\n    constructor({ success, isStatusSyncNeeded = true }) {\n        super({ success });\n        this.isStatusSyncNeeded = isStatusSyncNeeded;\n    }\n}\n\n/**\n * Class representing result type for setAgentConfig()\n */\nexport class SetAgentConfigResult extends GenericResult {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     */\n    constructor({ success, isSystemEvent = false }) {\n        super({ success });\n        this.isSystemEvent = isSystemEvent;\n    }\n    \n    setIsSystemEvent(isSystemEvent) {\n        this.isSystemEvent = isSystemEvent;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {string} [param.queueName]\n     * @param {string} [param.queueId]\n     * @param {Date} [param.queueTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {boolean} [param.showMuteButton]\n     * @param {boolean} [param.showRecordButton]\n     * @param {boolean} [param.showAddCallerButton]\n     * @param {boolean} [param.showAddBlindTransferButton]\n     * @param {boolean} [param.showMergeButton]\n     * @param {boolean} [param.showSwapButton]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call.\n     * @param {String} [param.additionalFields] - Represents additional standard and custom fields in the voice call record, where each key-value pair value corresponds to a standard or custom field and its values.\n     * @param {boolean} [param.isMultiParty]\n     * @param {boolean} [param.isHIDCall]\n     * @param {boolean} [param.endCallDisabled]\n     * @param {string} [param.renderContactId]\n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, queueId = null, queueName = null, queueTimestamp = null, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        showMuteButton = true, showRecordButton = true, showAddCallerButton = true, showAddBlindTransferButton = true, showMergeButton = true,\n\n        showSwapButton = true, removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS, additionalFields = null, isMultiParty = false, isHIDCall = false, endCallDisabled = false, renderContactId = null }) {\n\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        if (queueTimestamp) {\n            Validator.validateDate(queueTimestamp);\n        }\n        if (queueId) {\n            Validator.validateString(queueId);\n        }\n        if (queueName) {\n            Validator.validateString(queueName);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        Validator.validateBoolean(showMuteButton);\n        Validator.validateBoolean(showRecordButton);\n        Validator.validateBoolean(showAddCallerButton);\n        Validator.validateBoolean(showAddBlindTransferButton);\n        Validator.validateBoolean(showMergeButton);\n        Validator.validateBoolean(showSwapButton);\n        Validator.validateBoolean(isHIDCall);\n        Validator.validateBoolean(endCallDisabled);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        if (additionalFields) {\n            Validator.validateString(additionalFields);\n        }\n        Validator.validateBoolean(isMultiParty);\n        if (renderContactId) {\n            Validator.validateString(renderContactId);\n        }\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.queueName = queueName;\n        this.queueId = queueId;\n        this.queueTimestamp = queueTimestamp;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n        this.showMuteButton = showMuteButton;\n        this.showRecordButton = showRecordButton;\n        this.showAddCallerButton = showAddCallerButton;\n        this.showAddBlindTransferButton = showAddBlindTransferButton;\n        this.showMergeButton = showMergeButton;\n        this.showSwapButton = showSwapButton;\n        this.additionalFields = additionalFields;\n        this.isMultiParty = isMultiParty;\n        this.isHIDCall = isHIDCall;\n        this.endCallDisabled = endCallDisabled;\n        this.renderContactId = renderContactId;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {(\"Transfer\"|\"Conference\"|\"All\")} [param.listType] - The type of contact List, one of the CONTACT_LIST_TYPE values. Messaging Only\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description\n     * @param {string} [param.queueWaitTime] - Estimated Queue Wait Time\n     */\n    constructor({phoneNumber, id, type, name, listType, prefix, extension, endpointARN, queue, availability, recordId, description, queueWaitTime}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (listType) {\n            Validator.validateEnum(listType, Object.values(Constants.CONTACT_LIST_TYPE));\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n        if (queueWaitTime) {\n            Validator.validateString(queueWaitTime);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.listType = listType;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.queueWaitTime = queueWaitTime;\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     * @param {boolean} [param.isAutoMergeOn] - for multiparty conference, the call cannot be put on hold, and is being auto-merged\n     * @param {boolean} [param.isConsultCall] - true if the call is a Consult call\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false, isAutoMergeOn = false, isConsultCall = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n        Validator.validateBoolean(isAutoMergeOn);\n        Validator.validateBoolean(isConsultCall);\n        \n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n        this.isAutoMergeOn = isAutoMergeOn;\n        this.isConsultCall = isConsultCall;\n    }\n}\n\n/** \n* Class representing a PhoneCall (PSTN or WebRTC).\n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {string} [param.connectionId] - optional connectionID representing a call leg.\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {CALL_SUBTYPE} [param.callSubtype] - The subtype of the call, one of the CALL_SUBTYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact . TODO: to be deprecated, replace with toContact\n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     * @param {string} [param.agentARN]\n     * @param {Contact} [param.fromContact] - This is optional, and being populated when dialing/consulting a contact or adding a participant\n     * @param {Contact} [param.toContact] - This is currently the same as param.contact (just rename)\n     */\n    constructor({callId, callType, callSubtype, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus, agentARN, fromContact, toContact, connectionId }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        // Salesforce uses connectionId to represent a call leg as provided or assumed to be same as callId\n        // if provided, connectionId can be used in the connector API instead of the callId\n        // if not provided, it will be a copy of the callId\n        if (connectionId) {\n            Validator.validateString(connectionId);\n            this.connectionId = connectionId;\n        } else if (callId) {\n            this.connectionId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (callSubtype) {\n            Validator.validateEnum(callSubtype, Object.values(constants.CALL_SUBTYPE));\n            this.callSubtype = callSubtype;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (fromContact) {\n            Validator.validateClassObject(fromContact, Contact);\n            this.fromContact = fromContact;\n        }\n        if (toContact) {\n            Validator.validateClassObject(toContact, Contact);\n            this.toContact = toContact;\n        } else if (contact) {\n            this.toContact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        if (agentARN) {\n            this.agentARN = agentARN;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a TelephonyConnector\n*/\nexport class TelephonyConnector {\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @param {PhoneCall} call (an optional participant call to mute)\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @param {PhoneCall} call (an optional participant call to unmute)\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @param {DialOptions} dialOptions\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact, dialOptions) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @param {ContactsFilter} filterType\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts(filter) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact: The transfer target\n     * @param {PhoneCall} parentCall: The call to which a participant will be added\n     * @param {Boolean} isBlindTransfer: True if blind transfering a call and hanging up upon transfer\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, parentCall, isBlindTransfer) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get voice capabilities\n     * @returns {Promise<VoiceCapabilitiesResult>}\n     */\n    getVoiceCapabilities() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervise a call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the call to be supervised\n     * @returns {Promise <SuperviseCallResult>}\n     */\n    superviseCall(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the supervised call to be disconnected\n     * @returns {Promise <SupervisorHangupResult>}\n     */\n    supervisorDisconnect(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the supervised call which supervisor barges in\n     * @returns {Promise <SuperviseCallResult>}\n     */\n    supervisorBargeIn(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Gets the telephonyConnector\n     * @returns {Promise<TelephonyConnector>} \n     * \n     */\n    getTelephonyConnector() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Sends non-voice agent work events to vendor such as work accepted, declined, etc\n     * @param {AgentWork} agentWork\n     * \n     */\n    onAgentWorkEvent(agentWork) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {Constants.AGENT_STATUS} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n\n    /**\n     * To get the Contacts for this workItem's transfer/other channel operation\n     * @param {ContactsFilter} filter It has fields like the search term  and contact Type\n     * @param {String} workItemId\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getContacts(filter, workItemId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Returns a list of valid device IDs that can be used for the speaker and microphone devices.\n     */\n    getAudioDevices() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get shared capabilities\n     * @returns {Promise<SharedCapabilitiesResult>}\n     */\n    getSharedCapabilities() {\n        throw new Error('Not implemented');\n    }\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n    \n    static validateClassObjects(object, ...classNames) {\n        let isValid = false;\n        for (let i = 0; i < classNames.length; i++) {\n            try {\n                this.validateClassObject(object, classNames[i]);\n                isValid = true;\n                break;\n            } catch(e) {\n                // continue on\n            }\n        }\n        if (!isValid) {\n            throw new Error(`Invalid className. Expecting object matching a class name in ${classNames} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n* Class representing an AgentWork\n*/\nexport class AgentWork {\n    /**\n     * Create an AgentWork.\n     * @param {object} param\n     * @param {string} [param.workItemId] - Salesforce agent work item Id\n     * @param {string} [param.workId] - Salesforce work Id\n     * @param {WORK_EVENT} [param.workEvent] - The work lifecycle event\n     */\n    constructor({ workItemId, workId, workEvent }) {\n        Validator.validateEnum(workEvent, Object.values(constants.WORK_EVENT));\n        this.workEvent = workEvent;\n        this.workItemId = workItemId;\n        this.workId = workId;\n    }\n }\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.connectionId] - optional connectionID representing a call leg.\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn, connectionId }) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n        if (connectionId) {\n            this.connectionId = connectionId;\n        } else {\n            this.connectionId = callId;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }\n\n/** \n * Class representing result type for STORAGE_ACCESS_RESULT\n * @param {object} param\n * @param {boolean} [param.success]\n * @param {boolean} [param.showLogin] \n * @param {number} [param.loginFrameHeight]\n */\nexport class ShowStorageAccessResult {\n    constructor({success= false, showLogin = false, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class used to filter contacts. Passed as a parameter to TelephonyConnector.getPhoneContacts\n * @param {object} param\n * @param {string} param.contains\n * @param {number} param.limit\n * @param {number} param.offset\n * @param {CONTACTS_FILTER_TYPES[]} param.types \n */ \nexport class ContactsFilter {\n    constructor(param) {\n        if (param) {\n            const {contains = null, limit = 50, offset = 0, types = []} = param;\n            if (contains) {\n                Validator.validateString(contains);\n            }\n            Validator.validateNumber(limit);\n            Validator.validateNumber(offset);\n            for (const type of types){\n                Validator.validateEnum(types, Object.values(constants.CONTACTS_FILTER_TYPES));\n            }\n            this.contains = contains;\n            this.limit = limit;\n            this.offset = offset;\n            this.types = types;\n        }\n    }\n}\n\n/**\n * Class used as a parameter to AFTER_CONVERSATION_WORK_STARTED and AFTER_CONVERSATION_WORK_ENDED\n */\nexport class ACWInfo {\n    /**\n     * @param {object} param\n     * @param {string} param.agentWorkId the id of the AgentWork\n     * @param {string} param.workItemId the id of the work item (voice call or messaging session)\n     */\n    constructor({agentWorkId, workItemId}) {\n        if (agentWorkId) {\n            Validator.validateString(agentWorkId);\n            this.agentWorkId = agentWorkId;\n        }\n        if (workItemId) {\n            Validator.validateString(workItemId);\n            this.workItemId = workItemId;\n        }\n        if (!agentWorkId && !workItemId) {\n            throw new Error('You must pass at least one of agent work id or work item (voice call or messaging session) id');\n        }\n    }\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH, CONNECTOR_CONFIG_EXCEPTION_FIELDS } from './constants.js';\nimport {\n    Validator,\n    GenericResult,\n    InitResult,\n    CallResult,\n    HangupResult,\n    HoldToggleResult,\n    ContactsResult,\n    PhoneContactsResult,\n    MuteToggleResult,\n    ParticipantResult,\n    RecordingToggleResult,\n    AgentConfigResult,\n    ActiveCallsResult,\n    SignedRecordingUrlResult,\n    LogoutResult,\n    VendorConnector,\n    Contact,\n    AudioStats,\n    SuperviseCallResult,\n    SupervisorHangupResult,\n    AgentStatusInfo,\n    SupervisedCallInfo,\n    SharedCapabilitiesResult,\n    VoiceCapabilitiesResult,\n    AgentVendorStatusInfo,\n    StateChangeResult,\n    CustomError,\n    DialOptions,\n    ShowStorageAccessResult,\n    AudioDevicesResult,\n    ACWInfo,\n    SetAgentConfigResult,\n    SetAgentStateResult\n} from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes' &&\n                        property !== '/reqHvcc/reqTelephonyIntegrationCertificate') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.VOICE_EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n    channelPort.postMessage({\n        type: constants.SHARED_MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.VOICE_EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.SHARED_MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {constants.VOICE_ERROR_TYPE} errorType Error Type, ex: constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.ERROR, { message: errorType }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {CustomError} error Error object representing the custom error\n * @param {string} eventType The event that caused this error, ex: constants.SHARED_MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchCustomError(error, eventType) {\n    // eslint-disable-next-line no-console\n    const payload = {\n        customError: {\n            labelName: error.labelName,\n            namespace: error.namespace,\n            message: error.message\n        }\n    };\n    console.error(`SCV dispatched custom error for eventType ${eventType}`, payload);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.ERROR, payload, false);\n    dispatchEventLog(eventType, { errorType: constants.SHARED_ERROR_TYPE.CUSTOM_ERROR, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.INFO, { message: eventType }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const telephonyConnector = await vendorConnector.getTelephonyConnector();\n        const agentConfigResult = await telephonyConnector.getAgentConfig();\n        const sharedCapabilitiesResult = await vendorConnector.getSharedCapabilities();\n        const voiceCapabilitiesResult = await telephonyConnector.getVoiceCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(voiceCapabilitiesResult, VoiceCapabilitiesResult);\n        if (voiceCapabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await telephonyConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.SHARED_CAPABILITIES_TYPE.DEBUG_ENABLED] : sharedCapabilitiesResult.debugEnabled,\n                [constants.SHARED_CAPABILITIES_TYPE.CONTACT_SEARCH] : sharedCapabilitiesResult.hasContactSearch,\n                [constants.SHARED_CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : sharedCapabilitiesResult.hasAgentAvailability,\n                [constants.SHARED_CAPABILITIES_TYPE.VENDOR_PROVIDED_QUEUE_WAIT_TIME] : sharedCapabilitiesResult.hasQueueWaitTime,\n                [constants.SHARED_CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : sharedCapabilitiesResult.hasTransferToOmniFlow,\n                [constants.SHARED_CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : sharedCapabilitiesResult.hasPendingStatusChange,\n                [constants.SHARED_CAPABILITIES_TYPE.SFDC_PENDING_STATE]: sharedCapabilitiesResult.hasSFDCPendingState,\n                [constants.SHARED_CAPABILITIES_TYPE.AUTO_ACCEPT_ENABLED]: sharedCapabilitiesResult.hasAutoAcceptEnabled,\n                [constants.VOICE_CAPABILITIES_TYPE.MUTE] : voiceCapabilitiesResult.hasMute,\n                [constants.VOICE_CAPABILITIES_TYPE.RECORD] : voiceCapabilitiesResult.hasRecord,\n                [constants.VOICE_CAPABILITIES_TYPE.MERGE] : voiceCapabilitiesResult.hasMerge,\n                [constants.VOICE_CAPABILITIES_TYPE.SWAP] : voiceCapabilitiesResult.hasSwap,\n                [constants.VOICE_CAPABILITIES_TYPE.BLIND_TRANSFER] : voiceCapabilitiesResult.hasBlindTransfer,\n                [constants.VOICE_CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : voiceCapabilitiesResult.hasSignedRecordingUrl,\n                [constants.VOICE_CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : voiceCapabilitiesResult.hasSupervisorListenIn,\n                [constants.VOICE_CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : voiceCapabilitiesResult.hasSupervisorBargeIn,\n                [constants.VOICE_CAPABILITIES_TYPE.MOS] : voiceCapabilitiesResult.supportsMos,\n                [constants.VOICE_CAPABILITIES_TYPE.PHONEBOOK] : voiceCapabilitiesResult.hasPhoneBook,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_GET_EXTERNAL_SPEAKER] : voiceCapabilitiesResult.hasGetExternalSpeakerDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_SET_EXTERNAL_SPEAKER] : voiceCapabilitiesResult.hasSetExternalSpeakerDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_GET_EXTERNAL_MICROPHONE] : voiceCapabilitiesResult.hasGetExternalMicrophoneDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_SET_EXTERNAL_MICROPHONE] : voiceCapabilitiesResult.hasSetExternalMicrophoneDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.CAN_CONSULT]: voiceCapabilitiesResult.canConsult,\n                [constants.VOICE_CAPABILITIES_TYPE.DIAL_PAD]: voiceCapabilitiesResult.isDialPadDisabled,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_HID_SUPPORT]: voiceCapabilitiesResult.isHidSupported,\n                [constants.VOICE_CAPABILITIES_TYPE.PHONEBOOK_DISABLE]: voiceCapabilitiesResult.isPhoneBookDisabled\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.SHARED_MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    (message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase() ||\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase())) {\n                    return;\n                }\n                initAudioStats();\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await telephonyConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.VOICE_EVENT_TYPE.CALL_STARTED : constants.VOICE_EVENT_TYPE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL);\n                } else {\n                    dispatchInfo(constants.INFO_TYPE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL, additionalInfo: e});\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.DECLINE_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload =  await telephonyConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, call);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.DECLINE_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_DECLINE_THE_CALL, e, constants.VOICE_MESSAGE_TYPE.DECLINE_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.END_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.END_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, e, constants.VOICE_MESSAGE_TYPE.END_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.MUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.mute(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.MUTE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_MUTE_CALL, e, constants.VOICE_MESSAGE_TYPE.MUTE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.UNMUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.unmute(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.UNMUTE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_UNMUTE_CALL, e, constants.VOICE_MESSAGE_TYPE.UNMUTE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.HOLD:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.hold(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.HOLD);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.HOLD);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.HOLD);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.RESUME:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resume(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.RESUME);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.RESUME);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.RESUME);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult, SetAgentStateResult);\n                const { success, isStatusSyncNeeded } = payload;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS_RESULT, \n                    isStatusSyncNeeded !== undefined ? { success, isStatusSyncNeeded } : { success });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                } else {\n                    if (message.data.statusInfo) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success: false });\n                    }\n                    switch(getErrorType(e)) {\n                        case constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS:\n                            dispatchError(constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                        default:\n                            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS);\n                } else {\n                    dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.DIAL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const isCallback = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CALLBACK) >= 0;\n                const isConsultCall = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CONSULT) >= 0;\n                const payload = await telephonyConnector.dial(new Contact(message.data.contact),\n                                                              new DialOptions({ isCallback, isConsultCall }));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                // If connectors wants this to be created as callback \n                if (constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase() === call.callType.toLowerCase() && isCallback) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED, call);\n                } else { // continue treating this as outbound\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, call);\n                }\n            } catch (e) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_FAILED);\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.DIAL);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                        case constants.SHARED_ERROR_TYPE.GENERIC_ERROR:\n                            dispatchError(constants.SHARED_ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SEND_DIGITS:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                await telephonyConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.VOICE_MESSAGE_TYPE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS:\n            try  {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        listType: contact.listType,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.GET_CONTACTS:\n            try  {\n                const payload = await vendorConnector.getContacts(message.data.filter, message.data.workItemId);\n                Validator.validateClassObject(payload, ContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        listType: contact.listType,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_CONTACTS_RESULT, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.GET_CONTACTS);\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.CONFERENCE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.CONFERENCE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, e, constants.VOICE_MESSAGE_TYPE.CONFERENCE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, {\n                    reason: constants.SHARED_EVENT_TYPE.ERROR.toLowerCase()\n                });\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_PAUSE_RECORDING, e, constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_RESUME_RECORDING, e, constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.LOGOUT);\n                } else {\n                    dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.SHARED_MESSAGE_TYPE.LOGOUT);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.VOICE_MESSAGE_TYPE.WRAP_UP_CALL: {\n            const telephonyConnector = await vendorConnector.getTelephonyConnector();\n            telephonyConnector.wrapUpCall(message.data.call);\n        }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.AGENT_AVAILABLE: {\n            if (message.data && message.data.isAvailable) {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    contact:call.contact,\n                                    callInfo: call.callInfo,\n                                    callAttributes: call.callAttributes,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId,\n                                    connectionId: call.connectionId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    contact:call.contact,\n                                    callInfo: call.callInfo,\n                                    callAttributes: call.callAttributes,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId,\n                                    connectionId: call.connectionId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObjects(result, GenericResult, SetAgentConfigResult);\n                if (result instanceof SetAgentConfigResult) {\n                    result.setIsSystemEvent(!!message.data.config.isSystemEvent);\n                }\n                dispatchEvent(constants.VOICE_EVENT_TYPE.AGENT_CONFIG_UPDATED, result);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG);\n                } else {\n                    dispatchError(getErrorType(e) === constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.VOICE_ERROR_TYPE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.GET_AUDIO_DEVICES:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getAudioDevices();\n                Validator.validateClassObject(result, AudioDevicesResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.GET_AUDIO_DEVICES, result);\n            } catch (e) {\n                dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_GET_AUDIO_DEVICES, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.GET_AUDIO_DEVICES);\n            }\n            break;\n        case constants.VOICE_MESSAGE_TYPE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.VOICE_MESSAGE_TYPE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.SHARED_MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await telephonyConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, e, constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.AGENT_WORK_EVENT: {\n            let { workItemId, workId, workEvent } = message.data.agentWork;\n            vendorConnector.onAgentWorkEvent({\n                workItemId,\n                workId,\n                workEvent\n            });\n        }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.vf\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com|\\.lightning\\.force-com\\.[\\w.-]+\\.crm\\.dev|\\.[\\w-]+\\.(salesforce|crmforce)\\.mil|\\.lightning\\.(salesforce|crmforce)\\.mil|\\.sandbox\\.lightning\\.(salesforce|crmforce)\\.mil)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showStorageAccess) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_STORAGE_ACCESS, {\n                            success: true\n                        });\n                    } else if (payload.showLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else if (payload.isSilentLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            isSilentLogin: payload.isSilentLogin\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    if (e instanceof CustomError) {\n                        dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                    } else {\n                        switch(getErrorType(e)) {\n                            case constants.VOICE_ERROR_TYPE.INVALID_PARAMS:\n                                dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARAMS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                            default:\n                                dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                        }\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop) && !CONNECTOR_CONFIG_EXCEPTION_FIELDS.includes(key)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    if (error instanceof CustomError) {\n        dispatchCustomError(error, eventType);\n        return;\n    }\n\n    switch(eventType) {\n        case constants.SHARED_EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.SHARED_EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.SHARED_EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.SHARED_EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_STARTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_STARTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_CONNECTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_CONNECTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.HANGUP: \n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, error, constants.VOICE_EVENT_TYPE.HANGUP);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT ? constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT : constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED); \n            break;\n        case constants.VOICE_EVENT_TYPE.MUTE_TOGGLE:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, error, constants.VOICE_EVENT_TYPE.MUTE_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT ? constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT : constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, error, constants.VOICE_EVENT_TYPE.HOLD_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, error, constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, error, constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.VOICE_EVENT_TYPE.AGENT_ERROR:\n            dispatchError(constants.VOICE_ERROR_TYPE.AGENT_ERROR, error, constants.VOICE_EVENT_TYPE.AGENT_ERROR);\n            break;\n        case constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.VOICE_ERROR_TYPE.UNSUPPORTED_BROWSER:\n                case constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED:\n                case constants.VOICE_ERROR_TYPE.USER_BUSY_ERROR:\n                case constants.VOICE_ERROR_TYPE.WEBRTC_ERROR:\n                    dispatchError(getErrorType(error), error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.SHARED_ERROR_TYPE.GENERIC_ERROR, error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_UPDATED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_UPDATED);\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n * AUDIO_STATS - AudioStats\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.SHARED_EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, constants.SHARED_EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, constants.SHARED_EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.CALL_STARTED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload, true /* ignoring registerLog for critical event*/);\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n                    break;\n                } \n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, constants.VOICE_EVENT_TYPE.HANGUP)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED)) {\n                const { contact, initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId, connectionId } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, {\n                    contact,\n                    initialCallHasEnded,\n                    callInfo,\n                    callAttributes,\n                    phoneNumber,\n                    callId,\n                    connectionId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.VOICE_ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId, contact, connectionId } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    callAttributes,\n                    phoneNumber,\n                    callId,\n                    contact,\n                    connectionId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, call, true /* ignoring registerLog for critical event*/);\n                    } else if (call &&\n                        call.callAttributes &&\n                        call.callType !== constants.CALL_TYPE.CONSULT &&\n                        call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED : constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        }, true /* ignoring registerLog for critical event*/)\n                    } else {\n                        dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, {\n                            callId:  call? call.callId : null,\n                            connectionId:  call? call.connectionId : null,\n                            reason: call? call.reason : null\n                        }, true /* ignoring registerLog for critical event*/);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.SHARED_EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED:\n            dispatchEvent(constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.SHARED_EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.VOICE_EVENT_TYPE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, constants.VOICE_EVENT_TYPE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, constants.VOICE_EVENT_TYPE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        }\n        break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls , isCallMerged} = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    isCallMerged,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.CALL_UPDATED: {\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_CALL, constants.VOICE_EVENT_TYPE.CALL_UPDATED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_UPDATED, payload, registerLog);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                    let audioStats;\n                    if (payload.callId) {\n                        audioStats = {stats: payload.stats, callId: payload.callId};\n                    } else {\n                        audioStats = {stats: payload.stats}\n                    }\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.AUDIO_STATS, {audioStats}, registerLog);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.SHARED_ERROR_TYPE.GENERIC_ERROR, constants.VOICE_EVENT_TYPE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_BARGED_IN, payload, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.SHARED_ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW: {\n            dispatchEvent(constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW, payload);\n            break;\n        }\n\n        case constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT: {\n            if(validatePayload(payload, ShowStorageAccessResult, constants.SHARED_ERROR_TYPE.INVALID_STORAGE_ACCESS_RESULT, constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT, payload);\n                if(payload.success) {\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        }, registerLog);\n                    } else {\n                        setConnectorReady();\n                    }   \n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED: {\n            if (validatePayload(payload, ACWInfo, constants.SHARED_ERROR_TYPE.INVALID_ACW_INFO, constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED)){\n                dispatchEvent(constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED, payload, registerLog);\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED: {\n            if (validatePayload(payload, ACWInfo, constants.SHARED_ERROR_TYPE.INVALID_ACW_INFO, constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED)){\n                dispatchEvent(constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.SHARED_ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.SHARED_EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.SHARED_ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.SHARED_EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","this","_typeof","_regeneratorRuntime","e","__esModule","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","definition","key","get","obj","prop","toPropertyKey","toPrimitive","String","_defineProperty","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","SHARED_MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","SET_AGENT_STATUS","GET_AGENT_STATUS","LOGOUT","MESSAGE","DOWNLOAD_VENDOR_LOGS","AGENT_WORK_EVENT","GET_CONTACTS","VOICE_MESSAGE_TYPE","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","WRAP_UP_CALL","AGENT_AVAILABLE","GET_AUDIO_DEVICES","SHARED_EVENT_TYPE","ERROR","WARNING","INFO","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","STATE_CHANGE","REMOTE_CONTROLLER","SHOW_STORAGE_ACCESS","STORAGE_ACCESS_RESULT","GET_CONTACTS_RESULT","AFTER_CONVERSATION_WORK_STARTED","AFTER_CONVERSATION_WORK_ENDED","VOICE_EVENT_TYPE","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","HANGUP","SOFTPHONE_ERROR","SHOW_TRANSFER_VIEW","AUDIO_STATS","CALL_UPDATED","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","SHARED_ERROR_TYPE","CUSTOM_ERROR","GENERIC_ERROR","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_GET_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_STATE_CHANGE_RESULT","INVALID_STORAGE_ACCESS_RESULT","INVALID_ACW_INFO","VOICE_ERROR_TYPE","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","USER_BUSY_ERROR","WEBRTC_ERROR","CAN_NOT_GET_AUDIO_DEVICES","CAN_NOT_UPDATE_CALL","AGENT_STATUS","ONLINE","OFFLINE","ACW","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","INTERNAL_CALL","DIALED_CALLBACK","CONSULT","CALL_SUBTYPE","PSTN","WEB_RTC","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","CONTACT_LIST_TYPE","ALL","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","SHARED_CAPABILITIES_TYPE","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","VENDOR_PROVIDED_QUEUE_WAIT_TIME","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","SFDC_PENDING_STATE","AUTO_ACCEPT_ENABLED","VOICE_CAPABILITIES_TYPE","RECORD","MERGE","SWAP","BLIND_TRANSFER","SUPERVISOR_LISTEN_IN","MOS","HAS_GET_EXTERNAL_SPEAKER","HAS_SET_EXTERNAL_SPEAKER","HAS_GET_EXTERNAL_MICROPHONE","HAS_SET_EXTERNAL_MICROPHONE","CAN_CONSULT","DIAL_PAD","HAS_HID_SUPPORT","PHONEBOOK_DISABLE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONTACT","DIRECTORY","WORK_EVENT","ASSIGNED","ACCEPTED","DECLINED","COMPLETED","CLOSED","PAUSED","UNPAUSED","DIAL_OPTIONS","HANGUP_STATUS","MISSED_AGENT","FAILED_CONNECT_AGENT","FAILED_CONNECT_CUSTOMER","CALLBACK_MISSED_OR_REJECTED","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","CONNECTOR_CONFIG_EXCEPTION_FIELDS","_defineProperties","_createClass","_classCallCheck","_getPrototypeOf","bind","_setPrototypeOf","_inherits","_isNativeReflectConstruct","Boolean","valueOf","Reflect","construct","_wrapNativeSuper","Map","toString","indexOf","has","set","Wrapper","MAX_LOGS_SIZE","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","constants","logStr","Date","toISOString","concat","join","_log","downloadLogs","data","fileName","document","dataStr","file","Blob","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","ReferenceError","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","_objectSpread","CustomError","_Error","_ref","_this","labelName","namespace","message","_callSuper","Validator","validateString","Phone","_ref2","number","validateEnum","HidDevice","_ref3","productId","vendorId","validateNumber","MuteToggleResult","_ref4","isMuted","isGlobal","ActiveCallsResult","_ref5","_ref5$activeCalls","activeCalls","activeCall","validateClassObject","PhoneCall","AudioDevicesResult","_ref6","_ref6$audioDevices","audioDevices","SharedCapabilitiesResult","_ref7","_ref7$debugEnabled","debugEnabled","_ref7$hasContactSearc","hasContactSearch","_ref7$hasAgentAvailab","hasAgentAvailability","_ref7$hasQueueWaitTim","hasQueueWaitTime","_ref7$hasTransferToOm","hasTransferToOmniFlow","_ref7$hasPendingStatu","hasPendingStatusChange","_ref7$hasSFDCPendingS","hasSFDCPendingState","_ref7$hasAutoAcceptEn","hasAutoAcceptEnabled","validateBoolean","VoiceCapabilitiesResult","_ref8","_ref8$hasMute","hasMute","_ref8$hasRecord","hasRecord","_ref8$hasMerge","hasMerge","_ref8$hasSwap","hasSwap","_ref8$hasBlindTransfe","hasBlindTransfer","_ref8$hasSignedRecord","hasSignedRecordingUrl","_ref8$supportsMos","supportsMos","_ref8$hasSupervisorLi","hasSupervisorListenIn","_ref8$hasSupervisorBa","hasSupervisorBargeIn","_ref8$hasPhoneBook","hasPhoneBook","_ref8$hasGetExternalS","hasGetExternalSpeakerDeviceSetting","_ref8$hasSetExternalS","hasSetExternalSpeakerDeviceSetting","_ref8$hasGetExternalM","hasGetExternalMicrophoneDeviceSetting","_ref8$hasSetExternalM","hasSetExternalMicrophoneDeviceSetting","_ref8$canConsult","canConsult","_ref8$isDialPadDisabl","isDialPadDisabled","_ref8$isHidSupported","isHidSupported","_ref8$isPhoneBookDisa","isPhoneBookDisabled","AgentConfigResult","_ref9","_ref9$phones","phones","_ref9$selectedPhone","selectedPhone","_ref9$speakerDeviceId","speakerDeviceId","_ref9$microphoneDevic","microphoneDeviceId","Array","AgentConfig","_ref10","hidDeviceInfo","RecordingToggleResult","_ref11","isRecordingPaused","_ref11$contactId","contactId","_ref11$initialContact","initialContactId","_ref11$instanceId","instanceId","_ref11$region","region","ParticipantResult","_ref12","initialCallHasEnded","callInfo","callAttributes","phoneNumber","callId","_ref12$contact","contact","connectionId","CallInfo","ContactsResult","_ref13","_ref13$contacts","contacts","_ref13$contactTypes","contactTypes","Contact","filterType","PhoneContactsResult","_ContactsResult","_ref14","_ref14$contacts","_ref14$contactTypes","CallResult","_ref15","HangupResult","_ref16","calls","HoldToggleResult","_ref17","isThirdPartyOnHold","isCustomerOnHold","isCallMerged","SignedRecordingUrlResult","_ref18","success","url","duration","InitResult","_ref19","_ref19$showLogin","showLogin","_ref19$loginFrameHeig","loginFrameHeight","_ref19$isSilentLogin","isSilentLogin","_ref19$showStorageAcc","showStorageAccess","DialOptions","_ref20","_ref20$isCallback","isCallback","_ref20$isConsultCall","isConsultCall","GenericResult","_ref21","SetAgentStateResult","_GenericResult","_ref22","_this2","_ref22$isStatusSyncNe","isStatusSyncNeeded","SetAgentConfigResult","_GenericResult2","_ref23","_this3","_ref23$isSystemEvent","isSystemEvent","LogoutResult","_ref24","_ref24$loginFrameHeig","_ref25","_ref25$callStateTimes","callStateTimestamp","isOnHold","_ref25$isMuted","_ref25$isRecordingPau","initialCallId","_ref25$queueId","queueId","_ref25$queueName","queueName","_ref25$queueTimestamp","queueTimestamp","_ref25$isSoftphoneCal","isSoftphoneCall","_ref25$acceptEnabled","acceptEnabled","_ref25$declineEnabled","declineEnabled","_ref25$muteEnabled","muteEnabled","_ref25$swapEnabled","swapEnabled","_ref25$conferenceEnab","conferenceEnabled","_ref25$holdEnabled","holdEnabled","_ref25$recordEnabled","recordEnabled","_ref25$addCallerEnabl","addCallerEnabled","_ref25$extensionEnabl","extensionEnabled","_ref25$isReplayable","isReplayable","_ref25$isBargeable","isBargeable","isExternalTransfer","_ref25$showMuteButton","showMuteButton","_ref25$showRecordButt","showRecordButton","_ref25$showAddCallerB","showAddCallerButton","_ref25$showAddBlindTr","showAddBlindTransferButton","_ref25$showMergeButto","showMergeButton","_ref25$showSwapButton","showSwapButton","_ref25$removeParticip","removeParticipantVariant","_ref25$additionalFiel","additionalFields","_ref25$isMultiParty","isMultiParty","_ref25$isHIDCall","isHIDCall","_ref25$endCallDisable","endCallDisabled","_ref25$renderContactI","renderContactId","validateDate","_ref26","id","listType","prefix","extension","endpointARN","queue","availability","recordId","description","queueWaitTime","PhoneCallAttributes","_ref27","voiceCallId","participantType","_ref27$dialerType","dialerType","parentId","_ref27$hasSupervisorB","hasSupervisorBargedIn","_ref27$isAutoMergeOn","isAutoMergeOn","_ref27$isConsultCall","_ref28","callType","callSubtype","state","reason","closeCallOnError","agentStatus","agentARN","fromContact","toContact","TelephonyConnector","dialOptions","digits","filter","call1","call2","parentCall","isBlindTransfer","config","recordingUrl","vendorCallKey","supervisedCallInfo","VendorConnector","agentWork","statusInfo","enqueueNextState","logMessageToVendor","payload","workItemId","enumValues","RegExp","test","object","className","isValid","_len","classNames","_key","AgentWork","_ref29","workId","workEvent","AgentStatusInfo","_ref30","statusId","statusApiName","statusName","AgentVendorStatusInfo","_ref31","statusType","StateChangeResult","_ref32","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","_ref33","from","to","supervisorName","isBargedIn","AudioStats","_ref34","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","_ref35","inputChannelStats","outputChannelStats","StatsInfo","_ref36","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","_ref37","SupervisorHangupResult","_HangupResult","_ref38","ShowStorageAccessResult","_ref39","_ref39$success","_ref39$showLogin","_ref39$loginFrameHeig","ContactsFilter","param","_param$contains","contains","_param$limit","limit","_param$offset","offset","_param$types","types","_step","_iterator","_createForOfIteratorHelper","err","ACWInfo","_ref40","agentWorkId","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","getErrorType","sanitizePayload","isArray","sanitizedPayload","element","property","getErrorMessage","dispatchEventLog","eventType","isError","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","error","console","dispatchCustomError","customError","dispatchInfo","info","setConnectorReady","_setConnectorReady","_callee","_capabilities","telephonyConnector","agentConfigResult","sharedCapabilitiesResult","voiceCapabilitiesResult","activeCallsResult","_context","getTelephonyConnector","getAgentConfig","getSharedCapabilities","getVoiceCapabilities","getActiveCalls","agentConfig","capabilities","callInProgress","t0","channelMessageHandler","_x","_channelMessageHandler","_callee2","hangupPayload","_telephonyConnector","_payload","_call","_telephonyConnector2","_payload2","_telephonyConnector3","_payload3","_telephonyConnector4","_payload4","_telephonyConnector5","_payload5","_telephonyConnector6","_payload6","_payload7","_payload8","_telephonyConnector7","_payload9","_call2","_telephonyConnector8","_telephonyConnector9","_payload10","_payload11","_contacts","_telephonyConnector10","_payload12","_telephonyConnector11","_payload13","_telephonyConnector12","_payload14","_telephonyConnector13","_payload15","_telephonyConnector14","_payload16","_payload17","_success","_telephonyConnector16","_activeCallsResult","_activeCalls","_call3","shouldReplay","isSupervisorCall","_telephonyConnector17","result","_telephonyConnector18","_result","_message$data","_callId","_telephonyConnector19","_result2","signedRecordingUrlResult","_message$data2","_payload18","_telephonyConnector20","_result3","_telephonyConnector21","_result4","_telephonyConnector22","_result5","_message$data$agentWo","_context2","toLowerCase","supervisorDisconnect","acceptCall","t1","messagetype","additionalInfo","declineCall","t2","endCall","t3","mute","publishEvent","t4","unmute","t5","hold","t6","t7","resume","t8","t9","setAgentStatus","t10","t11","getAgentStatus","t12","params","dial","t13","t14","sendDigits","t15","getPhoneContacts","map","t16","getContacts","t17","swap","callToHold","callToResume","t18","conference","t19","addParticipant","t20","t21","pauseRecording","t22","resumeRecording","t23","logout","t24","handleMessage","wrapUpCall","isAvailable","t25","t26","isReplayedCall","t27","setAgentConfig","validateClassObjects","setIsSystemEvent","t28","getAudioDevices","t29","getSignedRecordingUrl","t30","parse","superviseCall","t31","t32","supervisorBargeIn","t33","onAgentWorkEvent","windowMessageHandler","_x2","_windowMessageHandler","_callee3","sfDomain","originUrl","_context3","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","startsWith","includes","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","_x3","_publishEvent","_callee4","_ref3$registerLog","_initialCallHasEnded","_callInfo","_callAttributes","_phoneNumber","_callId2","_contact","_connectionId","_telephonyConnector23","_isThirdPartyOnHold","_isCustomerOnHold","_calls","_isThirdPartyOnHold2","_isCustomerOnHold2","_calls2","audioStats","_callId3","mos","_context4","statsArray"],"sourceRoot":""}