{"version":3,"file":"scv-connector-base.js","mappings":"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","sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/webpack/runtime/compat get default export","webpack://SCVConnectorBase/webpack/runtime/define property getters","webpack://SCVConnectorBase/webpack/runtime/hasOwnProperty shorthand","webpack://SCVConnectorBase/webpack/runtime/make namespace object","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/construct.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, () => {\nreturn ","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}","import _typeof from \"./typeof.js\";\nexport default function toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    SHARED_MESSAGE_TYPE: {\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        AGENT_WORK_EVENT: 'AGENT_WORK_EVENT',\n        GET_CONTACTS: 'GET_CONTACTS'\n    },\n    VOICE_MESSAGE_TYPE: {\n        ACCEPT_CALL: 'ACCEPT_CALL',\n        DECLINE_CALL: 'DECLINE_CALL',\n        END_CALL: 'END_CALL',\n        MUTE: 'MUTE',\n        UNMUTE: 'UNMUTE',\n        HOLD: 'HOLD',\n        RESUME: 'RESUME',\n        DIAL: 'DIAL',\n        SEND_DIGITS: 'SEND_DIGITS',\n        GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n        SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n        ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n        CONFERENCE: 'CONFERENCE',\n        PAUSE_RECORDING: 'PAUSE_RECORDING',\n        RESUME_RECORDING: 'RESUME_RECORDING',\n        SUPERVISE_CALL: 'SUPERVISE_CALL',\n        SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n        SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT',\n        SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n        GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n        WRAP_UP_CALL: 'WRAP_UP_CALL',\n        AGENT_AVAILABLE: 'AGENT_AVAILABLE',\n        GET_AUDIO_DEVICES: 'GET_AUDIO_DEVICES'\n    },\n    SHARED_EVENT_TYPE: {\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        MESSAGE: 'MESSAGE',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE',\n        REMOTE_CONTROLLER: 'REMOTE_CONTROLLER',\n        SHOW_STORAGE_ACCESS: 'SHOW_STORAGE_ACCESS',\n        STORAGE_ACCESS_RESULT: 'STORAGE_ACCESS_RESULT',\n        GET_CONTACTS_RESULT: 'GET_CONTACTS_RESULT'\n    },\n    VOICE_EVENT_TYPE: {\n        QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n        CALL_STARTED: 'CALL_STARTED',\n        CALL_CONNECTED: 'CALL_CONNECTED',\n        CALL_FAILED: 'CALL_FAILED',\n        MUTE_TOGGLE: 'MUTE_TOGGLE',\n        HOLD_TOGGLE: 'HOLD_TOGGLE',\n        PHONE_CONTACTS: 'PHONE_CONTACTS',\n        PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n        PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n        PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n        RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n        PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n        PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n        UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n        SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n        SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n        SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n        SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n        CALL_BARGED_IN : 'CALL_BARGED_IN',\n        WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n        AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n        AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n        AGENT_ERROR: 'AGENT_ERROR',\n        HANGUP: 'HANGUP',\n        SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n        SHOW_TRANSFER_VIEW: 'SHOW_TRANSFER_VIEW',\n        GET_AUDIO_DEVICES: 'GET_AUDIO_DEVICES'\n    },\n    INFO_TYPE: {\n        CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n    },\n    SHARED_ERROR_TYPE: {\n        CUSTOM_ERROR: 'CUSTOM_ERROR',\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT',\n        INVALID_STORAGE_ACCESS_RESULT: 'INVALID_STORAGE_ACCESS_RESULT'\n    },\n    VOICE_ERROR_TYPE: {\n        CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n        CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n        CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n        CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n        CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n        CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n        CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n        CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n        CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n        INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n        INVALID_PARAMS: 'INVALID_PARAMS',\n        CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n        CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n        CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n        INVALID_DESTINATION: 'INVALID_DESTINATION',\n        INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n        CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n        CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n        CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n        CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n        CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n        CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n        CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n        CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n        CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n        CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n        CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n        CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n        CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n        CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n        AGENT_ERROR: 'AGENT_ERROR',\n        MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n        UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER',\n        CAN_NOT_GET_AUDIO_DEVICES: 'CAN_NOT_GET_AUDIO_DEVICES'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork',\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer',\n        INTERNAL_CALL: 'InternalCall',\n        DIALED_CALLBACK: 'DialedCallback'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        VENDOR_PROVIDED_QUEUE_WAIT_TIME: 'VENDOR_PROVIDED_QUEUE_WAIT_TIME',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE',\n        PHONEBOOK: 'PHONEBOOK',\n        HAS_GET_EXTERNAL_SPEAKER: 'HAS_GET_EXTERNAL_SPEAKER',\n        HAS_SET_EXTERNAL_SPEAKER: 'HAS_SET_EXTERNAL_SPEAKER',\n        HAS_GET_EXTERNAL_MICROPHONE: 'HAS_GET_EXTERNAL_MICROPHONE',\n        HAS_SET_EXTERNAL_MICROPHONE: 'HAS_SET_EXTERNAL_MICROPHONE',\n        SFDC_PENDING_STATE: 'SFDC_PENDING_STATE'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        AGENT: \"AGENT\",\n        QUEUE: \"QUEUE\",\n        CONTACT: \"CONTACT\",\n        DIRECTORY: \"DIRECTORY\",\n        FLOW: \"FLOW\",\n        AVAILABLE: \"AVAILABLE\"\n    },\n    WORK_EVENT: {\n        ASSIGNED: 'ASSIGNED',\n        ACCEPTED: 'ACCEPTED',\n        DECLINED: 'DECLINED',\n        COMPLETED: 'COMPLETED',\n        CLOSED: 'CLOSED'\n    },\n    DIAL_OPTIONS: {\n        CALLBACK: \"isCallback=true\"\n    },\n    HANGUP_STATUS: {\n        MISSED_AGENT: \"MissedCallAgent\",\n        DECLINED: \"DeclinedByAgent\",\n        FAILED_CONNECT_AGENT: \"FailedConnectAgent\",\n        FAILED_CONNECT_CUSTOMER: \"FailedConnectCustomer\",\n        MISSED_CUSTOMER: \"MissedCallStatus\"\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n\n/**\n * Fields in the connector configuration that are NOT logged. \n */\nexport const CONNECTOR_CONFIG_EXCEPTION_FIELDS = [\n    \"/reqHvcc/reqTelephonyIntegrationCertificate\"\n];\n","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  try {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n  } catch (e) {\n    return typeof fn === \"function\";\n  }\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\n export function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    /**\n    * @enum {string}\n    */\n    SHARED_EVENT_TYPE: {\n        LOGIN_RESULT: constants.SHARED_EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.SHARED_EVENT_TYPE.LOGOUT_RESULT,\n        MESSAGE: constants.SHARED_EVENT_TYPE.MESSAGE,\n        SET_AGENT_STATUS: constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.SHARED_EVENT_TYPE.STATE_CHANGE,\n        STORAGE_ACCESS_RESULT: constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT,\n        GET_CONTACTS_RESULT: constants.SHARED_EVENT_TYPE.GET_CONTACTS_RESULT\n    },\n    /**\n    * @enum {string}\n    */\n    VOICE_EVENT_TYPE: {\n        CALL_STARTED: constants.VOICE_EVENT_TYPE.CALL_STARTED,\n        QUEUED_CALL_STARTED: constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED,\n        CALL_CONNECTED: constants.VOICE_EVENT_TYPE.CALL_CONNECTED,\n        HANGUP: constants.VOICE_EVENT_TYPE.HANGUP,\n        MUTE_TOGGLE: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE,\n        HOLD_TOGGLE: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE,\n        RECORDING_TOGGLE: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE,\n        PARTICIPANTS_SWAPPED: constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED,\n        PARTICIPANTS_CONFERENCED: constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED,\n        PARTICIPANT_ADDED: constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, \n        PARTICIPANT_CONNECTED: constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED,\n        PARTICIPANT_REMOVED: constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED,\n        AFTER_CALL_WORK_STARTED: constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED,\n        WRAP_UP_ENDED: constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED,\n        AGENT_ERROR: constants.VOICE_EVENT_TYPE.AGENT_ERROR,\n        SOFTPHONE_ERROR: constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR,\n        UPDATE_AUDIO_STATS: constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS,\n        CALL_BARGED_IN: constants.VOICE_EVENT_TYPE.CALL_BARGED_IN,\n        SUPERVISOR_BARGED_IN: constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN,\n        SUPERVISOR_CALL_STARTED : constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED,\n        SUPERVISOR_CALL_CONNECTED: constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED,\n        SUPERVISOR_HANGUP : constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP,\n        SHOW_TRANSFER_VIEW: constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW\n    },\n    /**\n    * @enum {string}\n    */\n    SHARED_ERROR_TYPE: {\n        GENERIC_ERROR: constants.SHARED_ERROR_TYPE.GENERIC_ERROR,\n        INVALID_AGENT_STATUS: constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS\n    },\n    /**\n    * @enum {string}\n    */\n    VOICE_ERROR_TYPE: {\n        INVALID_PARTICIPANT: constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT,\n        INVALID_DESTINATION: constants.VOICE_ERROR_TYPE.INVALID_DESTINATION,\n        CAN_NOT_UPDATE_PHONE_NUMBER: constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER,\n        INVALID_PARAMS: constants.VOICE_ERROR_TYPE.INVALID_PARAMS\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n    * @enum {string}\n    */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n    REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES },\n    /**\n     * @enum {String}\n     */\n    WORK_EVENT: { ...constants.WORK_EVENT },\n    /**\n     * @enum {String}\n     */\n    HANGUP_STATUS: { ...constants.HANGUP_STATUS }\n};\n\n/**\n * Class representing a Custom Error\n */\nexport class CustomError extends Error {\n    /**\n     * Custom error\n     * @param {object} param\n     * @param {String} param.labelName\n     * @param {String} param.namespace\n     * @param {String} [param.message]\n     */\n    constructor({ labelName, namespace, message }) {\n        super(message);\n\n        Validator.validateString(labelName);\n        Validator.validateString(namespace);\n        if (message) {\n            Validator.validateString(message);\n        }\n        this.labelName = labelName;\n        this.namespace = namespace;\n        this.message = message;\n    }\n}\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create MuteToggleResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     */\n    constructor({ isMuted }) {\n        this.isMuted = isMuted;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getAudioDevices()\n */\nexport class AudioDevicesResult {\n    /**\n     * Create AudioDevicesResult\n     * @param {object} param\n     * @param {AudioDevice[]} param.audioDevices\n     */\n    constructor({ audioDevices = [] }) {\n        this.audioDevices = audioDevices;\n    }\n}\n\n/**\n * Class representing result type for getCapabilities()\n */\nexport class CapabilitiesResult {\n    /**\n     * Create CapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability, false if Salesforce provides it.\n     * @param {boolean} [param.hasQueueWaitTime] True if getPhoneContacts also provides estimated queue wait time, false if Salesforce provides it.\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasTransferToOmniFlow] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     * @param {boolean} [param.hasPhoneBook] True if vendor supports the phoneBook UI\n     * @param {boolean} [param.hasGetExternalSpeakerDeviceSetting] True if vendor supports retrieving the speaker device ID\n     * @param {boolean} [param.hasSetExternalSpeakerDeviceSetting] True if vendor supports setting the speaker device ID\n     * @param {boolean} [param.hasGetExternalMicrophoneDeviceSetting] True if vendor supports retrieving the microphone device ID\n     * @param {boolean} [param.hasSetExternalMicrophoneDeviceSetting] True if vendor supports setting the microphone device ID\n     * @param {boolean} [param.hasSFDCPendingState] True if amazon connect has sfdc_pending state\n     */\n     constructor({ hasMute = true, hasRecord = true, hasMerge = true, hasSwap = true,\n                     hasSignedRecordingUrl = false, debugEnabled = true, hasContactSearch = false,\n                     hasAgentAvailability = false, hasQueueWaitTime = false, supportsMos = false,\n                     hasSupervisorListenIn = false, hasSupervisorBargeIn = false, hasBlindTransfer = false,\n                     hasTransferToOmniFlow = false, hasPendingStatusChange=false, hasPhoneBook=false,\n                     hasGetExternalSpeakerDeviceSetting = false, hasSetExternalSpeakerDeviceSetting = false,\n                     hasGetExternalMicrophoneDeviceSetting = false, hasSetExternalMicrophoneDeviceSetting = false,\n                     hasSFDCPendingState = false }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(hasQueueWaitTime);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n        Validator.validateBoolean(hasPhoneBook);\n        Validator.validateBoolean(hasGetExternalSpeakerDeviceSetting);\n        Validator.validateBoolean(hasSetExternalSpeakerDeviceSetting);\n        Validator.validateBoolean(hasGetExternalMicrophoneDeviceSetting);\n        Validator.validateBoolean(hasSetExternalMicrophoneDeviceSetting);\n        Validator.validateBoolean(hasSFDCPendingState);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.hasQueueWaitTime = hasQueueWaitTime;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n        this.hasPhoneBook = hasPhoneBook;\n        this.hasGetExternalSpeakerDeviceSetting = hasGetExternalSpeakerDeviceSetting;\n        this.hasSetExternalSpeakerDeviceSetting = hasSetExternalSpeakerDeviceSetting;\n        this.hasGetExternalMicrophoneDeviceSetting = hasGetExternalMicrophoneDeviceSetting;\n        this.hasSetExternalMicrophoneDeviceSetting = hasSetExternalMicrophoneDeviceSetting;\n        this.hasSFDCPendingState = hasSFDCPendingState;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} param.phones\n     * @param {Phone} param.selectedPhone\n     * @param {string} param.speakerDeviceId\n     * @param {string} param.microphoneDeviceId\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}),\n                    speakerDeviceId = '', microphoneDeviceId = '' }) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n        Validator.validateString(speakerDeviceId);\n        Validator.validateString(microphoneDeviceId);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n        this.speakerDeviceId = speakerDeviceId;\n        this.microphoneDeviceId = microphoneDeviceId;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} param.selectedPhone\n     * @param {string} [param.speakerDeviceId]\n     * @param {string} [param.microphoneDeviceId]\n     */\n    constructor({ selectedPhone, speakerDeviceId, microphoneDeviceId }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        this.selectedPhone = selectedPhone;\n        this.speakerDeviceId = speakerDeviceId;\n        this.microphoneDeviceId = microphoneDeviceId;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     */\n    constructor({ initialCallHasEnded, callInfo, phoneNumber, callId }) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for getContacts()\n */\nexport class ContactsResult {\n     /**\n     * Create ContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n * NOTE: TO BE DEPRECATED, Use ContactsResult instead\n */\nexport class PhoneContactsResult extends ContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        super({ contacts, contactTypes });\n    }\n}\n\n\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls }) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     * @param {boolean} [param.isSilentLogin]\n     * @param {boolean} [param.showStorageAccess]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350, isSilentLogin = false, showStorageAccess = false }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n        this.isSilentLogin = this.showLogin ? false : isSilentLogin;\n        this.showStorageAccess = showStorageAccess;\n    }\n}\n\n/**\n * Class representing dial options for outbound dialing \n */\nexport class DialOptions {\n    /**\n     * Create DialOptions\n     * @param {boolean} [param.isCallback]\n     */\n    constructor({ isCallback = false }) {\n        this.isCallback = isCallback;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {string} [param.queueName]\n     * @param {string} [param.queueId]\n     * @param {Date} [param.queueTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {boolean} [param.showMuteButton]\n     * @param {boolean} [param.showRecordButton]\n     * @param {boolean} [param.showAddCallerButton]\n     * @param {boolean} [param.showAddBlindTransferButton]\n     * @param {boolean} [param.showMergeButton]\n     * @param {boolean} [param.showSwapButton]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call.\n     * @param {String} [param.additionalFields] - Represents additional standard and custom fields in the voice call record, where each key-value pair value corresponds to a standard or custom field and its values.\n     * @param {boolean} [param.isMultiParty]\n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, queueId = null, queueName = null, queueTimestamp = null, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        showMuteButton = true, showRecordButton = true, showAddCallerButton = true, showAddBlindTransferButton = true, showMergeButton = true,\n        showSwapButton = true, removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS, additionalFields = null, isMultiParty = false }) {\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        if (queueTimestamp) {\n            Validator.validateDate(queueTimestamp);\n        }\n        if (queueId) {\n            Validator.validateString(queueId);\n        }\n        if (queueName) {\n            Validator.validateString(queueName);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        Validator.validateBoolean(showMuteButton);\n        Validator.validateBoolean(showRecordButton);\n        Validator.validateBoolean(showAddCallerButton);\n        Validator.validateBoolean(showAddBlindTransferButton);\n        Validator.validateBoolean(showMergeButton);\n        Validator.validateBoolean(showSwapButton);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        if (additionalFields) {\n            Validator.validateString(additionalFields);\n        }\n        Validator.validateBoolean(isMultiParty);\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.queueName = queueName;\n        this.queueId = queueId;\n        this.queueTimestamp = queueTimestamp;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n        this.showMuteButton = showMuteButton;\n        this.showRecordButton = showRecordButton;\n        this.showAddCallerButton = showAddCallerButton;\n        this.showAddBlindTransferButton = showAddBlindTransferButton;\n        this.showMergeButton = showMergeButton;\n        this.showSwapButton = showSwapButton;\n        this.additionalFields = additionalFields;\n        this.isMultiParty = isMultiParty;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description\n     * @param {string} [param.queueWaitTime] - Estimated Queue Wait Time\n     */\n    constructor({phoneNumber, id, type, name, prefix, extension, endpointARN, queue, availability, recordId, description, queueWaitTime}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n        if (queueWaitTime) {\n            Validator.validateString(queueWaitTime);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.queueWaitTime = queueWaitTime;\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n\n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n    }\n}\n\n/** \n* Class representing a PhoneCall. \n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact \n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     */\n    constructor({callId, callType, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a TelephonyConnector\n*/\nexport class TelephonyConnector {\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @param {DialOptions} dialOptions\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact, dialOptions) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @param {ContactsFilter} filterType\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts(filter) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact: The transfer target\n     * @param {PhoneCall} parentCall: The call to which a participant will be added\n     * @param {Boolean} isBlindTransfer: True if blind transfering a call and hanging up upon transfer\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, parentCall, isBlindTransfer) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get Capabilities\n     * @returns {Promise<CapabilitiesResult>}\n     */\n    getCapabilities() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervise a call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the call to be supervised\n     * @returns {Promise <SuperviseCallResult>}\n     */\n    superviseCall(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the supervised call to be disconnected\n     * @returns {Promise <SupervisorHangupResult>}\n     */\n    supervisorDisconnect(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the supervised call which supervisor barges in\n     * @returns {Promise <SuperviseCallResult>}\n     */\n    supervisorBargeIn(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Gets the telephonyConnector\n     * @returns {Promise<TelephonyConnector>} \n     * \n     */\n    getTelephonyConnector() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Sends non-voice agent work events to vendor such as work accepted, declined, etc\n     * @param {AgentWork} agentWork\n     * \n     */\n    onAgentWorkEvent(agentWork) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {Constants.AGENT_STATUS} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n\n    /**\n     * To get the Contacts for this workItem's transfer/other channel operation\n     * @param {ContactsFilter} filter It has fields like the search term  and contact Type\n     * @param {String} workItemId\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getContacts(filter, workItemId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Returns a list of valid device IDs that can be used for the speaker and microphone devices.\n     */\n    getAudioDevices() {\n        throw new Error('Not implemented');\n    }\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n* Class representing an AgentWork\n*/\nexport class AgentWork {\n    /**\n     * Create an AgentWork.\n     * @param {object} param\n     * @param {string} [param.workItemId] - Salesforce agent work item Id\n     * @param {string} [param.workId] - Salesforce work Id\n     * @param {WORK_EVENT} [param.workEvent] - The work lifecycle event\n     */\n    constructor({ workItemId, workId, workEvent }) {\n        Validator.validateEnum(workEvent, Object.values(constants.WORK_EVENT));\n        this.workEvent = workEvent;\n        this.workItemId = workItemId;\n        this.workId = workId;\n    }\n }\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn}) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }\n\n/** \n * Class representing result type for STORAGE_ACCESS_RESULT\n * @param {object} param\n * @param {boolean} [param.success]\n * @param {boolean} [param.showLogin] \n * @param {number} [param.loginFrameHeight]\n */\nexport class ShowStorageAccessResult {\n    constructor({success= false, showLogin = false, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class used to filter contacts. Passed as a parameter to TelephonyConnector.getPhoneContacts\n * @param {object} param\n * @param {string} param.contains\n * @param {number} param.limit\n * @param {number} param.offset\n * @param {CONTACTS_FILTER_TYPES[]} param.types \n */ \nexport class ContactsFilter {\n    constructor(param) {\n        if (param) {\n            const {contains = null, limit = 50, offset = 0, types = []} = param;\n            if (contains) {\n                Validator.validateString(contains);\n            }\n            Validator.validateNumber(limit);\n            Validator.validateNumber(offset);\n            for (const type of types){\n                Validator.validateEnum(types, Object.values(constants.CONTACTS_FILTER_TYPES));\n            }\n            this.contains = contains;\n            this.limit = limit;\n            this.offset = offset;\n            this.types = types;\n        }\n    }\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH, CONNECTOR_CONFIG_EXCEPTION_FIELDS } from './constants.js';\nimport { Validator, GenericResult, InitResult, CallResult, HangupResult, HoldToggleResult, ContactsResult, PhoneContactsResult, MuteToggleResult,\n    ParticipantResult, RecordingToggleResult, AgentConfigResult, ActiveCallsResult, SignedRecordingUrlResult, LogoutResult,\n    VendorConnector, Contact, AudioStats, SuperviseCallResult, SupervisorHangupResult, AgentStatusInfo, SupervisedCallInfo, \n    CapabilitiesResult, AgentVendorStatusInfo, StateChangeResult, CustomError, DialOptions, ShowStorageAccessResult, AudioDevicesResult } from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.VOICE_EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n\n    channelPort.postMessage({\n        type: constants.SHARED_MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.VOICE_EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.SHARED_MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {constants.VOICE_ERROR_TYPE} errorType Error Type, ex: constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.ERROR, { message: errorType }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {CustomError} error Error object representing the custom error\n * @param {string} eventType The event that caused this error, ex: constants.SHARED_MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchCustomError(error, eventType) {\n    // eslint-disable-next-line no-console\n    const payload = {\n        customError: {\n            labelName: error.labelName,\n            namespace: error.namespace,\n            message: error.message\n        }\n    };\n    console.error(`SCV dispatched custom error for eventType ${eventType}`, payload);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.ERROR, payload, false);\n    dispatchEventLog(eventType, { errorType: constants.SHARED_ERROR_TYPE.CUSTOM_ERROR, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.INFO, { message: eventType }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const telephonyConnector = await vendorConnector.getTelephonyConnector();\n        const agentConfigResult = await telephonyConnector.getAgentConfig();\n        const capabilitiesResult = await telephonyConnector.getCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(capabilitiesResult, CapabilitiesResult);\n        if (capabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await telephonyConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.CAPABILITIES_TYPE.MUTE] : capabilitiesResult.hasMute,\n                [constants.CAPABILITIES_TYPE.RECORD] : capabilitiesResult.hasRecord,\n                [constants.CAPABILITIES_TYPE.MERGE] : capabilitiesResult.hasMerge,\n                [constants.CAPABILITIES_TYPE.SWAP] : capabilitiesResult.hasSwap,\n                [constants.CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : capabilitiesResult.hasSignedRecordingUrl,\n                [constants.CAPABILITIES_TYPE.DEBUG_ENABLED] : capabilitiesResult.debugEnabled,\n                [constants.CAPABILITIES_TYPE.CONTACT_SEARCH] : capabilitiesResult.hasContactSearch,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : capabilitiesResult.hasAgentAvailability,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_QUEUE_WAIT_TIME] : capabilitiesResult.hasQueueWaitTime,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : capabilitiesResult.hasSupervisorListenIn,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : capabilitiesResult.hasSupervisorBargeIn,\n                [constants.CAPABILITIES_TYPE.MOS] : capabilitiesResult.supportsMos,\n                [constants.CAPABILITIES_TYPE.BLIND_TRANSFER] : capabilitiesResult.hasBlindTransfer,\n                [constants.CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : capabilitiesResult.hasTransferToOmniFlow,\n                [constants.CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : capabilitiesResult.hasPendingStatusChange,\n                [constants.CAPABILITIES_TYPE.PHONEBOOK] : capabilitiesResult.hasPhoneBook,\n                [constants.CAPABILITIES_TYPE.HAS_GET_EXTERNAL_SPEAKER] : capabilitiesResult.hasGetExternalSpeakerDeviceSetting,\n                [constants.CAPABILITIES_TYPE.HAS_SET_EXTERNAL_SPEAKER] : capabilitiesResult.hasSetExternalSpeakerDeviceSetting,\n                [constants.CAPABILITIES_TYPE.HAS_GET_EXTERNAL_MICROPHONE] : capabilitiesResult.hasGetExternalMicrophoneDeviceSetting,\n                [constants.CAPABILITIES_TYPE.HAS_SET_EXTERNAL_MICROPHONE] : capabilitiesResult.hasSetExternalMicrophoneDeviceSetting,\n                [constants.CAPABILITIES_TYPE.SFDC_PENDING_STATE]: capabilitiesResult.hasSFDCPendingState\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.SHARED_MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    (message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase() ||\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase())) {\n                    return;\n                }\n                initAudioStats();\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await telephonyConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.VOICE_EVENT_TYPE.CALL_STARTED : constants.VOICE_EVENT_TYPE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL);\n                } else {\n                    dispatchInfo(constants.INFO_TYPE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL, additionalInfo: e});\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.DECLINE_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload =  await telephonyConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, call);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.DECLINE_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_DECLINE_THE_CALL, e, constants.VOICE_MESSAGE_TYPE.DECLINE_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.END_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.END_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, e, constants.VOICE_MESSAGE_TYPE.END_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.MUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.mute();\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.MUTE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_MUTE_CALL, e, constants.VOICE_MESSAGE_TYPE.MUTE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.UNMUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.unmute();\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.UNMUTE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_UNMUTE_CALL, e, constants.VOICE_MESSAGE_TYPE.UNMUTE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.HOLD:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.hold(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.HOLD);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.HOLD);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.HOLD);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.RESUME:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resume(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.RESUME);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.RESUME);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.RESUME);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult);\n                const { success } = payload;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                } else {\n                    if (message.data.statusInfo) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success: false });\n                    }\n                    switch(getErrorType(e)) {\n                        case constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS:\n                            dispatchError(constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                        default:\n                            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS);\n                } else {\n                    dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.DIAL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const isCallback = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CALLBACK) >= 0;\n                const payload = await telephonyConnector.dial(new Contact(message.data.contact),\n                                                              new DialOptions({ isCallback }));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                // If connectors wants this to be created as callback \n                if (constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase() === call.callType.toLowerCase() && isCallback) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED, call);\n                } else { // continue treating this as outbound\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, call);\n                }\n            } catch (e) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_FAILED);\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.DIAL);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                        case constants.SHARED_ERROR_TYPE.GENERIC_ERROR:\n                            dispatchError(constants.SHARED_ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SEND_DIGITS:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                await telephonyConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.VOICE_MESSAGE_TYPE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS:\n            try  {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.GET_CONTACTS:\n            try  {\n                const payload = await vendorConnector.getContacts(message.data.filter, message.data.workItemId);\n                Validator.validateClassObject(payload, ContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_CONTACTS_RESULT, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.GET_CONTACTS);\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.CONFERENCE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.CONFERENCE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, e, constants.VOICE_MESSAGE_TYPE.CONFERENCE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, {\n                    reason: constants.SHARED_EVENT_TYPE.ERROR.toLowerCase()\n                });\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_PAUSE_RECORDING, e, constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_RESUME_RECORDING, e, constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.LOGOUT);\n                } else {\n                    dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.SHARED_MESSAGE_TYPE.LOGOUT);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.VOICE_MESSAGE_TYPE.WRAP_UP_CALL: {\n            const telephonyConnector = await vendorConnector.getTelephonyConnector();\n            telephonyConnector.wrapUpCall(message.data.call);\n        }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.AGENT_AVAILABLE: {\n            if (message.data && message.data.isAvailable) {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObject(result, GenericResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.AGENT_CONFIG_UPDATED, result);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG);\n                } else {\n                    dispatchError(getErrorType(e) === constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.VOICE_ERROR_TYPE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.GET_AUDIO_DEVICES:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getAudioDevices();\n                Validator.validateClassObject(result, AudioDevicesResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.GET_AUDIO_DEVICES, result);\n            } catch (e) {\n                dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_GET_AUDIO_DEVICES, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.GET_AUDIO_DEVICES);\n            }\n            break;\n        case constants.VOICE_MESSAGE_TYPE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.VOICE_MESSAGE_TYPE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.SHARED_MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await telephonyConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, e, constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.AGENT_WORK_EVENT: {\n            let { workItemId, workId, workEvent } = message.data.agentWork;\n            vendorConnector.onAgentWorkEvent({\n                workItemId,\n                workId,\n                workEvent\n            });\n        }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.vf\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showStorageAccess) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_STORAGE_ACCESS, {\n                            success: true\n                        });\n                    } else if (payload.showLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else if (payload.isSilentLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            isSilentLogin: payload.isSilentLogin\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    if (e instanceof CustomError) {\n                        dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                    } else {\n                        switch(getErrorType(e)) {\n                            case constants.VOICE_ERROR_TYPE.INVALID_PARAMS:\n                                dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARAMS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                            default:\n                                dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                        }\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop) && !CONNECTOR_CONFIG_EXCEPTION_FIELDS.includes(key)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    if (error instanceof CustomError) {\n        dispatchCustomError(error, eventType);\n        return;\n    }\n\n    switch(eventType) {\n        case constants.SHARED_EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.SHARED_EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.SHARED_EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.SHARED_EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_STARTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_STARTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_CONNECTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_CONNECTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.HANGUP: \n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, error, constants.VOICE_EVENT_TYPE.HANGUP);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT ? constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT : constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED); \n            break;\n        case constants.VOICE_EVENT_TYPE.MUTE_TOGGLE:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, error, constants.VOICE_EVENT_TYPE.MUTE_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT ? constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT : constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, error, constants.VOICE_EVENT_TYPE.HOLD_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, error, constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, error, constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.VOICE_EVENT_TYPE.AGENT_ERROR:\n            dispatchError(constants.VOICE_ERROR_TYPE.AGENT_ERROR, error, constants.VOICE_EVENT_TYPE.AGENT_ERROR);\n            break;\n        case constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.VOICE_ERROR_TYPE.UNSUPPORTED_BROWSER:\n                    dispatchError(constants.VOICE_ERROR_TYPE.UNSUPPORTED_BROWSER, error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                case constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED:\n                    dispatchError(constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED, error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.SHARED_ERROR_TYPE.GENERIC_ERROR, error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n            }\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.SHARED_EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, constants.SHARED_EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, constants.SHARED_EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.CALL_STARTED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload, true /* ignoring registerLog for critical event*/);\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n                    break;\n                } \n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, constants.VOICE_EVENT_TYPE.HANGUP)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.VOICE_ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, call, true /* ignoring registerLog for critical event*/);\n                    } else if (call && call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED : constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        }, true /* ignoring registerLog for critical event*/)\n                    } else {\n                        dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, {\n                            reason: call? call.reason : null\n                        }, true /* ignoring registerLog for critical event*/);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.SHARED_EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED:\n            dispatchEvent(constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.SHARED_EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.VOICE_EVENT_TYPE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, constants.VOICE_EVENT_TYPE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, constants.VOICE_EVENT_TYPE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        }\n        break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        break;\n        }\n        case constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.SHARED_ERROR_TYPE.GENERIC_ERROR, constants.VOICE_EVENT_TYPE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_BARGED_IN, payload, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.SHARED_ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW: {\n            dispatchEvent(constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW, payload);\n            break;\n        }\n\n        case constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT: {\n            if(validatePayload(payload, ShowStorageAccessResult, constants.SHARED_ERROR_TYPE.INVALID_STORAGE_ACCESS_RESULT, constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT, payload);\n                if(payload.success) {\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        }, registerLog);\n                    } else {\n                        setConnectorReady();\n                    }   \n                }\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.SHARED_ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.SHARED_EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.SHARED_ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.SHARED_EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","this","_typeof","_regeneratorRuntime","e","__esModule","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","definition","key","get","obj","prop","toPropertyKey","toPrimitive","String","_defineProperty","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","SHARED_MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","SET_AGENT_STATUS","GET_AGENT_STATUS","LOGOUT","MESSAGE","DOWNLOAD_VENDOR_LOGS","AGENT_WORK_EVENT","GET_CONTACTS","VOICE_MESSAGE_TYPE","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","WRAP_UP_CALL","AGENT_AVAILABLE","GET_AUDIO_DEVICES","SHARED_EVENT_TYPE","ERROR","WARNING","INFO","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","STATE_CHANGE","REMOTE_CONTROLLER","SHOW_STORAGE_ACCESS","STORAGE_ACCESS_RESULT","GET_CONTACTS_RESULT","VOICE_EVENT_TYPE","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","HANGUP","SOFTPHONE_ERROR","SHOW_TRANSFER_VIEW","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","SHARED_ERROR_TYPE","CUSTOM_ERROR","GENERIC_ERROR","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_GET_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_STATE_CHANGE_RESULT","INVALID_STORAGE_ACCESS_RESULT","VOICE_ERROR_TYPE","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","CAN_NOT_GET_AUDIO_DEVICES","AGENT_STATUS","ONLINE","OFFLINE","ACW","CALLBACK_MISSED_OR_REJECTED","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","INTERNAL_CALL","DIALED_CALLBACK","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","CAPABILITIES_TYPE","RECORD","MERGE","SWAP","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","VENDOR_PROVIDED_QUEUE_WAIT_TIME","SUPERVISOR_LISTEN_IN","MOS","BLIND_TRANSFER","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","HAS_GET_EXTERNAL_SPEAKER","HAS_SET_EXTERNAL_SPEAKER","HAS_GET_EXTERNAL_MICROPHONE","HAS_SET_EXTERNAL_MICROPHONE","SFDC_PENDING_STATE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONTACT","DIRECTORY","WORK_EVENT","ASSIGNED","ACCEPTED","DECLINED","COMPLETED","CLOSED","DIAL_OPTIONS","HANGUP_STATUS","MISSED_AGENT","FAILED_CONNECT_AGENT","FAILED_CONNECT_CUSTOMER","MISSED_CUSTOMER","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","CONNECTOR_CONFIG_EXCEPTION_FIELDS","_defineProperties","target","props","descriptor","_createClass","Constructor","protoProps","staticProps","_classCallCheck","instance","_getPrototypeOf","bind","_setPrototypeOf","_inherits","subClass","superClass","_isNativeReflectConstruct","Boolean","valueOf","Reflect","construct","_wrapNativeSuper","Class","_cache","Map","toString","indexOf","has","set","Wrapper","MAX_LOGS_SIZE","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","constants","logStr","Date","toISOString","concat","join","_log","downloadLogs","data","fileName","fileType","document","dataStr","file","Blob","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","ReferenceError","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","_objectSpread","CustomError","_Error","_ref","_this","labelName","namespace","message","_callSuper","Validator","validateString","Phone","_ref2","number","validateEnum","MuteToggleResult","_ref3","isMuted","ActiveCallsResult","_ref4","_ref4$activeCalls","activeCalls","activeCall","validateClassObject","PhoneCall","AudioDevicesResult","_ref5","_ref5$audioDevices","audioDevices","CapabilitiesResult","_ref6","_ref6$hasMute","hasMute","_ref6$hasRecord","hasRecord","_ref6$hasMerge","hasMerge","_ref6$hasSwap","hasSwap","_ref6$hasSignedRecord","hasSignedRecordingUrl","_ref6$debugEnabled","debugEnabled","_ref6$hasContactSearc","hasContactSearch","_ref6$hasAgentAvailab","hasAgentAvailability","_ref6$hasQueueWaitTim","hasQueueWaitTime","_ref6$supportsMos","supportsMos","_ref6$hasSupervisorLi","hasSupervisorListenIn","_ref6$hasSupervisorBa","hasSupervisorBargeIn","_ref6$hasBlindTransfe","hasBlindTransfer","_ref6$hasTransferToOm","hasTransferToOmniFlow","_ref6$hasPendingStatu","hasPendingStatusChange","_ref6$hasPhoneBook","hasPhoneBook","_ref6$hasGetExternalS","hasGetExternalSpeakerDeviceSetting","_ref6$hasSetExternalS","hasSetExternalSpeakerDeviceSetting","_ref6$hasGetExternalM","hasGetExternalMicrophoneDeviceSetting","_ref6$hasSetExternalM","hasSetExternalMicrophoneDeviceSetting","_ref6$hasSFDCPendingS","hasSFDCPendingState","validateBoolean","AgentConfigResult","_ref7","_ref7$phones","phones","_ref7$selectedPhone","selectedPhone","_ref7$speakerDeviceId","speakerDeviceId","_ref7$microphoneDevic","microphoneDeviceId","Array","AgentConfig","_ref8","RecordingToggleResult","_ref9","isRecordingPaused","_ref9$contactId","contactId","_ref9$initialContactI","initialContactId","_ref9$instanceId","instanceId","_ref9$region","region","ParticipantResult","_ref10","initialCallHasEnded","callInfo","phoneNumber","callId","CallInfo","ContactsResult","_ref11","_ref11$contacts","contacts","_ref11$contactTypes","contactTypes","contact","Contact","filterType","PhoneContactsResult","_ContactsResult","_ref12","_ref12$contacts","_ref12$contactTypes","CallResult","_ref13","HangupResult","_ref14","calls","HoldToggleResult","_ref15","isThirdPartyOnHold","isCustomerOnHold","SignedRecordingUrlResult","_ref16","success","url","duration","validateNumber","InitResult","_ref17","_ref17$showLogin","showLogin","_ref17$loginFrameHeig","loginFrameHeight","_ref17$isSilentLogin","isSilentLogin","_ref17$showStorageAcc","showStorageAccess","DialOptions","_ref18","_ref18$isCallback","isCallback","GenericResult","_ref19","LogoutResult","_ref20","_ref20$loginFrameHeig","_ref21","_ref21$callStateTimes","callStateTimestamp","isOnHold","_ref21$isMuted","_ref21$isRecordingPau","initialCallId","_ref21$queueId","queueId","_ref21$queueName","queueName","_ref21$queueTimestamp","queueTimestamp","_ref21$isSoftphoneCal","isSoftphoneCall","_ref21$acceptEnabled","acceptEnabled","_ref21$declineEnabled","declineEnabled","_ref21$muteEnabled","muteEnabled","_ref21$swapEnabled","swapEnabled","_ref21$conferenceEnab","conferenceEnabled","_ref21$holdEnabled","holdEnabled","_ref21$recordEnabled","recordEnabled","_ref21$addCallerEnabl","addCallerEnabled","_ref21$extensionEnabl","extensionEnabled","_ref21$isReplayable","isReplayable","_ref21$isBargeable","isBargeable","isExternalTransfer","_ref21$showMuteButton","showMuteButton","_ref21$showRecordButt","showRecordButton","_ref21$showAddCallerB","showAddCallerButton","_ref21$showAddBlindTr","showAddBlindTransferButton","_ref21$showMergeButto","showMergeButton","_ref21$showSwapButton","showSwapButton","_ref21$removeParticip","removeParticipantVariant","_ref21$additionalFiel","additionalFields","_ref21$isMultiParty","isMultiParty","validateDate","_ref22","id","prefix","extension","endpointARN","queue","availability","recordId","description","queueWaitTime","PhoneCallAttributes","_ref23","voiceCallId","participantType","_ref23$dialerType","dialerType","parentId","_ref23$hasSupervisorB","hasSupervisorBargedIn","_ref24","callType","state","callAttributes","reason","closeCallOnError","agentStatus","TelephonyConnector","dialOptions","digits","filter","call1","call2","parentCall","isBlindTransfer","config","recordingUrl","vendorCallKey","supervisedCallInfo","VendorConnector","agentWork","statusInfo","enqueueNextState","logMessageToVendor","payload","workItemId","enumValues","RegExp","test","object","className","AgentWork","_ref25","workId","workEvent","AgentStatusInfo","_ref26","statusId","statusApiName","statusName","AgentVendorStatusInfo","_ref27","statusType","StateChangeResult","_ref28","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","_ref29","from","to","supervisorName","isBargedIn","AudioStats","_ref30","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","_ref31","inputChannelStats","outputChannelStats","StatsInfo","_ref32","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","_ref33","SupervisorHangupResult","_HangupResult","_ref34","ShowStorageAccessResult","_ref35","_ref35$success","_ref35$showLogin","_ref35$loginFrameHeig","ContactsFilter","param","_param$contains","contains","_param$limit","limit","_param$offset","offset","_param$types","types","_step","_iterator","_createForOfIteratorHelper","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","getErrorType","sanitizePayload","isArray","sanitizedPayload","element","property","getErrorMessage","dispatchEventLog","eventType","isError","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","console","dispatchCustomError","customError","dispatchInfo","setConnectorReady","_setConnectorReady","_callee","_capabilities","telephonyConnector","agentConfigResult","capabilitiesResult","activeCallsResult","_context","getTelephonyConnector","getAgentConfig","getCapabilities","getActiveCalls","agentConfig","capabilities","callInProgress","t0","channelMessageHandler","_x","_channelMessageHandler","_callee2","hangupPayload","_telephonyConnector","_payload","_call","_telephonyConnector2","_payload2","_telephonyConnector3","_payload3","_telephonyConnector4","_payload4","_telephonyConnector5","_payload5","_telephonyConnector6","_payload6","_payload7","_payload8","_telephonyConnector7","_payload9","_call2","_telephonyConnector8","_telephonyConnector9","_payload10","_payload11","_contacts","_telephonyConnector10","_payload12","_telephonyConnector11","_payload13","_telephonyConnector12","_payload14","_telephonyConnector13","_payload15","_telephonyConnector14","_payload16","_payload17","_success","_telephonyConnector16","_activeCallsResult","_activeCalls","_call3","shouldReplay","isSupervisorCall","_telephonyConnector17","result","_telephonyConnector18","_result","_message$data","_callId","_telephonyConnector19","_result2","signedRecordingUrlResult","_message$data2","_payload18","_telephonyConnector20","_result3","_telephonyConnector21","_result4","_telephonyConnector22","_result5","_message$data$agentWo","_context2","toLowerCase","supervisorDisconnect","acceptCall","t1","messagetype","additionalInfo","declineCall","t2","endCall","t3","mute","publishEvent","t4","unmute","t5","hold","t6","t7","resume","t8","t9","setAgentStatus","t10","t11","getAgentStatus","t12","params","dial","t13","t14","sendDigits","t15","getPhoneContacts","map","t16","getContacts","t17","swap","callToHold","callToResume","t18","conference","t19","addParticipant","t20","t21","pauseRecording","t22","resumeRecording","t23","logout","t24","handleMessage","wrapUpCall","isAvailable","t25","t26","isReplayedCall","t27","setAgentConfig","t28","getAudioDevices","t29","getSignedRecordingUrl","t30","parse","superviseCall","t31","t32","supervisorBargeIn","t33","onAgentWorkEvent","windowMessageHandler","_x2","_windowMessageHandler","_callee3","sfDomain","originUrl","_context3","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","startsWith","includes","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","_x3","_publishEvent","_callee4","_ref3$registerLog","_initialCallHasEnded","_callInfo","_phoneNumber","_callId2","_telephonyConnector23","_isThirdPartyOnHold","_isCustomerOnHold","_calls","_isThirdPartyOnHold2","_isCustomerOnHold2","_callId3","mos","_context4","statsArray"],"sourceRoot":""}