{"version":3,"file":"scv-connector-base.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,mBAAoB,GAAIH,GACL,iBAAZC,QACdA,QAA0B,iBAAID,IAE9BD,EAAuB,iBAAIC,GAC5B,CATD,CASGK,MAAM,I,qBCDTH,EAAOD,QARP,SAAgCK,GAC9B,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAG3B,OAAOD,CACT,C,SCNA,SAASE,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KACnB,CAAE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAsBAX,EAAOD,QApBP,SAA2BqB,GACzB,OAAO,WACL,IAAIhB,EAAOD,KACPkB,EAAOC,UACX,OAAO,IAAIJ,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGG,MAAMnB,EAAMiB,GAEzB,SAASX,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOa,GACdlB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASa,EACnE,CAEAd,OAAMe,EACR,GACF,CACF,C,UC5BAzB,EAAOD,QANP,SAAyB2B,EAAUC,GACjC,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,oCAExB,C,gBCJA,IAAIC,EAAiB,EAAQ,KAEzBC,EAA2B,EAAQ,KAEvC,SAASC,EAAWC,EAAQX,EAAMY,GAchC,OAbIH,IACF9B,EAAOD,QAAUgC,EAAaG,QAAQC,UAEtCnC,EAAOD,QAAUgC,EAAa,SAAoBC,EAAQX,EAAMY,GAC9D,IAAIG,EAAI,CAAC,MACTA,EAAEC,KAAKd,MAAMa,EAAGf,GAChB,IACIK,EAAW,IADGY,SAASC,KAAKhB,MAAMS,EAAQI,IAG9C,OADIH,GAAOJ,EAAeH,EAAUO,EAAMO,WACnCd,CACT,EAGKK,EAAWR,MAAM,KAAMD,UAChC,CAEAtB,EAAOD,QAAUgC,C,SCrBjB,SAASU,EAAkBC,EAAQC,GACjC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeT,EAAQI,EAAWlC,IAAKkC,EAChD,CACF,CAQA9C,EAAOD,QANP,SAAsB4B,EAAayB,EAAYC,GAG7C,OAFID,GAAYX,EAAkBd,EAAYa,UAAWY,GACrDC,GAAaZ,EAAkBd,EAAa0B,GACzC1B,CACT,C,UCCA3B,EAAOD,QAfP,SAAyBuD,EAAK1C,EAAKG,GAYjC,OAXIH,KAAO0C,EACTJ,OAAOC,eAAeG,EAAK1C,EAAK,CAC9BG,MAAOA,EACPgC,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZK,EAAI1C,GAAOG,EAGNuC,CACT,C,UCbA,SAASC,EAAgBC,GAIvB,OAHAxD,EAAOD,QAAUwD,EAAkBL,OAAOrB,eAAiBqB,OAAOO,eAAiB,SAAyBD,GAC1G,OAAOA,EAAEE,WAAaR,OAAOO,eAAeD,EAC9C,EACOD,EAAgBC,EACzB,CAEAxD,EAAOD,QAAUwD,C,gBCPjB,IAAI1B,EAAiB,EAAQ,KAiB7B7B,EAAOD,QAfP,SAAmB4D,EAAUC,GAC3B,GAA0B,mBAAfA,GAA4C,OAAfA,EACtC,MAAM,IAAIhC,UAAU,sDAGtB+B,EAASnB,UAAYU,OAAOW,OAAOD,GAAcA,EAAWpB,UAAW,CACrEsB,YAAa,CACX/C,MAAO4C,EACPV,UAAU,EACVD,cAAc,KAGdY,GAAY/B,EAAe8B,EAAUC,EAC3C,C,UCXA5D,EAAOD,QAJP,SAA2BqB,GACzB,OAAgE,IAAzDkB,SAASyB,SAASC,KAAK5C,GAAI6C,QAAQ,gBAC5C,C,UCWAjE,EAAOD,QAbP,WACE,GAAuB,oBAAZmC,UAA4BA,QAAQC,UAAW,OAAO,EACjE,GAAID,QAAQC,UAAU+B,KAAM,OAAO,EACnC,GAAqB,mBAAVC,MAAsB,OAAO,EAExC,IAEE,OADAC,KAAK5B,UAAUuB,SAASC,KAAK9B,QAAQC,UAAUiC,KAAM,IAAI,WAAa,MAC/D,CACT,CAAE,MAAOC,GACP,OAAO,CACT,CACF,C,gBCXA,IAAIC,EAAU,EAAQ,KAElBC,EAAwB,EAAQ,KAUpCvE,EAAOD,QARP,SAAoCK,EAAM4D,GACxC,OAAIA,GAA2B,WAAlBM,EAAQN,IAAsC,mBAATA,EAI3CO,EAAsBnE,GAHpB4D,CAIX,C,UCVA,SAASQ,EAAgBhB,EAAGiB,GAM1B,OALAzE,EAAOD,QAAUyE,EAAkBtB,OAAOrB,gBAAkB,SAAyB2B,EAAGiB,GAEtF,OADAjB,EAAEE,UAAYe,EACPjB,CACT,EAEOgB,EAAgBhB,EAAGiB,EAC5B,CAEAzE,EAAOD,QAAUyE,C,UCTjB,SAASF,EAAQhB,GAaf,MAVsB,mBAAXoB,QAAoD,iBAApBA,OAAOC,SAChD3E,EAAOD,QAAUuE,EAAU,SAAiBhB,GAC1C,cAAcA,CAChB,EAEAtD,EAAOD,QAAUuE,EAAU,SAAiBhB,GAC1C,OAAOA,GAAyB,mBAAXoB,QAAyBpB,EAAIQ,cAAgBY,QAAUpB,IAAQoB,OAAOlC,UAAY,gBAAkBc,CAC3H,EAGKgB,EAAQhB,EACjB,CAEAtD,EAAOD,QAAUuE,C,gBChBjB,IAAIb,EAAiB,EAAQ,KAEzB5B,EAAiB,EAAQ,KAEzB+C,EAAmB,EAAQ,KAE3BzC,EAAY,EAAQ,KAExB,SAAS0C,EAAiB5C,GACxB,IAAI6C,EAAwB,mBAARC,IAAqB,IAAIA,SAAQtD,EA8BrD,OA5BAzB,EAAOD,QAAU8E,EAAmB,SAA0B5C,GAC5D,GAAc,OAAVA,IAAmB2C,EAAiB3C,GAAQ,OAAOA,EAEvD,GAAqB,mBAAVA,EACT,MAAM,IAAIL,UAAU,sDAGtB,QAAsB,IAAXkD,EAAwB,CACjC,GAAIA,EAAOE,IAAI/C,GAAQ,OAAO6C,EAAOG,IAAIhD,GAEzC6C,EAAOI,IAAIjD,EAAOkD,EACpB,CAEA,SAASA,IACP,OAAOhD,EAAUF,EAAOX,UAAWmC,EAAetD,MAAM2D,YAC1D,CAUA,OARAqB,EAAQ3C,UAAYU,OAAOW,OAAO5B,EAAMO,UAAW,CACjDsB,YAAa,CACX/C,MAAOoE,EACPpC,YAAY,EACZE,UAAU,EACVD,cAAc,KAGXnB,EAAesD,EAASlD,EACjC,EAEO4C,EAAiB5C,EAC1B,CAEAjC,EAAOD,QAAU8E,C,gBC1CjB7E,EAAOD,QAAU,EAAjB,I,UCOA,IAAIqF,EAAW,SAAUrF,GACvB,aAEA,IAEI0B,EAFA4D,EAAKnC,OAAOV,UACZ8C,EAASD,EAAGE,eAEZC,EAA4B,mBAAXd,OAAwBA,OAAS,CAAC,EACnDe,EAAiBD,EAAQb,UAAY,aACrCe,EAAsBF,EAAQG,eAAiB,kBAC/CC,EAAoBJ,EAAQK,aAAe,gBAE/C,SAAS5F,EAAOqD,EAAK1C,EAAKG,GAOxB,OANAmC,OAAOC,eAAeG,EAAK1C,EAAK,CAC9BG,MAAOA,EACPgC,YAAY,EACZC,cAAc,EACdC,UAAU,IAELK,EAAI1C,EACb,CACA,IAEEX,EAAO,CAAC,EAAG,GACb,CAAE,MAAOuB,GACPvB,EAAS,SAASqD,EAAK1C,EAAKG,GAC1B,OAAOuC,EAAI1C,GAAOG,CACpB,CACF,CAEA,SAAS+E,EAAKC,EAASC,EAAS5F,EAAM6F,GAEpC,IAAIC,EAAiBF,GAAWA,EAAQxD,qBAAqB2D,EAAYH,EAAUG,EAC/EC,EAAYlD,OAAOW,OAAOqC,EAAe1D,WACzC6D,EAAU,IAAIC,EAAQL,GAAe,IAMzC,OAFAG,EAAUG,QAsMZ,SAA0BR,EAAS3F,EAAMiG,GACvC,IAAIG,EAAQC,EAEZ,OAAO,SAAgBC,EAAQ7F,GAC7B,GAAI2F,IAAUG,EACZ,MAAM,IAAIC,MAAM,gCAGlB,GAAIJ,IAAUK,EAAmB,CAC/B,GAAe,UAAXH,EACF,MAAM7F,EAKR,OAAOiG,GACT,CAKA,IAHAT,EAAQK,OAASA,EACjBL,EAAQxF,IAAMA,IAED,CACX,IAAIkG,EAAWV,EAAQU,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAUV,GACnD,GAAIW,EAAgB,CAClB,GAAIA,IAAmBE,EAAkB,SACzC,OAAOF,CACT,CACF,CAEA,GAAuB,SAAnBX,EAAQK,OAGVL,EAAQc,KAAOd,EAAQe,MAAQf,EAAQxF,SAElC,GAAuB,UAAnBwF,EAAQK,OAAoB,CACrC,GAAIF,IAAUC,EAEZ,MADAD,EAAQK,EACFR,EAAQxF,IAGhBwF,EAAQgB,kBAAkBhB,EAAQxF,IAEpC,KAA8B,WAAnBwF,EAAQK,QACjBL,EAAQiB,OAAO,SAAUjB,EAAQxF,KAGnC2F,EAAQG,EAER,IAAIY,EAASC,EAASzB,EAAS3F,EAAMiG,GACrC,GAAoB,WAAhBkB,EAAOE,KAAmB,CAO5B,GAJAjB,EAAQH,EAAQpF,KACZ4F,EACAa,EAEAH,EAAO1G,MAAQqG,EACjB,SAGF,MAAO,CACLnG,MAAOwG,EAAO1G,IACdI,KAAMoF,EAAQpF,KAGlB,CAA2B,UAAhBsG,EAAOE,OAChBjB,EAAQK,EAGRR,EAAQK,OAAS,QACjBL,EAAQxF,IAAM0G,EAAO1G,IAEzB,CACF,CACF,CAlRsB8G,CAAiB5B,EAAS3F,EAAMiG,GAE7CD,CACT,CAaA,SAASoB,EAASpG,EAAIkC,EAAKzC,GACzB,IACE,MAAO,CAAE4G,KAAM,SAAU5G,IAAKO,EAAG4C,KAAKV,EAAKzC,GAC7C,CAAE,MAAOW,GACP,MAAO,CAAEiG,KAAM,QAAS5G,IAAKW,EAC/B,CACF,CAlBAzB,EAAQ+F,KAAOA,EAoBf,IAAIW,EAAyB,iBACzBiB,EAAyB,iBACzBf,EAAoB,YACpBE,EAAoB,YAIpBK,EAAmB,CAAC,EAMxB,SAASf,IAAa,CACtB,SAASyB,IAAqB,CAC9B,SAASC,IAA8B,CAIvC,IAAIC,EAAoB,CAAC,EACzBA,EAAkBrC,GAAkB,WAClC,OAAOtF,IACT,EAEA,IAAI4H,EAAW7E,OAAOO,eAClBuE,EAA0BD,GAAYA,EAASA,EAASE,EAAO,MAC/DD,GACAA,IAA4B3C,GAC5BC,EAAOtB,KAAKgE,EAAyBvC,KAGvCqC,EAAoBE,GAGtB,IAAIE,EAAKL,EAA2BrF,UAClC2D,EAAU3D,UAAYU,OAAOW,OAAOiE,GAWtC,SAASK,EAAsB3F,GAC7B,CAAC,OAAQ,QAAS,UAAU4F,SAAQ,SAAS1B,GAC3CzG,EAAOuC,EAAWkE,GAAQ,SAAS7F,GACjC,OAAOV,KAAKoG,QAAQG,EAAQ7F,EAC9B,GACF,GACF,CA+BA,SAASwH,EAAcjC,EAAWkC,GAChC,SAASC,EAAO7B,EAAQ7F,EAAKL,EAASC,GACpC,IAAI8G,EAASC,EAASpB,EAAUM,GAASN,EAAWvF,GACpD,GAAoB,UAAhB0G,EAAOE,KAEJ,CACL,IAAIe,EAASjB,EAAO1G,IAChBE,EAAQyH,EAAOzH,MACnB,OAAIA,GACiB,iBAAVA,GACPuE,EAAOtB,KAAKjD,EAAO,WACduH,EAAY9H,QAAQO,EAAM0H,SAAStH,MAAK,SAASJ,GACtDwH,EAAO,OAAQxH,EAAOP,EAASC,EACjC,IAAG,SAASe,GACV+G,EAAO,QAAS/G,EAAKhB,EAASC,EAChC,IAGK6H,EAAY9H,QAAQO,GAAOI,MAAK,SAASuH,GAI9CF,EAAOzH,MAAQ2H,EACflI,EAAQgI,EACV,IAAG,SAASxH,GAGV,OAAOuH,EAAO,QAASvH,EAAOR,EAASC,EACzC,GACF,CAzBEA,EAAO8G,EAAO1G,IA0BlB,CAEA,IAAI8H,EAgCJxI,KAAKoG,QA9BL,SAAiBG,EAAQ7F,GACvB,SAAS+H,IACP,OAAO,IAAIN,GAAY,SAAS9H,EAASC,GACvC8H,EAAO7B,EAAQ7F,EAAKL,EAASC,EAC/B,GACF,CAEA,OAAOkI,EAaLA,EAAkBA,EAAgBxH,KAChCyH,EAGAA,GACEA,GACR,CAKF,CA4GA,SAAS3B,EAAoBF,EAAUV,GACrC,IAAIK,EAASK,EAASpC,SAAS0B,EAAQK,QACvC,GAAIA,IAAWjF,EAAW,CAKxB,GAFA4E,EAAQU,SAAW,KAEI,UAAnBV,EAAQK,OAAoB,CAE9B,GAAIK,EAASpC,SAAiB,SAG5B0B,EAAQK,OAAS,SACjBL,EAAQxF,IAAMY,EACdwF,EAAoBF,EAAUV,GAEP,UAAnBA,EAAQK,QAGV,OAAOQ,EAIXb,EAAQK,OAAS,QACjBL,EAAQxF,IAAM,IAAIe,UAChB,iDACJ,CAEA,OAAOsF,CACT,CAEA,IAAIK,EAASC,EAASd,EAAQK,EAASpC,SAAU0B,EAAQxF,KAEzD,GAAoB,UAAhB0G,EAAOE,KAIT,OAHApB,EAAQK,OAAS,QACjBL,EAAQxF,IAAM0G,EAAO1G,IACrBwF,EAAQU,SAAW,KACZG,EAGT,IAAIpG,EAAOyG,EAAO1G,IAElB,OAAMC,EAOFA,EAAKG,MAGPoF,EAAQU,EAAS8B,YAAc/H,EAAKC,MAGpCsF,EAAQyC,KAAO/B,EAASgC,QAQD,WAAnB1C,EAAQK,SACVL,EAAQK,OAAS,OACjBL,EAAQxF,IAAMY,GAUlB4E,EAAQU,SAAW,KACZG,GANEpG,GA3BPuF,EAAQK,OAAS,QACjBL,EAAQxF,IAAM,IAAIe,UAAU,oCAC5ByE,EAAQU,SAAW,KACZG,EA+BX,CAqBA,SAAS8B,EAAaC,GACpB,IAAIC,EAAQ,CAAEC,OAAQF,EAAK,IAEvB,KAAKA,IACPC,EAAME,SAAWH,EAAK,IAGpB,KAAKA,IACPC,EAAMG,WAAaJ,EAAK,GACxBC,EAAMI,SAAWL,EAAK,IAGxB9I,KAAKoJ,WAAWlH,KAAK6G,EACvB,CAEA,SAASM,EAAcN,GACrB,IAAI3B,EAAS2B,EAAMO,YAAc,CAAC,EAClClC,EAAOE,KAAO,gBACPF,EAAO1G,IACdqI,EAAMO,WAAalC,CACrB,CAEA,SAASjB,EAAQL,GAIf9F,KAAKoJ,WAAa,CAAC,CAAEJ,OAAQ,SAC7BlD,EAAYmC,QAAQY,EAAc7I,MAClCA,KAAKuJ,OAAM,EACb,CA6BA,SAASzB,EAAO0B,GACd,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAASlE,GAC9B,GAAImE,EACF,OAAOA,EAAe5F,KAAK2F,GAG7B,GAA6B,mBAAlBA,EAASb,KAClB,OAAOa,EAGT,IAAKE,MAAMF,EAAS9G,QAAS,CAC3B,IAAID,GAAK,EAAGkG,EAAO,SAASA,IAC1B,OAASlG,EAAI+G,EAAS9G,QACpB,GAAIyC,EAAOtB,KAAK2F,EAAU/G,GAGxB,OAFAkG,EAAK/H,MAAQ4I,EAAS/G,GACtBkG,EAAK7H,MAAO,EACL6H,EAOX,OAHAA,EAAK/H,MAAQU,EACbqH,EAAK7H,MAAO,EAEL6H,CACT,EAEA,OAAOA,EAAKA,KAAOA,CACrB,CACF,CAGA,MAAO,CAAEA,KAAMhC,EACjB,CAGA,SAASA,IACP,MAAO,CAAE/F,MAAOU,EAAWR,MAAM,EACnC,CA8MA,OA5mBA2G,EAAkBpF,UAAY0F,EAAGpE,YAAc+D,EAC/CA,EAA2B/D,YAAc8D,EACzCA,EAAkBkC,YAAc7J,EAC9B4H,EACAjC,EACA,qBAaF7F,EAAQgK,oBAAsB,SAASC,GACrC,IAAIC,EAAyB,mBAAXD,GAAyBA,EAAOlG,YAClD,QAAOmG,IACHA,IAASrC,GAG2B,uBAAnCqC,EAAKH,aAAeG,EAAKC,MAEhC,EAEAnK,EAAQoK,KAAO,SAASH,GAQtB,OAPI9G,OAAOrB,eACTqB,OAAOrB,eAAemI,EAAQnC,IAE9BmC,EAAOtG,UAAYmE,EACnB5H,EAAO+J,EAAQpE,EAAmB,sBAEpCoE,EAAOxH,UAAYU,OAAOW,OAAOqE,GAC1B8B,CACT,EAMAjK,EAAQqK,MAAQ,SAASvJ,GACvB,MAAO,CAAE4H,QAAS5H,EACpB,EAqEAsH,EAAsBE,EAAc7F,WACpC6F,EAAc7F,UAAUkD,GAAuB,WAC7C,OAAOvF,IACT,EACAJ,EAAQsI,cAAgBA,EAKxBtI,EAAQsK,MAAQ,SAAStE,EAASC,EAAS5F,EAAM6F,EAAaqC,QACxC,IAAhBA,IAAwBA,EAAcpH,SAE1C,IAAIoJ,EAAO,IAAIjC,EACbvC,EAAKC,EAASC,EAAS5F,EAAM6F,GAC7BqC,GAGF,OAAOvI,EAAQgK,oBAAoB/D,GAC/BsE,EACAA,EAAKxB,OAAO3H,MAAK,SAASqH,GACxB,OAAOA,EAAOvH,KAAOuH,EAAOzH,MAAQuJ,EAAKxB,MAC3C,GACN,EAqKAX,EAAsBD,GAEtBjI,EAAOiI,EAAItC,EAAmB,aAO9BsC,EAAGzC,GAAkB,WACnB,OAAOtF,IACT,EAEA+H,EAAGnE,SAAW,WACZ,MAAO,oBACT,EAiCAhE,EAAQwK,KAAO,SAASC,GACtB,IAAID,EAAO,GACX,IAAK,IAAI3J,KAAO4J,EACdD,EAAKlI,KAAKzB,GAMZ,OAJA2J,EAAKE,UAIE,SAAS3B,IACd,KAAOyB,EAAK1H,QAAQ,CAClB,IAAIjC,EAAM2J,EAAKG,MACf,GAAI9J,KAAO4J,EAGT,OAFA1B,EAAK/H,MAAQH,EACbkI,EAAK7H,MAAO,EACL6H,CAEX,CAMA,OADAA,EAAK7H,MAAO,EACL6H,CACT,CACF,EAoCA/I,EAAQkI,OAASA,EAMjB3B,EAAQ9D,UAAY,CAClBsB,YAAawC,EAEboD,MAAO,SAASiB,GAcd,GAbAxK,KAAKyK,KAAO,EACZzK,KAAK2I,KAAO,EAGZ3I,KAAKgH,KAAOhH,KAAKiH,MAAQ3F,EACzBtB,KAAKc,MAAO,EACZd,KAAK4G,SAAW,KAEhB5G,KAAKuG,OAAS,OACdvG,KAAKU,IAAMY,EAEXtB,KAAKoJ,WAAWnB,QAAQoB,IAEnBmB,EACH,IAAK,IAAIT,KAAQ/J,KAEQ,MAAnB+J,EAAKW,OAAO,IACZvF,EAAOtB,KAAK7D,KAAM+J,KACjBL,OAAOK,EAAKY,MAAM,MACrB3K,KAAK+J,GAAQzI,EAIrB,EAEAsJ,KAAM,WACJ5K,KAAKc,MAAO,EAEZ,IACI+J,EADY7K,KAAKoJ,WAAW,GACLE,WAC3B,GAAwB,UAApBuB,EAAWvD,KACb,MAAMuD,EAAWnK,IAGnB,OAAOV,KAAK8K,IACd,EAEA5D,kBAAmB,SAAS6D,GAC1B,GAAI/K,KAAKc,KACP,MAAMiK,EAGR,IAAI7E,EAAUlG,KACd,SAASgL,EAAOC,EAAKC,GAYnB,OAXA9D,EAAOE,KAAO,QACdF,EAAO1G,IAAMqK,EACb7E,EAAQyC,KAAOsC,EAEXC,IAGFhF,EAAQK,OAAS,OACjBL,EAAQxF,IAAMY,KAGN4J,CACZ,CAEA,IAAK,IAAIzI,EAAIzC,KAAKoJ,WAAW1G,OAAS,EAAGD,GAAK,IAAKA,EAAG,CACpD,IAAIsG,EAAQ/I,KAAKoJ,WAAW3G,GACxB2E,EAAS2B,EAAMO,WAEnB,GAAqB,SAAjBP,EAAMC,OAIR,OAAOgC,EAAO,OAGhB,GAAIjC,EAAMC,QAAUhJ,KAAKyK,KAAM,CAC7B,IAAIU,EAAWhG,EAAOtB,KAAKkF,EAAO,YAC9BqC,EAAajG,EAAOtB,KAAKkF,EAAO,cAEpC,GAAIoC,GAAYC,EAAY,CAC1B,GAAIpL,KAAKyK,KAAO1B,EAAME,SACpB,OAAO+B,EAAOjC,EAAME,UAAU,GACzB,GAAIjJ,KAAKyK,KAAO1B,EAAMG,WAC3B,OAAO8B,EAAOjC,EAAMG,WAGxB,MAAO,GAAIiC,GACT,GAAInL,KAAKyK,KAAO1B,EAAME,SACpB,OAAO+B,EAAOjC,EAAME,UAAU,OAG3B,KAAImC,EAMT,MAAM,IAAI3E,MAAM,0CALhB,GAAIzG,KAAKyK,KAAO1B,EAAMG,WACpB,OAAO8B,EAAOjC,EAAMG,WAKxB,CACF,CACF,CACF,EAEA/B,OAAQ,SAASG,EAAM5G,GACrB,IAAK,IAAI+B,EAAIzC,KAAKoJ,WAAW1G,OAAS,EAAGD,GAAK,IAAKA,EAAG,CACpD,IAAIsG,EAAQ/I,KAAKoJ,WAAW3G,GAC5B,GAAIsG,EAAMC,QAAUhJ,KAAKyK,MACrBtF,EAAOtB,KAAKkF,EAAO,eACnB/I,KAAKyK,KAAO1B,EAAMG,WAAY,CAChC,IAAImC,EAAetC,EACnB,KACF,CACF,CAEIsC,IACU,UAAT/D,GACS,aAATA,IACD+D,EAAarC,QAAUtI,GACvBA,GAAO2K,EAAanC,aAGtBmC,EAAe,MAGjB,IAAIjE,EAASiE,EAAeA,EAAa/B,WAAa,CAAC,EAIvD,OAHAlC,EAAOE,KAAOA,EACdF,EAAO1G,IAAMA,EAET2K,GACFrL,KAAKuG,OAAS,OACdvG,KAAK2I,KAAO0C,EAAanC,WAClBnC,GAGF/G,KAAKsL,SAASlE,EACvB,EAEAkE,SAAU,SAASlE,EAAQ+B,GACzB,GAAoB,UAAhB/B,EAAOE,KACT,MAAMF,EAAO1G,IAcf,MAXoB,UAAhB0G,EAAOE,MACS,aAAhBF,EAAOE,KACTtH,KAAK2I,KAAOvB,EAAO1G,IACM,WAAhB0G,EAAOE,MAChBtH,KAAK8K,KAAO9K,KAAKU,IAAM0G,EAAO1G,IAC9BV,KAAKuG,OAAS,SACdvG,KAAK2I,KAAO,OACa,WAAhBvB,EAAOE,MAAqB6B,IACrCnJ,KAAK2I,KAAOQ,GAGPpC,CACT,EAEAwE,OAAQ,SAASrC,GACf,IAAK,IAAIzG,EAAIzC,KAAKoJ,WAAW1G,OAAS,EAAGD,GAAK,IAAKA,EAAG,CACpD,IAAIsG,EAAQ/I,KAAKoJ,WAAW3G,GAC5B,GAAIsG,EAAMG,aAAeA,EAGvB,OAFAlJ,KAAKsL,SAASvC,EAAMO,WAAYP,EAAMI,UACtCE,EAAcN,GACPhC,CAEX,CACF,EAEA,MAAS,SAASiC,GAChB,IAAK,IAAIvG,EAAIzC,KAAKoJ,WAAW1G,OAAS,EAAGD,GAAK,IAAKA,EAAG,CACpD,IAAIsG,EAAQ/I,KAAKoJ,WAAW3G,GAC5B,GAAIsG,EAAMC,SAAWA,EAAQ,CAC3B,IAAI5B,EAAS2B,EAAMO,WACnB,GAAoB,UAAhBlC,EAAOE,KAAkB,CAC3B,IAAIkE,EAASpE,EAAO1G,IACpB2I,EAAcN,EAChB,CACA,OAAOyC,CACT,CACF,CAIA,MAAM,IAAI/E,MAAM,wBAClB,EAEAgF,cAAe,SAASjC,EAAUd,EAAYE,GAa5C,OAZA5I,KAAK4G,SAAW,CACdpC,SAAUsD,EAAO0B,GACjBd,WAAYA,EACZE,QAASA,GAGS,SAAhB5I,KAAKuG,SAGPvG,KAAKU,IAAMY,GAGNyF,CACT,GAOKnH,CAET,CA/sBc,CAotBiBC,EAAOD,SAGtC,IACE8L,mBAAqBzG,CACvB,CAAE,MAAO0G,GAUPxJ,SAAS,IAAK,yBAAdA,CAAwC8C,EAC1C,C,GC1uBI2G,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBxK,IAAjByK,EACH,OAAOA,EAAanM,QAGrB,IAAIC,EAAS+L,EAAyBE,GAAY,CAGjDlM,QAAS,CAAC,GAOX,OAHAoM,EAAoBF,GAAUjM,EAAQA,EAAOD,QAASiM,GAG/ChM,EAAOD,OACf,CCrBAiM,EAAoBI,EAAKpM,IACxB,IAAIqM,EAASrM,GAAUA,EAAOsM,WAC7B,IAAOtM,EAAiB,QACxB,IAAM,EAEP,OADAgM,EAAoBO,EAAEF,EAAQ,CAAEjK,EAAGiK,IAC5BA,CAAM,ECLdL,EAAoBO,EAAI,CAACxM,EAASyM,KACjC,IAAI,IAAI5L,KAAO4L,EACXR,EAAoBxI,EAAEgJ,EAAY5L,KAASoL,EAAoBxI,EAAEzD,EAASa,IAC5EsC,OAAOC,eAAepD,EAASa,EAAK,CAAEmC,YAAY,EAAMkC,IAAKuH,EAAW5L,IAE1E,ECNDoL,EAAoBxI,EAAI,CAACF,EAAKmJ,IAAUvJ,OAAOV,UAAU+C,eAAevB,KAAKV,EAAKmJ,GCClFT,EAAoBU,EAAK3M,IACH,oBAAX2E,QAA0BA,OAAOmB,aAC1C3C,OAAOC,eAAepD,EAAS2E,OAAOmB,YAAa,CAAE9E,MAAO,WAE7DmC,OAAOC,eAAepD,EAAS,aAAc,CAAEgB,OAAO,GAAO,E,mqCCE9D,SACI4L,oBAAqB,CAGjBC,gBAAiB,kBACjBC,gBAAiB,kBACjBC,IAAK,MACLC,2BAA4B,6BAC5BC,iBAAkB,mBAClBC,iBAAkB,mBAClBC,OAAQ,SACRC,QAAS,UACTC,qBAAsB,uBACtBC,iBAAkB,mBAClBC,aAAc,gBAElBC,mBAAoB,CAChBC,YAAa,cACbC,aAAc,eACdC,SAAU,WACVC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,YAAa,cACbC,mBAAoB,qBACpBC,kBAAmB,oBACnBC,gBAAiB,kBACjBC,WAAY,aACZC,gBAAiB,kBACjBC,iBAAkB,mBAClBC,eAAgB,iBAChBC,oBAAsB,sBACtBC,sBAAuB,wBACvBC,iBAAkB,mBAClBC,yBAA0B,2BAC1BC,aAAc,eACdC,gBAAiB,kBACjBC,kBAAmB,qBAEvBC,kBAAmB,CACfC,MAAO,QACPC,QAAS,UACTC,KAAM,OACNC,cAAe,gBACfC,aAAc,eACdC,cAAe,gBACfC,WAAY,aACZC,wBAAyB,0BACzBC,wBAAyB,0BACzBrC,QAAS,UACTH,iBAAkB,mBAClBC,iBAAkB,mBAClBwC,aAAc,eACdC,kBAAmB,oBACnBC,oBAAqB,sBACrBC,sBAAuB,wBACvBC,oBAAqB,sBACrBC,gCAAiC,kCACjCC,8BAA+B,iCAEnCC,iBAAkB,CACdC,oBAAqB,sBACrBC,aAAc,eACdC,eAAgB,iBAChBC,YAAa,cACbC,YAAa,cACbC,YAAa,cACbC,eAAgB,iBAChBC,kBAAmB,oBACnBC,sBAAuB,wBACvBC,oBAAqB,sBACrBC,iBAAkB,mBAClBC,qBAAsB,uBACtBC,yBAA0B,2BAC1BC,qBAAsB,uBACtBC,mBAAoB,qBACpBC,6BAA8B,+BAC9BC,qBAAsB,uBACtBC,wBAA0B,0BAC1BC,0BAA2B,4BAC3BC,kBAAoB,oBACpBC,eAAiB,iBACjBC,cAAe,gBACfC,wBAAyB,0BACzBC,qBAAsB,uBACtBC,YAAa,cACbC,OAAQ,SACRC,gBAAiB,kBACjBC,mBAAoB,qBACpB9C,kBAAmB,oBACnB+C,YAAa,cACbC,aAAc,gBAElBC,UAAW,CACPC,wBAAyB,2BAE7BC,kBAAmB,CACfC,aAAc,eACdC,cAAe,gBACfC,qBAAsB,uBACtBC,qBAAsB,uBACtBC,yBAA0B,2BAC1BC,yBAA0B,2BAC1BC,eAAgB,iBAChBC,eAAgB,iBAChBC,gBAAiB,kBACjBC,4BAA6B,8BAC7BC,8BAA+B,gCAC/BC,iBAAkB,oBAEtBC,iBAAkB,CACdC,yBAA0B,2BAC1BC,qBAAsB,uBACtBC,kBAAmB,oBACnBC,oBAAqB,sBACrBC,kBAAmB,oBACnBC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,sBAAuB,wBACvBC,oBAAqB,sBACrBC,eAAgB,iBAChBC,2BAA4B,6BAC5BC,0BAA2B,4BAC3BC,mBAAoB,qBACpBC,oBAAqB,sBACrBC,qBAAsB,uBACtBC,2BAA4B,6BAC5BC,wBAAyB,0BACzBC,4BAA6B,8BAC7BC,uBAAwB,yBACxBC,wBAAyB,0BACzBC,yBAA0B,2BAC1BC,yBAA0B,2BAC1BC,yBAA0B,2BAC1BC,4BAA6B,8BAC7BC,iCAAkC,mCAClCC,uBAAyB,yBACzBC,8BAAgC,gCAChCC,4BAA6B,8BAC7BC,sBAAuB,wBACvBnD,YAAa,cACboD,sBAAuB,wBACvBC,oBAAqB,sBACrBC,gBAAiB,kBACjBC,aAAc,eACdC,0BAA2B,4BAC3BC,oBAAqB,uBAEzBC,aAAc,CACVC,OAAQ,SACRC,QAAS,UACTC,IAAM,iBAEVC,iBAAkB,CACdC,MAAO,QACPC,eAAgB,iBAChBC,YAAa,cACbC,WAAY,cAEhBC,UAAW,CACPC,QAAS,UACTC,SAAU,WACVC,SAAU,WACV5H,gBAAiB,iBACjB6H,SAAS,WACTC,cAAe,eACfC,gBAAiB,iBACjBC,QAAS,WAEbC,aAAc,CACVC,KAAM,OACNC,QAAS,UAEbC,YAAa,CACTC,iBAAkB,kBAClBC,KAAM,QAEVC,aAAc,CACVC,UAAW,YACXC,MAAO,QACPC,YAAa,cACbrB,MAAO,QACPsB,KAAM,QAEVC,kBAAmB,CACff,SAAU,WACV5H,WAAY,aACZ4I,IAAK,OAETC,kBAAmB,CACfC,oBAAqB,sBACrBC,OAAQ,SACRC,eAAgB,kBAEpBC,yBAA0B,CACtBC,cAAe,gBACfC,eAAgB,iBAChBC,6BAA8B,+BAC9BC,gCAAiC,kCACjCC,sBAAuB,wBACvBC,sBAAuB,wBACvBC,mBAAoB,qBACpBC,oBAAoB,uBAExBC,wBAAyB,CACrBnK,KAAM,OACNoK,OAAQ,SACRC,MAAO,QACPC,KAAM,OACNC,eAAgB,iBAChBpH,qBAAsB,uBACtBqH,qBAAsB,uBACtB3J,oBAAqB,sBACrB4J,IAAK,MACLzB,UAAW,YACX0B,yBAA0B,2BAC1BC,yBAA0B,2BAC1BC,4BAA6B,8BAC7BC,4BAA6B,8BAC7BC,YAAa,cACbC,SAAU,WACVC,gBAAiB,kBACjBC,kBAAmB,qBAEvBC,WAAY,CACRC,QAAS,UACTC,UAAW,YACXC,aAAc,eACdC,YAAa,cACbC,MAAO,SAEXC,WAAY,CACRC,WAAY,aACZC,WAAY,cAEhBC,cAAe,CACXC,iBAAkB,QAClBC,iBAAkB,SAEtBC,mBAAoB,CAChBC,UAAW,YACXC,KAAM,OACNtE,QAAS,WAEbuE,2BAA4B,CACxBC,OAAS,SACTC,MAAO,QACPC,sBAAuB,yBAE3BC,UAAW,CACPhL,MAAO,QACPE,KAAM,QAEV+K,WAAY,CACRC,OAAQ,SACRC,QAAS,WAEbC,sBAAuB,CACnB5E,MAAO,QACPoB,MAAO,QACPyD,QAAS,UACTC,UAAW,YACXxD,KAAM,OACN4C,UAAW,aAEfa,WAAY,CACRC,SAAU,WACVC,SAAU,WACVC,SAAU,WACVC,UAAW,YACXC,OAAQ,SACRC,OAAQ,SACRC,SAAU,YAEdC,aAAc,CACVhF,SAAU,kBACVI,QAAS,iBAEb6E,cAAe,CACXC,aAAc,kBACdP,SAAU,kBACVQ,qBAAsB,qBACtBC,wBAAyB,wBACzBC,4BAA6B,6BAO9B,IAAMC,EAAkC,CAC3C,qBACA,gCACA,uCACA,eACA,eACA,gBACA,wBACA,iCAMSC,EAA6C,CACtD,YAMSC,EAAoC,CAC7C,+C,2GCvTEC,EAAgB,KAEhBC,EAAU,SAAAnY,GAAG,MAAoB,iBAARA,EAAoBA,EAAMoY,KAAKC,UAAUrY,EAAI,EAExEsY,EAAY,EACZC,EAAO,GA0BJ,SAASC,EAAIC,EAAYC,EAAUC,IAxB1C,SAAcD,EAAUD,EAAYE,GAChC,IAAIF,EACA,MAAM,IAAInV,MAAM,wBAEpBoV,EAAYA,GAAaE,EAAUlC,UAAU9K,KAC7C+M,EAAYA,GAAaC,EAAUjC,WAAWE,QAE9C,IAAMgC,EAAS,EAAC,IAAI/X,MAAOgY,cAAeX,EAAQO,GAAWP,EAAQQ,GAAY,GAAFI,OAAKZ,EAAQM,GAAW,OAAMO,KAAK,KAG/GV,EAAYO,EAAOtZ,QAAU2Y,IAC5BK,EAAO,GACPD,EAAY,GAEhBA,GAAaO,EAAOtZ,OACpBgZ,EAAKxZ,KAAK8Z,EACd,CASII,CAAKP,EAAUD,EAAYE,EAC/B,CAaO,SAASO,KC5CR,SAAsBC,EAAMC,EAAUC,GAC1C,GAAIC,UAAaH,EAAjB,CAEA,IAAMI,EAA2B,iBAATJ,EAAqBA,EAAOf,KAAKC,UAAUc,GAC7DK,EAAO,IAAIC,KAAK,CAACF,GAAU,CAACpV,KDyC6B,eCxC3DrF,EAAIwa,SAASI,cAAc,KACzBC,EAAUC,IAAIC,gBAAgBL,GACpC1a,EAAEgb,SAAWV,EACbta,EAAEib,KAAOJ,EACTL,SAASU,KAAKC,YAAYnb,GAC1BA,EAAEob,QACFZ,SAASU,KAAKG,YAAYrb,GAC1B8a,IAAIQ,gBAAgBT,EAXS,CAYjC,CDgCIU,CAAa9B,EAAKS,KAAK,IAAK,OAAFD,QAAS,IAAIjY,MAAOwZ,UAAS,QAC3D,C,6+BEhDO,ICJHC,ECWAC,EACAC,EAEAC,EFVSC,EAAY,CAIrBlP,kBAAmB,CACfK,aAAc8M,EAAUnN,kBAAkBK,aAC1CC,cAAe6M,EAAUnN,kBAAkBM,cAC3ClC,QAAS+O,EAAUnN,kBAAkB5B,QACrCH,iBAAkBkP,EAAUnN,kBAAkB/B,iBAC9CC,iBAAkBiP,EAAUnN,kBAAkB9B,iBAC9CwC,aAAcyM,EAAUnN,kBAAkBU,aAC1CG,sBAAuBsM,EAAUnN,kBAAkBa,sBACnDC,oBAAqBqM,EAAUnN,kBAAkBc,oBACjDC,gCAAiCoM,EAAUnN,kBAAkBe,gCAC7DC,8BAA+BmM,EAAUnN,kBAAkBgB,+BAK/DC,iBAAkB,CACdE,aAAcgM,EAAUlM,iBAAiBE,aACzCD,oBAAqBiM,EAAUlM,iBAAiBC,oBAChDE,eAAgB+L,EAAUlM,iBAAiBG,eAC3CuB,OAAQwK,EAAUlM,iBAAiB0B,OACnCrB,YAAa6L,EAAUlM,iBAAiBK,YACxCC,YAAa4L,EAAUlM,iBAAiBM,YACxCK,iBAAkBuL,EAAUlM,iBAAiBW,iBAC7CC,qBAAsBsL,EAAUlM,iBAAiBY,qBACjDC,yBAA0BqL,EAAUlM,iBAAiBa,yBACrDL,kBAAmB0L,EAAUlM,iBAAiBQ,kBAC9CC,sBAAuByL,EAAUlM,iBAAiBS,sBAClDC,oBAAqBwL,EAAUlM,iBAAiBU,oBAChDa,wBAAyB2K,EAAUlM,iBAAiBuB,wBACpDD,cAAe4K,EAAUlM,iBAAiBsB,cAC1CG,YAAayK,EAAUlM,iBAAiByB,YACxCE,gBAAiBuK,EAAUlM,iBAAiB2B,gBAC5CZ,mBAAoBmL,EAAUlM,iBAAiBe,mBAC/CM,eAAgB6K,EAAUlM,iBAAiBqB,eAC3CJ,qBAAsBiL,EAAUlM,iBAAiBiB,qBACjDC,wBAA0BgL,EAAUlM,iBAAiBkB,wBACrDC,0BAA2B+K,EAAUlM,iBAAiBmB,0BACtDC,kBAAoB8K,EAAUlM,iBAAiBoB,kBAC/CQ,mBAAoBsK,EAAUlM,iBAAiB4B,mBAC/CC,YAAaqK,EAAUlM,iBAAiB6B,YACxCC,aAAcoK,EAAUlM,iBAAiB8B,cAK7CG,kBAAmB,CACfE,cAAe+J,EAAUjK,kBAAkBE,cAC3CE,qBAAsB6J,EAAUjK,kBAAkBI,sBAKtDS,iBAAkB,CACdU,oBAAqB0I,EAAUpJ,iBAAiBU,oBAChDK,oBAAqBqI,EAAUpJ,iBAAiBe,oBAChDU,4BAA6B2H,EAAUpJ,iBAAiByB,4BACxDd,eAAgByI,EAAUpJ,iBAAiBW,gBAK/C0B,aAAY+I,EAAA,GAAOhC,EAAU/G,cAI7BI,iBAAgB2I,EAAA,GAAOhC,EAAU3G,kBAIjCK,UAASsI,EAAA,GAAOhC,EAAUtG,WAI1BQ,aAAY8H,EAAA,GAAOhC,EAAU9F,cAI7BG,YAAW2H,EAAA,GAAOhC,EAAU3F,aAI5BG,aAAYwH,EAAA,GAAOhC,EAAUxF,cAI7BK,kBAAiBmH,EAAA,GAAOhC,EAAUnF,mBAIlC8B,WAAUqF,EAAA,GAAOhC,EAAUrD,YAI3BS,cAAa4E,EAAA,GAAOhC,EAAU5C,eAI9BH,WAAU+E,EAAA,GAAOhC,EAAU/C,YAI3BM,mBAAkByE,EAAA,GAAOhC,EAAUzC,oBAInCG,2BAA0BsE,EAAA,GAAOhC,EAAUtC,4BAI3CI,UAASkE,EAAA,GAAOhC,EAAUlC,WAI1BI,sBAAqB8D,EAAA,GAAOhC,EAAU9B,uBAItCG,WAAU2D,EAAA,GAAOhC,EAAU3B,YAI3BS,cAAakD,EAAA,GAAOhC,EAAUlB,gBAMrBmD,EAAW,SAAAC,GAAAC,IAAAF,EAAAC,GAAA,IAAAE,EAAAC,EAAAJ,GAQpB,SAAAA,EAAAK,GAA+C,IAAAC,EAAjCC,EAASF,EAATE,UAAWC,EAASH,EAATG,UAAWC,EAAOJ,EAAPI,QAUT,OAVgBC,IAAA,KAAAV,GACvCM,EAAAH,EAAAta,KAAA,KAAM4a,GAENE,GAAUC,eAAeL,GACzBI,GAAUC,eAAeJ,GACrBC,GACAE,GAAUC,eAAeH,GAE7BH,EAAKC,UAAYA,EACjBD,EAAKE,UAAYA,EACjBF,EAAKG,QAAUA,EAAQH,CAC3B,CAAC,OAAAN,CAAA,CAnBmB,CAmBnBtZ,IAnB4B+B,QAyBnBoY,EAOV,SAAAA,EAAAC,GAA6B,IAAfxX,EAAIwX,EAAJxX,KAAMyX,EAAMD,EAANC,OAAML,IAAA,KAAAG,GACtBF,GAAUK,aAAa1X,EAAMvE,OAAO+E,OAAOiU,EAAU/C,aAClD+F,GACCJ,GAAUC,eAAeG,GAE7B/e,KAAKsH,KAAOA,EACZtH,KAAK+e,OAASA,CAClB,EAMSE,EAMR,SAAAA,EAAAC,GAAqC,IAAvBC,EAASD,EAATC,UAAWC,EAAQF,EAARE,SAAQV,IAAA,KAAAO,GACzBE,GACAR,GAAUU,eAAeF,GAEzBC,GACAT,GAAUU,eAAeD,GAG7Bpf,KAAKmf,UAAYA,EACjBnf,KAAKof,SAAWA,CACpB,EAMQE,EAQT,SAAAA,EAAAC,GAAyC,IAA3BC,EAAOD,EAAPC,QAAS3b,EAAI0b,EAAJ1b,KAAM4b,EAAQF,EAARE,SAAQf,IAAA,KAAAY,GACjCtf,KAAKwf,QAAUA,EACfxf,KAAK6D,KAAOA,EACZ7D,KAAKyf,SAAWA,CACpB,EAMSC,EAMT,SAAAA,EAAAC,GAAkC,IAAAC,EAAAD,EAApBE,YAAAA,OAAW,IAAAD,EAAG,GAAEA,EAAAlB,IAAA,KAAAgB,GACtBG,EAAYnd,OAAS,GACrBmd,EAAY5X,SAAQ,SAAA6X,GAChBnB,GAAUoB,oBAAoBD,EAAYE,GAC9C,IAEJhgB,KAAK6f,YAAcA,CACvB,EAMSI,EAMT,SAAAA,EAAAC,GAAmC,IAAAC,EAAAD,EAArBE,aAAAA,OAAY,IAAAD,EAAG,GAAEA,EAAAzB,IAAA,KAAAuB,GAC3BjgB,KAAKogB,aAAeA,CACxB,EAMSC,EAaT,SAAAA,EAAAC,GASE,IAAAC,EAAAD,EAREE,aAAAA,OAAY,IAAAD,GAAOA,EAAAE,EAAAH,EACnBI,iBAAAA,OAAgB,IAAAD,GAAQA,EAAAE,EAAAL,EACxBM,qBAAAA,OAAoB,IAAAD,GAAQA,EAAAE,EAAAP,EAC5BQ,iBAAAA,OAAgB,IAAAD,GAAQA,EAAAE,EAAAT,EACxBU,sBAAAA,OAAqB,IAAAD,GAAQA,EAAAE,EAAAX,EAC7BY,uBAAAA,OAAsB,IAAAD,GAAQA,EAAAE,EAAAb,EAC9Bc,oBAAAA,OAAmB,IAAAD,GAAQA,EAAAE,EAAAf,EAC3BgB,qBAAAA,OAAoB,IAAAD,GAAQA,EAAA3C,IAAA,KAAA2B,GAE5B1B,GAAU4C,gBAAgBf,GAC1B7B,GAAU4C,gBAAgBb,GAC1B/B,GAAU4C,gBAAgBX,GAC1BjC,GAAU4C,gBAAgBT,GAC1BnC,GAAU4C,gBAAgBP,GAC1BrC,GAAU4C,gBAAgBL,GAC1BvC,GAAU4C,gBAAgBH,GAC1BzC,GAAU4C,gBAAgBD,GAE1BthB,KAAKwgB,aAAeA,EACpBxgB,KAAK0gB,iBAAmBA,EACxB1gB,KAAK4gB,qBAAuBA,EAC5B5gB,KAAK8gB,iBAAmBA,EACxB9gB,KAAKghB,sBAAwBA,EAC7BhhB,KAAKkhB,uBAAyBA,EAC9BlhB,KAAKohB,oBAAsBA,EAC3BphB,KAAKshB,qBAAuBA,CAChC,EAMSE,EAuBT,SAAAA,EAAAC,GAmBG,IAAAC,EAAAD,EAlBCE,QAAAA,OAAO,IAAAD,GAAOA,EAAAE,EAAAH,EACdI,UAAAA,OAAS,IAAAD,GAAOA,EAAAE,EAAAL,EAChBM,SAAAA,OAAQ,IAAAD,GAAOA,EAAAE,EAAAP,EACfQ,QAAAA,OAAO,IAAAD,GAAOA,EAAAE,EAAAT,EACdU,iBAAAA,OAAgB,IAAAD,GAAQA,EAAAE,EAAAX,EACxBY,sBAAAA,OAAqB,IAAAD,GAAQA,EAAAE,EAAAb,EAC7Bc,YAAAA,OAAW,IAAAD,GAAQA,EAAAE,EAAAf,EACnBgB,sBAAAA,OAAqB,IAAAD,GAAQA,EAAAE,EAAAjB,EAC7BkB,qBAAAA,OAAoB,IAAAD,GAAQA,EAAAE,EAAAnB,EAC5BoB,aAAAA,OAAY,IAAAD,GAAQA,EAAAE,EAAArB,EACpBsB,mCAAAA,OAAkC,IAAAD,GAAQA,EAAAE,EAAAvB,EAC1CwB,mCAAAA,OAAkC,IAAAD,GAAQA,EAAAE,EAAAzB,EAC1C0B,sCAAAA,OAAqC,IAAAD,GAAQA,EAAAE,EAAA3B,EAC7C4B,sCAAAA,OAAqC,IAAAD,GAAQA,EAAAE,EAAA7B,EAC7C8B,WAAAA,OAAU,IAAAD,GAAOA,EAAAE,EAAA/B,EACjBgC,kBAAAA,OAAiB,IAAAD,GAAQA,EAAAE,EAAAjC,EACzBkC,eAAAA,OAAc,IAAAD,GAAQA,EAAAE,EAAAnC,EACtBoC,oBAAAA,OAAmB,IAAAD,GAAQA,EAAAlF,IAAA,KAAA8C,GAE3B7C,GAAU4C,gBAAgBI,GAC1BhD,GAAU4C,gBAAgBM,GAC1BlD,GAAU4C,gBAAgBQ,GAC1BpD,GAAU4C,gBAAgBU,GAC1BtD,GAAU4C,gBAAgBY,GAC1BxD,GAAU4C,gBAAgBc,GAC1B1D,GAAU4C,gBAAgBgB,GAC1B5D,GAAU4C,gBAAgBkB,GAC1B9D,GAAU4C,gBAAgBoB,GAC1BhE,GAAU4C,gBAAgBsB,GAC1BlE,GAAU4C,gBAAgBwB,GAC1BpE,GAAU4C,gBAAgB0B,GAC1BtE,GAAU4C,gBAAgB4B,GAC1BxE,GAAU4C,gBAAgB8B,GAC1B1E,GAAU4C,gBAAgBgC,GAC1B5E,GAAU4C,gBAAgBkC,GAC1B9E,GAAU4C,gBAAgBoC,GAC1BhF,GAAU4C,gBAAgBsC,GAE1B7jB,KAAK2hB,QAAUA,EACf3hB,KAAK6hB,UAAYA,EACjB7hB,KAAK+hB,SAAWA,EAChB/hB,KAAKiiB,QAAUA,EACfjiB,KAAKmiB,iBAAmBA,EACxBniB,KAAKqiB,sBAAwBA,EAC7BriB,KAAKuiB,YAAcA,EACnBviB,KAAKyiB,sBAAwBA,EAC7BziB,KAAK2iB,qBAAuBA,EAC5B3iB,KAAK6iB,aAAeA,EACpB7iB,KAAK+iB,mCAAqCA,EAC1C/iB,KAAKijB,mCAAqCA,EAC1CjjB,KAAKmjB,sCAAwCA,EAC7CnjB,KAAKqjB,sCAAwCA,EAC7CrjB,KAAKujB,WAAaA,EAClBvjB,KAAKyjB,kBAAoBA,EACzBzjB,KAAK2jB,eAAiBA,EACtB3jB,KAAK6jB,oBAAsBA,CAC/B,EAMSC,EAST,SAAAA,EAAAC,GACgE,IAAAC,EAAAD,EADlDE,OAAAA,OAAM,IAAAD,EAAG,CAACjI,EAAU/C,WAAWE,YAAW8K,EAAAE,EAAAH,EAAEI,cAAAA,OAAa,IAAAD,EAAG,IAAIrF,EAAM,CAACvX,KAAMyU,EAAU/C,WAAWE,aAAYgL,EAAAE,EAAAL,EAC5GM,gBAAAA,OAAe,IAAAD,EAAG,GAAEA,EAAAE,EAAAP,EAAEQ,mBAAAA,OAAkB,IAAAD,EAAG,GAAEA,EAAA5F,IAAA,KAAAoF,GACzDnF,GAAUoB,oBAAoBkE,EAAQO,OACtC7F,GAAUoB,oBAAoBoE,EAAetF,GAC7CF,GAAUC,eAAeyF,GACzB1F,GAAUC,eAAe2F,GAEzBvkB,KAAKikB,OAASA,EACdjkB,KAAKmkB,cAAgBA,EACrBnkB,KAAKqkB,gBAAkBA,EACvBrkB,KAAKukB,mBAAqBA,CAC9B,EAMSE,EAST,SAAAA,EAAAC,GAAkF,IAApEP,EAAaO,EAAbP,cAAcE,EAAeK,EAAfL,gBAAiBE,EAAkBG,EAAlBH,mBAAoBI,EAAaD,EAAbC,cAAajG,IAAA,KAAA+F,GAC1E9F,GAAUoB,oBAAoBoE,EAAetF,QAEvBvd,IAAlBqjB,GACAhG,GAAUoB,oBAAoB4E,EAAe1F,GAEjDjf,KAAKmkB,cAAgBA,EACrBnkB,KAAKqkB,gBAAkBA,EACvBrkB,KAAKukB,mBAAqBA,EAC1BvkB,KAAK2kB,cAAgBA,CACzB,EAMSC,EAUT,SAAAA,EAAAC,GAAgH,IAAlGC,EAAiBD,EAAjBC,kBAAiBC,EAAAF,EAAEG,UAAAA,OAAS,IAAAD,EAAG,KAAIA,EAAAE,EAAAJ,EAAEK,iBAAAA,OAAgB,IAAAD,EAAG,KAAIA,EAAAE,EAAAN,EAAEO,WAAAA,OAAU,IAAAD,EAAG,KAAIA,EAAAE,EAAAR,EAAES,OAAAA,OAAM,IAAAD,EAAG,KAAIA,EAAA3G,IAAA,KAAAkG,GACxG5kB,KAAK8kB,kBAAoBA,EACzB9kB,KAAKglB,UAAYA,EACjBhlB,KAAKklB,iBAAmBA,EACxBllB,KAAKolB,WAAaA,EAClBplB,KAAKslB,OAASA,CAClB,EAMSC,EAWT,SAAAA,EAAAC,GAAoG,IAAtFC,EAAmBD,EAAnBC,oBAAqBC,EAAQF,EAARE,SAAUC,EAAcH,EAAdG,eAAgBC,EAAWJ,EAAXI,YAAaC,EAAML,EAANK,OAAMC,EAAAN,EAAEO,QAAAA,OAAO,IAAAD,EAAG,KAAIA,EAAApH,IAAA,KAAA6G,GAC5F5G,GAAUoB,oBAAoB2F,EAAUM,IACxChmB,KAAKylB,oBAAsBA,EAC3BzlB,KAAK0lB,SAAWA,EAChB1lB,KAAK2lB,eAAiBA,EACtB3lB,KAAK4lB,YAAcA,EACnB5lB,KAAK6lB,OAASA,EACd7lB,KAAK+lB,QAAUA,CACnB,EAMSE,GAOT,SAAAA,EAAAC,GAAkD,IAAAC,EAAAD,EAApCE,SAAAA,OAAQ,IAAAD,EAAG,GAAEA,EAAAE,EAAAH,EAAEI,aAAAA,OAAY,IAAAD,EAAG,GAAEA,EAAA3H,IAAA,KAAAuH,GACtCG,EAAS1jB,OAAS,GAClB0jB,EAASne,SAAQ,SAAA8d,GACbpH,GAAUoB,oBAAoBgG,EAASQ,GAC3C,IAEAD,EAAa5jB,OAAS,GACtB4jB,EAAare,SAAQ,SAAAue,GACjB7H,GAAUK,aAAawH,EAAYzjB,OAAO+E,OAAOiU,EAAUxF,cAC/D,IAEJvW,KAAKomB,SAAWA,EAChBpmB,KAAKsmB,aAAeA,CACxB,EAOSG,GAAmB,SAAAC,GAAAxI,IAAAuI,EAAAC,GAAA,IAAAC,EAAAvI,EAAAqI,GAO5B,SAAAA,EAAAG,GAAkD,IAAAC,EAAAD,EAApCR,SAAAA,OAAQ,IAAAS,EAAG,GAAEA,EAAAC,EAAAF,EAAEN,aAAAA,OAAY,IAAAQ,EAAG,GAAEA,EAAA,OAAApI,IAAA,KAAA+H,GAAAE,EAAA9iB,KAAA,KACpC,CAAEuiB,SAAAA,EAAUE,aAAAA,GACtB,CAAC,OAAAG,CAAA,CAT2B,CAASR,IAiB5Bc,GAMT,SAAAA,EAAAC,GAAsB,IAARnjB,EAAImjB,EAAJnjB,KAAI6a,IAAA,KAAAqI,QACDzlB,IAATuC,GACA8a,GAAUoB,oBAAoBlc,EAAMmc,IAExChgB,KAAK6D,KAAOA,CAChB,EAMSojB,GAMT,SAAAA,EAAAC,GAAuB,IAATC,EAAKD,EAALC,MAAKzI,IAAA,KAAAuI,GACXE,aAAiB3C,OACjB2C,EAAMlf,SAAQ,SAAApE,GAAI,OAAI8a,GAAUoB,oBAAoBlc,EAAMmc,GAAU,IACpEhgB,KAAKmnB,MAAQA,IAEbxI,GAAUoB,oBAAoBoH,EAAOnH,IACrChgB,KAAKmnB,MAAQ,CAACA,GAEtB,EAMSC,GAST,SAAAA,EAAAC,GAA2E,IAA7DC,EAAkBD,EAAlBC,mBAAoBC,EAAgBF,EAAhBE,iBAAkBJ,EAAKE,EAALF,MAAQK,EAAYH,EAAZG,aAAY9I,IAAA,KAAA0I,GAChED,IACApkB,OAAO+E,OAAOqf,GAAOlf,SAAQ,SAAApE,GACzB8a,GAAUoB,oBAAoBlc,EAAMmc,GACxC,IACAhgB,KAAKmnB,MAAQA,GAEjBnnB,KAAKsnB,mBAAqBA,EAC1BtnB,KAAKunB,iBAAmBA,EACxBvnB,KAAKwnB,aAAeA,CACxB,EAMUC,GASV,SAAAA,EAAAC,GAAgD,IAAlCC,EAAOD,EAAPC,QAASC,EAAGF,EAAHE,IAAKC,EAAQH,EAARG,SAAUhC,EAAM6B,EAAN7B,OAAMnH,IAAA,KAAA+I,GACpCE,IAEAhJ,GAAUC,eAAegJ,GACzBjJ,GAAUC,eAAeiH,GACrBgC,GACAlJ,GAAUU,eAAewI,IAGjC7nB,KAAK2nB,QAAUA,EACf3nB,KAAK4nB,IAAMA,EACX5nB,KAAK6nB,SAAWA,EAChB7nB,KAAK6lB,OAASA,CAClB,EAMSiC,GAST,SAAAA,EAAAC,GAA6G,IAAAC,EAAAD,EAA/FE,UAAAA,OAAS,IAAAD,GAAQA,EAAAE,EAAAH,EAAEI,iBAAAA,OAAgB,IAAAD,EAAG,IAAGA,EAAAE,EAAAL,EAAEM,cAAAA,OAAa,IAAAD,GAAQA,EAAAE,EAAAP,EAAEQ,kBAAAA,OAAiB,IAAAD,GAAQA,EAAA5J,IAAA,KAAAoJ,GACrG9nB,KAAKioB,UAAYA,EACjBjoB,KAAKmoB,iBAAmBA,EACxBnoB,KAAKqoB,eAAgBroB,KAAKioB,WAAoBI,EAC9CroB,KAAKuoB,kBAAoBA,CAC7B,EAMSC,GAMT,SAAAA,EAAAC,GAA2D,IAAAC,EAAAD,EAA7CE,WAAAA,OAAU,IAAAD,GAAQA,EAAAE,EAAAH,EAAEI,cAAAA,OAAa,IAAAD,GAAQA,EAAAlK,IAAA,KAAA8J,GACnDxoB,KAAK2oB,WAAaA,EAClB3oB,KAAK6oB,cAAgBA,CACzB,EAMSC,GAMT,SAAAA,EAAAC,GAAyB,IAAXpB,EAAOoB,EAAPpB,QAAOjJ,IAAA,KAAAoK,GACjB9oB,KAAK2nB,QAAUA,CACnB,EAMSqB,GAAoB,SAAAC,GAAA/K,IAAA8K,EAAAC,GAAA,IAAAC,EAAA9K,EAAA4K,GAK7B,SAAAA,EAAAG,GAAgD,IAAAC,EAAlCzB,EAAOwB,EAAPxB,QAAO0B,EAAAF,EAAEG,cAAAA,OAAa,IAAAD,GAAQA,EAEL,OAFK3K,IAAA,KAAAsK,IACxCI,EAAAF,EAAArlB,KAAA,KAAM,CAAE8jB,QAAAA,KACH2B,cAAgBA,EAAcF,CACvC,CAIC,OAJAG,IAAAP,EAAA,EAAAvoB,IAAA,mBAAAG,MAAA,SAEgB0oB,GACbtpB,KAAKspB,cAAgBA,CACzB,KAACN,CAAA,CAZ4B,CAASF,IAkB5BU,GAOV,SAAAA,EAAAC,GAAiD,IAAnC9B,EAAO8B,EAAP9B,QAAO+B,EAAAD,EAAEtB,iBAAAA,OAAgB,IAAAuB,EAAG,IAAGA,EAAAhL,IAAA,KAAA8K,GACzCxpB,KAAK2nB,QAAUA,EACf3nB,KAAKmoB,iBAAmBA,CAC5B,EAMSnC,GAsCT,SAAAA,EAAA2D,GAKwN,IAAAC,EAAAD,EAL1ME,mBAAAA,OAAkB,IAAAD,EAAG,KAAIA,EAAEE,EAAQH,EAARG,SAAQC,EAAAJ,EAAEnK,QAAAA,OAAO,IAAAuK,GAAQA,EAAAC,EAAAL,EAAE7E,kBAAAA,OAAiB,IAAAkF,GAAQA,EAAEC,EAAaN,EAAbM,cAAaC,EAAAP,EAAEQ,QAAAA,OAAO,IAAAD,EAAG,KAAIA,EAAAE,EAAAT,EAAEU,UAAAA,OAAS,IAAAD,EAAG,KAAIA,EAAAE,EAAAX,EAAEY,eAAAA,OAAc,IAAAD,EAAG,KAAIA,EAAAE,EAAAb,EAAEc,gBAAAA,OAAe,IAAAD,GAAOA,EAAAE,EAAAf,EACzLgB,cAAAA,OAAa,IAAAD,GAAOA,EAAAE,EAAAjB,EAAEkB,eAAAA,OAAc,IAAAD,GAAOA,EAAAE,EAAAnB,EAAEoB,YAAAA,OAAW,IAAAD,GAAOA,EAAAE,EAAArB,EAAEsB,YAAAA,OAAW,IAAAD,GAAOA,EAAAE,EAAAvB,EAAEwB,kBAAAA,OAAiB,IAAAD,GAAOA,EAAAE,EAAAzB,EAAE0B,YAAAA,OAAW,IAAAD,GAAOA,EAAAE,EAAA3B,EACjI4B,cAAAA,OAAa,IAAAD,GAAOA,EAAAE,EAAA7B,EAAE8B,iBAAAA,OAAgB,IAAAD,GAAOA,EAAAE,EAAA/B,EAAEgC,iBAAAA,OAAgB,IAAAD,GAAOA,EAAAE,EAAAjC,EAAEkC,aAAAA,OAAY,IAAAD,GAAOA,EAAAE,EAAAnC,EAAEoC,YAAAA,OAAW,IAAAD,GAAQA,EAAEE,EAAkBrC,EAAlBqC,mBAAkBC,EAAAtC,EACpIuC,eAAAA,OAAc,IAAAD,GAAOA,EAAAE,EAAAxC,EAAEyC,iBAAAA,OAAgB,IAAAD,GAAOA,EAAAE,EAAA1C,EAAE2C,oBAAAA,OAAmB,IAAAD,GAAOA,EAAAE,EAAA5C,EAAE6C,2BAAAA,OAA0B,IAAAD,GAAOA,EAAAE,EAAA9C,EAAE+C,gBAAAA,OAAe,IAAAD,GAAOA,EAAAE,GAAAhD,EAErIiD,eAAAA,QAAc,IAAAD,IAAOA,GAAAE,GAAAlD,EAAEmD,yBAAAA,QAAwB,IAAAD,GAAG/O,EAAUrE,2BAA2BC,OAAMmT,GAAAE,GAAApD,EAAEqD,iBAAAA,QAAgB,IAAAD,GAAG,KAAIA,GAAAE,GAAAtD,EAAEuD,aAAAA,QAAY,IAAAD,IAAQA,GAAAE,GAAAxD,EAAEyD,UAAAA,QAAS,IAAAD,IAAQA,GAAAE,GAAA1D,EAAE2D,gBAAAA,QAAe,IAAAD,IAAQA,GAAAE,GAAA5D,EAAE6D,gBAAAA,QAAe,IAAAD,GAAG,KAAIA,GAAA7O,IAAA,KAAAsH,GAE5M6D,GACAlL,GAAU8O,aAAa5D,GAEvBU,GACA5L,GAAU8O,aAAalD,GAEvBJ,GACAxL,GAAUC,eAAeuL,GAEzBE,GACA1L,GAAUC,eAAeyL,GAE7B1L,GAAU4C,gBAAgBuD,GAC1BnG,GAAU4C,gBAAgB/B,GAC1Bb,GAAU4C,gBAAgBkJ,GAC1B9L,GAAU4C,gBAAgBoJ,GAC1BhM,GAAU4C,gBAAgBsJ,GAC1BlM,GAAU4C,gBAAgBwJ,GAC1BpM,GAAU4C,gBAAgB0J,GAC1BtM,GAAU4C,gBAAgB4J,GAC1BxM,GAAU4C,gBAAgB8J,GAC1B1M,GAAU4C,gBAAgBgK,GAC1B5M,GAAU4C,gBAAgBkK,GAC1B9M,GAAU4C,gBAAgBoK,GAC1BhN,GAAU4C,gBAAgBwK,GAC1BpN,GAAU4C,gBAAgB2K,GAC1BvN,GAAU4C,gBAAgB6K,GAC1BzN,GAAU4C,gBAAgB+K,GAC1B3N,GAAU4C,gBAAgBiL,GAC1B7N,GAAU4C,gBAAgBmL,GAC1B/N,GAAU4C,gBAAgBqL,IAC1BjO,GAAU4C,gBAAgB6L,IAC1BzO,GAAU4C,gBAAgB+L,SACChsB,IAAvB0qB,GACArN,GAAU4C,gBAAgByK,GAE9BrN,GAAUK,aAAa8N,GAA0B/pB,OAAO+E,OAAOiU,EAAUtC,6BACrEuT,IACArO,GAAUC,eAAeoO,IAE7BrO,GAAU4C,gBAAgB2L,IACtBM,IACA7O,GAAUC,eAAe4O,IAE7BxtB,KAAK6pB,mBAAqBA,EAC1B7pB,KAAK8kB,kBAAoBA,EACzB9kB,KAAKwf,QAAUA,EACfxf,KAAK8pB,SAAWA,EAChB9pB,KAAKiqB,cAAgBA,EACrBjqB,KAAKqqB,UAAYA,EACjBrqB,KAAKmqB,QAAUA,EACfnqB,KAAKuqB,eAAiBA,EACtBvqB,KAAKyqB,gBAAkBA,EACvBzqB,KAAK2qB,cAAgBA,EACrB3qB,KAAK6qB,eAAiBA,EACtB7qB,KAAK+qB,YAAcA,EACnB/qB,KAAKirB,YAAcA,EACnBjrB,KAAKmrB,kBAAoBA,EACzBnrB,KAAKqrB,YAAcA,EACnBrrB,KAAKurB,cAAgBA,EACrBvrB,KAAKyrB,iBAAmBA,EACxBzrB,KAAK2rB,iBAAmBA,EACxB3rB,KAAK6rB,aAAeA,EACpB7rB,KAAK+rB,YAAcA,EACnB/rB,KAAKgsB,mBAAqBA,EAC1BhsB,KAAK8sB,yBAA2BA,GAChC9sB,KAAKksB,eAAiBA,EACtBlsB,KAAKosB,iBAAmBA,EACxBpsB,KAAKssB,oBAAsBA,EAC3BtsB,KAAKwsB,2BAA6BA,EAClCxsB,KAAK0sB,gBAAkBA,EACvB1sB,KAAK4sB,eAAiBA,GACtB5sB,KAAKgtB,iBAAmBA,GACxBhtB,KAAKktB,aAAeA,GACpBltB,KAAKotB,UAAYA,GACjBptB,KAAKstB,gBAAkBA,GACvBttB,KAAKwtB,gBAAkBA,EAC3B,EAQSjH,GAkBT,SAAAA,EAAAmH,GAAgJ,IAAnI9H,EAAW8H,EAAX9H,YAAa+H,EAAED,EAAFC,GAAIrmB,EAAIomB,EAAJpmB,KAAMyC,EAAI2jB,EAAJ3jB,KAAM6jB,EAAQF,EAARE,SAAUC,EAAMH,EAANG,OAAQC,EAASJ,EAATI,UAAWC,EAAWL,EAAXK,YAAaC,EAAKN,EAALM,MAAOC,EAAYP,EAAZO,aAAcC,EAAQR,EAARQ,SAAUC,EAAWT,EAAXS,YAAaC,EAAaV,EAAbU,cAAa1P,IAAA,KAAA6H,GACrIX,GACAjH,GAAUC,eAAegH,GAEzBte,GACAqX,GAAUK,aAAa1X,EAAMvE,OAAO+E,OAAOiU,EAAUxF,eAErDoX,GACAhP,GAAUC,eAAe+O,GAEzB5jB,GACA4U,GAAUC,eAAe7U,GAEzB6jB,GACAjP,GAAUK,aAAa4O,EAAU7qB,OAAO+E,OAAOgW,EAAUlH,oBAEzDiX,GACAlP,GAAUC,eAAeiP,GAEzBC,GACAnP,GAAUC,eAAekP,GAEzBG,GACAtP,GAAUK,aAAaiP,EAAclrB,OAAO+E,OAAOiU,EAAUzC,qBAE7D4U,GACAvP,GAAUC,eAAesP,GAEzBC,GACAxP,GAAUC,eAAeuP,GAEzBC,GACAzP,GAAUC,eAAewP,GAG7BpuB,KAAK4lB,YAAcA,EACnB5lB,KAAK2tB,GAAKA,EACV3tB,KAAKsH,KAAOA,EACZtH,KAAK+J,KAAOA,EACZ/J,KAAK4tB,SAAWA,EAChB5tB,KAAK6tB,OAASA,EACd7tB,KAAK8tB,UAAYA,EACjB9tB,KAAK+tB,YAAcA,EACnB/tB,KAAKguB,MAAQA,EACTjS,EAAUxF,aAAalB,QAAUrV,KAAKsH,KACtCtH,KAAKiuB,aAAeA,EAEpBjuB,KAAKiuB,aAAe,KAExBjuB,KAAKouB,cAAgBA,EACrBpuB,KAAKkuB,SAAWA,EAChBluB,KAAKmuB,YAAcA,CACvB,EAOSE,GAaT,SAAAA,EAAAC,GAAwL,IAA1KC,EAAWD,EAAXC,YAAaC,EAAeF,EAAfE,gBAAeC,EAAAH,EAAEI,WAAAA,OAAU,IAAAD,EAAG3Q,EAAU1H,YAAYE,KAAImY,EAAEE,EAAQL,EAARK,SAAU7E,EAAQwE,EAARxE,SAAQ8E,EAAAN,EAAEO,sBAAAA,OAAqB,IAAAD,GAAQA,EAAAE,EAAAR,EAAES,cAAAA,OAAa,IAAAD,GAAQA,EAAAE,EAAAV,EAAEzF,cAAAA,OAAa,IAAAmG,GAAQA,EAAAtQ,IAAA,KAAA2P,GAC5KE,GACA5P,GAAUC,eAAe2P,GAEzBC,GACA7P,GAAUK,aAAawP,EAAiBzrB,OAAO+E,OAAOiU,EAAU3G,mBAEhEuZ,GACAhQ,GAAUC,eAAe+P,QAEZrtB,IAAbwoB,GACAnL,GAAU4C,gBAAgBuI,GAG9BnL,GAAU4C,gBAAgBsN,GAC1BlQ,GAAUK,aAAa0P,EAAY3rB,OAAO+E,OAAOiU,EAAU3F,cAC3DuI,GAAU4C,gBAAgBwN,GAC1BpQ,GAAU4C,gBAAgBsH,GAE1B7oB,KAAKuuB,YAAcA,EACnBvuB,KAAKwuB,gBAAkBA,EACvBxuB,KAAK2uB,SAAWA,EAChB3uB,KAAK8pB,SAAWA,EAChB9pB,KAAK0uB,WAAaA,EAClB1uB,KAAK6uB,sBAAwBA,EAC7B7uB,KAAK+uB,cAAgBA,EACrB/uB,KAAK6oB,cAAgBA,CACzB,EAOS7I,GAiBT,SAAAA,EAAAiP,GAAsJ,IAAzIpJ,EAAMoJ,EAANpJ,OAAQqJ,EAAQD,EAARC,SAAUC,EAAWF,EAAXE,YAAapJ,EAAOkJ,EAAPlJ,QAAS1f,EAAK4oB,EAAL5oB,MAAOsf,EAAcsJ,EAAdtJ,eAAgBC,EAAWqJ,EAAXrJ,YAAaF,EAAQuJ,EAARvJ,SAAU0J,EAAMH,EAANG,OAAQC,EAAgBJ,EAAhBI,iBAAkBC,EAAWL,EAAXK,YAAaC,EAAQN,EAARM,SAAQ7Q,IAAA,KAAAsB,GAE1I6F,IACAlH,GAAUC,eAAeiH,GACzB7lB,KAAK6lB,OAASA,GAEdqJ,IACAvQ,GAAUK,aAAakQ,EAAUnsB,OAAO+E,OAAOiU,EAAUtG,YACzDzV,KAAKkvB,SAAWA,GAEhBC,IACAxQ,GAAUK,aAAamQ,EAAapsB,OAAO+E,OAAOiU,EAAU9F,eAC5DjW,KAAKmvB,YAAcA,GAEnBvJ,IACAjH,GAAUC,eAAegH,GACzB5lB,KAAK4lB,YAAcA,GAEnBF,IACA/G,GAAUoB,oBAAoB2F,EAAUM,IACxChmB,KAAK0lB,SAAWA,GAEhBK,IACApH,GAAUoB,oBAAoBgG,EAASQ,IACvCvmB,KAAK+lB,QAAUA,GAEfqJ,IACApvB,KAAKovB,OAASA,GAEdC,IACArvB,KAAKqvB,iBAAmBA,GAExBC,IACAtvB,KAAKsvB,YAAcA,GAEnBC,IACAvvB,KAAKuvB,SAAWA,GAEpBvvB,KAAKqG,MAAQA,EACbrG,KAAK2lB,eAAiBA,CAC1B,EAMS6J,GAAkB,oBAAAA,IAAA9Q,IAAA,KAAA8Q,EAAA,CA8N1B,OA9N0BjG,IAAAiG,EAAA,EAAA/uB,IAAA,iBAC3BG,MAAA,WAMI,MAAM,IAAI6F,MAAM,kBACpB,GAEA,CAAAhG,IAAA,aAAAG,MAAA,SAMWiD,GACP,MAAM,IAAI4C,MAAM,kBACpB,GAEA,CAAAhG,IAAA,cAAAG,MAAA,SAMYiD,GACR,MAAM,IAAI4C,MAAM,kBACpB,GAEA,CAAAhG,IAAA,UAAAG,MAAA,SAOQiD,EAAMyrB,GACV,MAAM,IAAI7oB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,OAAAG,MAAA,WAMI,MAAM,IAAI6F,MAAM,kBACpB,GAEA,CAAAhG,IAAA,SAAAG,MAAA,WAMI,MAAM,IAAI6F,MAAM,kBACpB,GAEA,CAAAhG,IAAA,OAAAG,MAAA,SAMKiD,GACD,MAAM,IAAI4C,MAAM,kBACpB,GAEA,CAAAhG,IAAA,SAAAG,MAAA,SAMOiD,GACH,MAAM,IAAI4C,MAAM,kBACpB,GAEA,CAAAhG,IAAA,OAAAG,MAAA,SAOKmlB,EAAS0J,GACV,MAAM,IAAIhpB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,aAAAG,MAAA,SAIW8uB,GACP,MAAM,IAAIjpB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,mBAAAG,MAAA,SAKiB+uB,GACb,MAAM,IAAIlpB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,OAAAG,MAAA,SAMKgvB,EAAOC,GACR,MAAM,IAAIppB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,aAAAG,MAAA,SAKWumB,GACP,MAAM,IAAI1gB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,iBAAAG,MAAA,SAOemlB,EAAS+J,EAAYC,GAChC,MAAM,IAAItpB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,iBAAAG,MAAA,WAKI,MAAM,IAAI6F,MAAM,kBACpB,GAEA,CAAAhG,IAAA,kBAAAG,MAAA,WAKI,MAAM,IAAI6F,MAAM,kBACpB,GAEA,CAAAhG,IAAA,iBAAAG,MAAA,WAKI,MAAM,IAAI6F,MAAM,kBACpB,GAEA,CAAAhG,IAAA,iBAAAG,MAAA,SAKeovB,GACX,MAAM,IAAIvpB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,uBAAAG,MAAA,WAKI,MAAM,IAAI6F,MAAM,kBACpB,GAEA,CAAAhG,IAAA,aAAAG,MAAA,SAIWiD,GACP,MAAM,IAAI4C,MAAM,kBACpB,GAEA,CAAAhG,IAAA,wBAAAG,MAAA,SAOsBqvB,EAAcC,EAAerK,GAC/C,MAAM,IAAIpf,MAAM,kBACpB,GAEA,CAAAhG,IAAA,gBAAAG,MAAA,SAKcuvB,GACV,MAAM,IAAI1pB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,uBAAAG,MAAA,SAKqBuvB,GACjB,MAAM,IAAI1pB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,oBAAAG,MAAA,SAKkBuvB,GACd,MAAM,IAAI1pB,MAAM,kBACpB,KAAC+oB,CAAA,CA9N0B,GAoOlBY,GAAe,oBAAAA,IAAA1R,IAAA,KAAA0R,EAAA,CA0GvB,OA1GuB7G,IAAA6G,EAAA,EAAA3vB,IAAA,OACxBG,MAAA,SAMKovB,GACD,MAAM,IAAIvpB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,wBAAAG,MAAA,WAMI,MAAM,IAAI6F,MAAM,kBACpB,GAEA,CAAAhG,IAAA,mBAAAG,MAAA,SAKiByvB,GACb,MAAM,IAAI5pB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,iBAAAG,MAAA,SAQe0uB,EAAagB,EAAYC,GACpC,MAAM,IAAI9pB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,iBAAAG,MAAA,WAMIZ,KAAKwwB,mBAAmBzU,EAAUlC,UAAU9K,KAAM,wCACtD,GAEA,CAAAtO,IAAA,SAAAG,MAAA,WAKI,MAAM,IAAI6F,MAAM,kBACpB,GAEA,CAAAhG,IAAA,gBAAAG,MAAA,SAIc6d,GACV,MAAM,IAAIhY,MAAM,kBACpB,GAEA,CAAAhG,IAAA,eAAAG,MAAA,SAIa8a,GACTW,GACJ,GAEA,CAAA5b,IAAA,qBAAAG,MAAA,SAOmBib,EAAU4C,EAASgS,GAAU,GAEhD,CAAAhwB,IAAA,cAAAG,MAAA,SAMY+uB,EAAQe,GAChB,MAAM,IAAIjqB,MAAM,kBACpB,GAEA,CAAAhG,IAAA,kBAAAG,MAAA,WAII,MAAM,IAAI6F,MAAM,kBACpB,GAEA,CAAAhG,IAAA,wBAAAG,MAAA,WAKI,MAAM,IAAI6F,MAAM,kBACpB,KAAC2pB,CAAA,CA1GuB,GA6GfzR,GAAS,oBAAAA,IAAAD,IAAA,KAAAC,EAAA,CA2DjB,OA3DiB4K,IAAA5K,EAAA,OAAAle,IAAA,iBAAAG,MAAA,SACIA,GAClB,GAAqB,iBAAVA,EACP,MAAM,IAAI6F,MAAM,gDAADyV,OAAA/X,IAAwDvD,KAE3E,OAAOZ,IACX,GAAC,CAAAS,IAAA,iBAAAG,MAAA,SAEqBA,GAClB,GAAqB,iBAAVA,EACP,MAAM,IAAI6F,MAAM,gDAADyV,OAAA/X,IAAwDvD,KAE3E,OAAOZ,IACX,GAAC,CAAAS,IAAA,kBAAAG,MAAA,SAEsBA,GACnB,GAAqB,kBAAVA,EACP,MAAM,IAAI6F,MAAM,iDAADyV,OAAA/X,IAAyDvD,KAE5E,OAAOZ,IACX,GAAC,CAAAS,IAAA,eAAAG,MAAA,SAEmBA,EAAO+vB,GAEvB,IADc,IAAIC,OAAOD,EAAWxU,KAAM,KAAO,KACtC0U,KAAKjwB,GACZ,MAAM,IAAI6F,MAAM,4CAADyV,OAA6CX,KAAKC,UAAUmV,GAAW,aAAAzU,OAAYtb,IAEtG,OAAOZ,IACX,GAAC,CAAAS,IAAA,eAAAG,MAAA,SAEmBA,GAChB,KAAMA,aAAiBqD,MACnB,MAAM,IAAIwC,MAAM,qDAADyV,OAAA/X,IAA6DvD,KAEhF,OAAOZ,IACX,GAAC,CAAAS,IAAA,sBAAAG,MAAA,SAE0ByJ,EAAQymB,GAC/B,KAAMzmB,aAAkBymB,GACpB,MAAM,IAAIrqB,MAAM,gDAADyV,OAAiD4U,EAAS,aAAA5U,OAAA/X,IAAmBkG,KAEhG,OAAOrK,IACX,GAAC,CAAAS,IAAA,uBAAAG,MAAA,SAE2ByJ,GACJ,IAApB,IAAI0mB,GAAU,EAAMC,EAAA7vB,UAAAuB,OADeuuB,EAAU,IAAAzM,MAAAwM,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAVD,EAAUC,EAAA,GAAA/vB,UAAA+vB,GAE7C,IAAK,IAAIzuB,EAAI,EAAGA,EAAIwuB,EAAWvuB,OAAQD,IACnC,IACIzC,KAAK+f,oBAAoB1V,EAAQ4mB,EAAWxuB,IAC5CsuB,GAAU,EACV,KACJ,CAAE,MAAM7sB,GACJ,CAGR,IAAK6sB,EACD,MAAM,IAAItqB,MAAM,gEAADyV,OAAiE+U,EAAU,aAAA/U,OAAA/X,IAAmBkG,KAEjH,OAAOrK,IACX,KAAC2e,CAAA,CA3DiB,GAiETwS,GAQT,SAAAA,EAAAC,GAA+C,IAAjCV,EAAUU,EAAVV,WAAYW,EAAMD,EAANC,OAAQC,EAASF,EAATE,UAAS5S,IAAA,KAAAyS,GACvCxS,GAAUK,aAAasS,EAAWvuB,OAAO+E,OAAOiU,EAAU3B,aAC1Dpa,KAAKsxB,UAAYA,EACjBtxB,KAAK0wB,WAAaA,EAClB1wB,KAAKqxB,OAASA,CAClB,EAQSE,GAQT,SAAAA,EAAAC,GAAmD,IAAtCC,EAAQD,EAARC,SAAUC,EAAaF,EAAbE,cAAeC,EAAUH,EAAVG,WAAUjT,IAAA,KAAA6S,GAC5C5S,GAAUC,eAAe6S,GACrBC,GACA/S,GAAUC,eAAe8S,GAEzBC,GACAhT,GAAUC,eAAe+S,GAE7B3xB,KAAKyxB,SAAWA,EAChBzxB,KAAK0xB,cAAgBA,EACrB1xB,KAAK2xB,WAAaA,CACtB,EAOSC,GAQT,SAAAA,EAAAC,GAAgD,IAAnCJ,EAAQI,EAARJ,SAAUK,EAAUD,EAAVC,WAAYH,EAAUE,EAAVF,WAAUjT,IAAA,KAAAkT,GACrCH,GACA9S,GAAUC,eAAe6S,GAEzBK,GACAnT,GAAUC,eAAekT,GAEzBH,GACAhT,GAAUC,eAAe+S,GAE7B3xB,KAAKyxB,SAAWA,EAChBzxB,KAAK8xB,WAAaA,EAClB9xB,KAAK2xB,WAAaA,CACtB,EAQUI,GAOV,SAAAA,EAAAC,GAAsD,IAAzCC,EAAkBD,EAAlBC,mBAAoBC,EAAkBF,EAAlBE,mBAAkBxT,IAAA,KAAAqT,GAC/CpT,GAAUoB,oBAAoBkS,EAAoBL,IAClDjT,GAAUC,eAAeqT,EAAmBN,YACxCO,GACAvT,GAAUoB,oBAAoBmS,EAAoBN,IAEtD5xB,KAAKiyB,mBAAqBA,EAC1BjyB,KAAKkyB,mBAAqBA,CAC9B,EAOSC,GAaT,SAAAA,EAAAC,GAAmF,IAAtEvM,EAAMuM,EAANvM,OAAQ0I,EAAW6D,EAAX7D,YAAaW,EAAQkD,EAARlD,SAAUmD,EAAID,EAAJC,KAAMC,EAAEF,EAAFE,GAAIC,EAAcH,EAAdG,eAAgBC,EAAUJ,EAAVI,WAAU9T,IAAA,KAAAyT,GAC5ExT,GAAUC,eAAeiH,GACzB7lB,KAAK6lB,OAASA,EACd7lB,KAAKuuB,YAAcA,EACnBvuB,KAAKkvB,SAAWA,EAChBlvB,KAAKqyB,KAAOA,EACZryB,KAAKsyB,GAAKA,EACVtyB,KAAKuyB,eAAiBA,EACtBvyB,KAAKwyB,WAAaA,CACtB,EAOSC,GAQT,SAAAA,EAAAC,GAAsD,IAAxC7M,EAAM6M,EAAN7M,OAAQ8M,EAAKD,EAALC,MAAOC,EAAqBF,EAArBE,sBAAqBlU,IAAA,KAAA+T,GAC1C5M,IACAlH,GAAUC,eAAeiH,GACzB7lB,KAAK6lB,OAASA,GAGd8M,IACAhU,GAAUoB,oBAAoB4S,EAAOnO,OACrCmO,EAAM1qB,SAAQ,SAAA4qB,GAAiB,OAAIlU,GAAUoB,oBAAoB8S,EAAmBC,GAAkB,IACtG9yB,KAAK2yB,MAAQA,GAGbC,IACAjU,GAAU4C,gBAAgBqR,GAC1B5yB,KAAK4yB,sBAAwBA,EAErC,EAOSE,GAOT,SAAAA,EAAAC,GAAqD,IAAxCC,EAAiBD,EAAjBC,kBAAmBC,EAAkBF,EAAlBE,mBAAkBvU,IAAA,KAAAoU,GAC1CE,GACArU,GAAUoB,oBAAoBiT,EAAmBE,IAEjDD,GACAtU,GAAUoB,oBAAoBkT,EAAoBC,IAGtDlzB,KAAKgzB,kBAAoBA,EACzBhzB,KAAKizB,mBAAqBA,CAC9B,EAOSC,GAST,SAAAA,EAAAC,GAAkF,IAArEC,EAAYD,EAAZC,aAAcC,EAAWF,EAAXE,YAAaC,EAAkBH,EAAlBG,mBAAoBC,EAAmBJ,EAAnBI,oBAAmB7U,IAAA,KAAAwU,GAC3EE,EAAgC,MAAhBA,GAAwBA,EAAe,EAAK,EAAIA,EAChEC,EAA8B,MAAfA,GAAuBA,EAAc,EAAK,EAAIA,EAC7DC,EAA4C,MAAtBA,GAA8BA,EAAqB,EAAK,EAAIA,EAClFC,EAA8C,MAAvBA,GAA+BA,EAAsB,EAAK,EAAIA,EAErFvzB,KAAKwzB,WAAa,EAClBxzB,KAAKozB,aAAeA,EACpBpzB,KAAKqzB,YAAcA,EACnBrzB,KAAKszB,mBAAqBA,EAC1BtzB,KAAKuzB,oBAAsBA,CAC/B,EAMUE,GAMV,SAAAA,EAAAC,GAAoB,IAAP7vB,EAAI6vB,EAAJ7vB,KAAI6a,IAAA,KAAA+U,GACb9U,GAAUoB,oBAAoBlc,EAAMmc,IACpChgB,KAAK6D,KAAOA,CAChB,EAMU8vB,GAAsB,SAAAC,GAAA1V,IAAAyV,EAAAC,GAAA,IAAAC,EAAAzV,EAAAuV,GAMhC,SAAAA,EAAAG,GAAuB,IAAT3M,EAAK2M,EAAL3M,MAAK,OAAAzI,IAAA,KAAAiV,GAAAE,EAAAhwB,KAAA,KACT,CAAEsjB,MAAAA,GACZ,CAAC,OAAAwM,CAAA,CAR+B,CAAS1M,IAkBhC8M,GACT,SAAAA,EAAAC,GAA0E,IAAAC,EAAAD,EAA7DrM,QAAAA,OAAO,IAAAsM,GAAOA,EAAAC,EAAAF,EAAE/L,UAAAA,OAAS,IAAAiM,GAAQA,EAAAC,EAAAH,EAAE7L,iBAAAA,OAAgB,IAAAgM,EAAG,IAAGA,EAAAzV,IAAA,KAAAqV,GAClE/zB,KAAK2nB,QAAUA,EACf3nB,KAAKioB,UAAYA,EACjBjoB,KAAKmoB,iBAAmBA,CAC5B,EAWSiM,GACT,SAAAA,EAAYC,GACR,GADe3V,IAAA,KAAA0V,GACXC,EAAO,KAAAC,EACuDD,EAAvDE,SAAAA,OAAQ,IAAAD,EAAG,KAAIA,EAAAE,EAAwCH,EAAtCI,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAAAE,EAA4BL,EAA1BM,OAAAA,OAAM,IAAAD,EAAG,EAACA,EAAAE,EAAgBP,EAAdQ,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EACtDL,GACA5V,GAAUC,eAAe2V,GAE7B5V,GAAUU,eAAeoV,GACzB9V,GAAUU,eAAesV,GAAQ,IACTG,EADSC,E,25BAAAC,CACdH,GAAK,IAAxB,IAAAE,EAAAE,MAAAH,EAAAC,EAAA9oB,KAAAnL,MAAeg0B,EAAAl0B,MACX+d,GAAUK,aAAa6V,EAAO9xB,OAAO+E,OAAOiU,EAAU9B,uBACzD,OAAA5Y,GAAA0zB,EAAA7wB,EAAA7C,EAAA,SAAA0zB,EAAAG,GAAA,CACDl1B,KAAKu0B,SAAWA,EAChBv0B,KAAKy0B,MAAQA,EACbz0B,KAAK20B,OAASA,EACd30B,KAAK60B,MAAQA,CACjB,CACJ,EAMSM,GAMT,SAAAA,EAAAC,GAAuC,IAA1BC,EAAWD,EAAXC,YAAa3E,EAAU0E,EAAV1E,WAStB,GATgChS,IAAA,KAAAyW,GAC5BE,IACA1W,GAAUC,eAAeyW,GACzBr1B,KAAKq1B,YAAcA,GAEnB3E,IACA/R,GAAUC,eAAe8R,GACzB1wB,KAAK0wB,WAAaA,IAEjB2E,IAAgB3E,EACjB,MAAM,IAAIjqB,MAAM,gGAExB,ECprDA8b,IAAc,EAYlB,SAAS+S,GAAeC,GACpB,IAAMC,EAXV,SAAqBD,GACjB,IAAM5C,EAAQjV,EAAY6X,GAC1B,MAAO,CACHnC,aAAcT,EAAMS,aAAeT,EAAMa,WACzCH,YAAaV,EAAMU,YAAcV,EAAMa,WACvCF,mBAAoBX,EAAMW,mBAAqBX,EAAMa,WACrDD,oBAAqBZ,EAAMY,oBAAsBZ,EAAMa,WAE/D,CAGqBiC,CAAYF,GACvBG,EAAmBF,EAASjC,oBAAqD,EAA9BiC,EAASlC,mBAA0B,GACxFqC,EAAI,EAOR,OALIA,EADAD,EAAmB,IACf,KAAQA,EAAmB,GAE3B,MAAQA,EAAmB,KAAO,GAGnC,EAAK,MADZC,GAAKH,EAASnC,YAAcmC,EAASpC,aAAe,KAC1B,KAAWuC,GAAKA,EAAI,KAAO,IAAMA,EAC/D,CAMO,SAASC,KACZ,GAAKrT,IAAgB7E,EAArB,CAGA,IAAMmY,EAAkBP,GAAe,qBACjCQ,EAAkBR,GAAe,sBAEvC,OADA5X,EAAc,KACVhU,MAAMosB,IAAoBpsB,MAAMmsB,GACzB,EACAnsB,MAAMosB,GACND,EACAnsB,MAAMmsB,GACNC,EAEAC,KAAKC,IAAIH,EAAiBC,EAXrC,CAaJ,CAEO,SAASG,KACZvY,EAAc,IAAIoV,GAAkB,CAACE,kBAAmB,IAAIE,GAAU,CAACE,aAAc,EAAGC,YAAa,EAAGC,mBAAoB,EAAGC,oBAAqB,IACzHN,mBAAoB,IAAIC,GAAU,CAACE,aAAc,EAAGC,YAAa,EAAGC,mBAAoB,EAAGC,oBAAqB,KAC/I,CC/BA,SAAS2C,GAAahyB,GAClB,OAAOA,GAAKA,EAAEoD,KAAOpD,EAAEoD,KAAOpD,CAClC,CAMA,SAASiyB,GAAgB1F,GACrB,GAAIA,EAAS,CACT,GAAyB,mBAAbA,EAER,OACG,GAAyB,WAArBtsB,IAAQssB,GAAuB,CACtC,IAAM2F,EAAU5R,MAAM4R,QAAQ3F,GACxB4F,EAAmBD,EAAU,GAAK,CAAC,EAEzC,GAAIA,EACA3F,EAAQxoB,SAAQ,SAAAquB,GACZD,EAAiBn0B,KAAKi0B,GAAgBG,GAC1C,SAEA,IAAK,IAAMC,KAAY9F,EACF,gBAAb8F,GACa,WAAbA,GACa,SAAbA,GACa,mBAAbA,GACa,gDAAbA,IACAF,EAAiBE,GAAYJ,GAAgB1F,EAAQ8F,KAIjE,OAAOF,CACX,CACJ,CACA,OAAO5F,CACX,CAMA,SAAS+F,GAAgBtyB,GACrB,OAAOA,GAAKA,EAAEua,QAAUva,EAAEua,QAAUva,CACxC,CAOA,SAASuyB,GAAiBC,EAAWjG,EAASkG,GAC1C,IAAMN,EAAmBF,GAAgB1F,GAEzC9U,EAAI,CAAC+a,UAAAA,EAAWjG,QAAAA,GADCkG,EAAU5a,EAAUlC,UAAUhL,MAAQkN,EAAUlC,UAAU9K,KACvCgN,EAAUjC,WAAWC,QACzD4D,EAAYiZ,YAAY,CACpBtvB,KAAMyU,EAAUvP,oBAAoBG,IACpC8jB,QAAS,CAAEiG,UAAAA,EAAWjG,QAAS4F,EAAkBM,QAAAA,IAEzD,CAOA,SAASE,GAAcH,EAAWjG,GAA6B,IAApBqG,IAAW31B,UAAAuB,OAAA,QAAApB,IAAAH,UAAA,KAAAA,UAAA,GAClDwc,EAAYiZ,YAAY,CACpBtvB,KAAMyU,EAAUvP,oBAAoBI,2BACpC6jB,QAAS,CAAEsG,mBAAoBL,EAAWM,sBAAuBvG,KAEjEqG,GACAL,GAAiBC,EAAWjG,GAAS,EAE7C,CAQA,SAASwG,GAAcC,EAAWr2B,EAAO61B,GAErCS,QAAQt2B,MAAM,wBAADqb,OAAyBgb,EAAS,mBAAAhb,OAAkBwa,GAAa71B,GAC9Eg2B,GAAc9a,EAAUnN,kBAAkBC,MAAO,CAAE4P,QAASyY,IAAa,GACzET,GAAiBC,EAAW,CAAEQ,UAAAA,EAAWr2B,MAAAA,IAAS,EACtD,CAOA,SAASu2B,GAAoBv2B,EAAO61B,GAEhC,IAAMjG,EAAU,CACZ4G,YAAa,CACT9Y,UAAW1d,EAAM0d,UACjBC,UAAW3d,EAAM2d,UACjBC,QAAS5d,EAAM4d,UAGvB0Y,QAAQt2B,MAAM,6CAADqb,OAA8Cwa,GAAajG,GACxEoG,GAAc9a,EAAUnN,kBAAkBC,MAAO4hB,GAAS,GAC1DgG,GAAiBC,EAAW,CAAEQ,UAAWnb,EAAUjK,kBAAkBC,aAAclR,MAAAA,IAAS,EAChG,CAEA,SAASy2B,GAAaZ,EAAWjG,GAE7B0G,QAAQx2B,KAAK,6CAADub,OAA8Cwa,EAAS,kBAAAxa,OAAiBX,KAAKC,UAAUiV,KACnGoG,GAAc9a,EAAUnN,kBAAkBG,KAAM,CAAE0P,QAASiY,IAAa,GACxED,GAAiBC,EAAWjG,GAAS,EACzC,CAEA,SAGe8G,KAAiB,OAAAC,GAAAp2B,MAAC,KAADD,UAAA,CAkEhC,SAAAq2B,KAFC,OAEDA,GAAAC,IAAAC,IAAAA,MAlEA,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArY,EAAAvY,EAAAmpB,EAAA,OAAAiH,IAAAA,MAAA,SAAAS,GAAA,cAAAA,EAAA1tB,KAAA0tB,EAAAxvB,MAAA,cAAAwvB,EAAA1tB,KAAA,EAAA0tB,EAAAxvB,KAAA,EAEyCiV,EAAgBwa,wBAAuB,OAAhD,OAAlBN,EAAkBK,EAAAnxB,KAAAmxB,EAAAxvB,KAAG,EACKmvB,EAAmBO,iBAAgB,OAA5C,OAAjBN,EAAiBI,EAAAnxB,KAAAmxB,EAAAxvB,KAAG,EACaiV,EAAgB0a,wBAAuB,OAAhD,OAAxBN,EAAwBG,EAAAnxB,KAAAmxB,EAAAxvB,KAAG,GACKmvB,EAAmBS,uBAAsB,QAK9E,OALKN,EAAuBE,EAAAnxB,KAC7B2X,GAAUoB,oBAAoBgY,EAAmBjU,GACjDnF,GAAUoB,oBAAoBkY,EAAyBzW,GACnDyW,EAAwB1V,cDvHhCA,IAAc,GCyHT4V,EAAAxvB,KAAA,GAC+BmvB,EAAmBU,iBAAgB,QAA7DN,EAAiBC,EAAAnxB,KACvB2X,GAAUoB,oBAAoBmY,EAAmBxY,GAC3CG,EAAcqY,EAAkBrY,YAChCvY,EAAOyU,EAAUvP,oBAAoBE,gBACrC+jB,EAAU,CACZgI,aAAWb,EAAA,GAAAc,IAAAd,EAEN7b,EAAUjF,kBAAkBE,OAAU+gB,EAAkB9T,QAAMyU,IAAAd,EAC9D7b,EAAUjF,kBAAkBG,eAAkB8gB,EAAkB5T,eAAayT,GAElFe,cAAYd,EAAA,GAAAa,IAAAb,EACP9b,EAAU7E,yBAAyBC,cAAiB6gB,EAAyBxX,cAAYkY,IAAAb,EACzF9b,EAAU7E,yBAAyBE,eAAkB4gB,EAAyBtX,kBAAgBgY,IAAAb,EAC9F9b,EAAU7E,yBAAyBG,6BAAgC2gB,EAAyBpX,sBAAoB8X,IAAAb,EAChH9b,EAAU7E,yBAAyBI,gCAAmC0gB,EAAyBlX,kBAAgB4X,IAAAb,EAC/G9b,EAAU7E,yBAAyBK,sBAAyBygB,EAAyBhX,uBAAqB0X,IAAAb,EAC1G9b,EAAU7E,yBAAyBM,sBAAyBwgB,EAAyB9W,wBAAsBwX,IAAAb,EAC3G9b,EAAU7E,yBAAyBO,mBAAqBugB,EAAyB5W,qBAAmBsX,IAAAb,EACpG9b,EAAU7E,yBAAyBQ,oBAAsBsgB,EAAyB1W,sBAAoBoX,IAAAb,EACtG9b,EAAUpE,wBAAwBnK,KAAQyqB,EAAwBtW,SAAO+W,IAAAb,EACzE9b,EAAUpE,wBAAwBC,OAAUqgB,EAAwBpW,WAAS6W,IAAAb,EAC7E9b,EAAUpE,wBAAwBE,MAASogB,EAAwBlW,UAAQ2W,IAAAb,EAC3E9b,EAAUpE,wBAAwBG,KAAQmgB,EAAwBhW,SAAOyW,IAAAb,EACzE9b,EAAUpE,wBAAwBI,eAAkBkgB,EAAwB9V,kBAAgBuW,IAAAb,EAC5F9b,EAAUpE,wBAAwBhH,qBAAwBsnB,EAAwB5V,uBAAqBqW,IAAAb,EACvG9b,EAAUpE,wBAAwBK,qBAAwBigB,EAAwBxV,uBAAqBiW,IAAAb,EACvG9b,EAAUpE,wBAAwBtJ,oBAAuB4pB,EAAwBtV,sBAAoB+V,IAAAb,EACrG9b,EAAUpE,wBAAwBM,IAAOggB,EAAwB1V,aAAWmW,IAAAb,EAC5E9b,EAAUpE,wBAAwBnB,UAAayhB,EAAwBpV,cAAY6V,IAAAb,EACnF9b,EAAUpE,wBAAwBO,yBAA4B+f,EAAwBlV,oCAAkC2V,IAAAb,EACxH9b,EAAUpE,wBAAwBQ,yBAA4B8f,EAAwBhV,oCAAkCyV,IAAAb,EACxH9b,EAAUpE,wBAAwBS,4BAA+B6f,EAAwB9U,uCAAqCuV,IAAAb,EAC9H9b,EAAUpE,wBAAwBU,4BAA+B4f,EAAwB5U,uCAAqCqV,IAAAb,EAC9H9b,EAAUpE,wBAAwBW,YAAc2f,EAAwB1U,YAAUmV,IAAAb,EAClF9b,EAAUpE,wBAAwBY,SAAW0f,EAAwBxU,mBAAiBiV,IAAAb,EACtF9b,EAAUpE,wBAAwBa,gBAAkByf,EAAwBtU,gBAAc+U,IAAAb,EAC1F9b,EAAUpE,wBAAwBc,kBAAoBwf,EAAwBpU,qBAAmBgU,GAEtGe,eAAgB/Y,EAAYnd,OAAS,EAAImd,EAAY,GAAK,MAE9DlC,EAAYiZ,YAAY,CACpBtvB,KAAAA,EACAmpB,QAAAA,IAEJgG,GAAiBnvB,EAAMmpB,GAAS,GAAO0H,EAAAxvB,KAAA,iBAAAwvB,EAAA1tB,KAAA,GAAA0tB,EAAAU,GAAAV,EAAA,SAGvCxa,EAAYiZ,YAAY,CACpBtvB,KAAMyU,EAAUvP,oBAAoBE,gBACpC+jB,QAAS,CAAC,IAEdgG,GAAiB1a,EAAUvP,oBAAoBE,gBAAiB,CAAC,GAAG,GAAO,yBAAAyrB,EAAAvtB,OAAA,GAAA+sB,EAAA,oBAElFv2B,MAAA,KAAAD,UAAA,UAGc23B,GAAqBC,GAAA,OAAAC,GAAA53B,MAAC,KAADD,UAAA,UAAA63B,KA6iBnC,OA7iBmCA,GAAAvB,IAAAC,IAAAA,MAApC,SAAAuB,EAAqCxa,GAAO,IAAAiY,EAAAoB,EAAAoB,EAAAzI,EAAA5sB,EAAAs1B,EAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAArY,EAAAsH,EAAAqS,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzJ,EAAAC,EAAAyJ,EAAArS,EAAAsS,EAAAC,EAAAvR,EAAAE,EAAAsR,EAAAC,EAAAC,EAAAC,EAAAC,EAAAnU,EAAAoU,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAlT,GAAAmT,GAAAC,GAAAC,GAAA3V,GAAA4V,GAAAC,GAAAC,GAAA9M,GAAA+M,GAAAvzB,GAAAwzB,GAAAC,GAAAC,GAAA9L,GAAAC,GAAA8L,GAAAC,GAAAC,GAAAC,GAAAC,GAAAvgB,GAAAD,GAAAygB,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAlM,GAAAW,GAAAC,GAAA,OAAAoG,IAAAA,MAAA,SAAAmF,GAAA,cAAAA,EAAApyB,KAAAoyB,EAAAl0B,MAAA,QAClC+tB,EAAYjY,EAAQnC,KAAKhV,QACbyU,EAAUvP,oBAAoBG,KAC5C8pB,GAAiBC,EAAWjY,EAAQnC,MAAM,GAC7CugB,EAAAhE,GACOnC,EAASmG,EAAAl0B,KAAAk0B,EAAAhE,KACR9c,EAAU3O,mBAAmBC,YAAW,EAAAwvB,EAAAhE,KA6BxC9c,EAAU3O,mBAAmBE,aAAY,GAAAuvB,EAAAhE,KAezC9c,EAAU3O,mBAAmBG,SAAQ,GAAAsvB,EAAAhE,KAuBrC9c,EAAU3O,mBAAmBI,KAAI,GAAAqvB,EAAAhE,KAajC9c,EAAU3O,mBAAmBK,OAAM,GAAAovB,EAAAhE,KAanC9c,EAAU3O,mBAAmBM,KAAI,GAAAmvB,EAAAhE,KAoBjC9c,EAAU3O,mBAAmBO,OAAM,IAAAkvB,EAAAhE,KAoBnC9c,EAAUvP,oBAAoBK,iBAAgB,IAAAgwB,EAAAhE,KA0B9C9c,EAAUvP,oBAAoBM,iBAAgB,IAAA+vB,EAAAhE,KAa9C9c,EAAU3O,mBAAmBQ,KAAI,IAAAivB,EAAAhE,KAkCjC9c,EAAU3O,mBAAmBS,YAAW,IAAAgvB,EAAAhE,KAQxC9c,EAAU3O,mBAAmBU,mBAAkB,IAAA+uB,EAAAhE,KAiC/C9c,EAAUvP,oBAAoBW,aAAY,IAAA0vB,EAAAhE,KA4B1C9c,EAAU3O,mBAAmBW,kBAAiB,IAAA8uB,EAAAhE,KAe9C9c,EAAU3O,mBAAmBa,WAAU,IAAA4uB,EAAAhE,KAavC9c,EAAU3O,mBAAmBY,gBAAe,IAAA6uB,EAAAhE,KA2B5C9c,EAAU3O,mBAAmBc,gBAAe,IAAA2uB,EAAAhE,KAa5C9c,EAAU3O,mBAAmBe,iBAAgB,IAAA0uB,EAAAhE,KAa7C9c,EAAUvP,oBAAoBO,OAAM,IAAA8vB,EAAAhE,KAcpC9c,EAAUvP,oBAAoBQ,QAAO,IAAA6vB,EAAAhE,KAIrC9c,EAAU3O,mBAAmBqB,aAAY,IAAAouB,EAAAhE,KAKzC9c,EAAU3O,mBAAmBsB,gBAAe,IAAAmuB,EAAAhE,KA2D5C9c,EAAU3O,mBAAmBmB,iBAAgB,IAAAsuB,EAAAhE,KAiB7C9c,EAAU3O,mBAAmBuB,kBAAiB,IAAAkuB,EAAAhE,KAU9C9c,EAAU3O,mBAAmBoB,yBAAwB,IAAAquB,EAAAhE,KAgBrD9c,EAAUvP,oBAAoBS,qBAAoB,IAAA4vB,EAAAhE,KAGlD9c,EAAUvP,oBAAoBG,IAAG,IAAAkwB,EAAAhE,KAKjC9c,EAAU3O,mBAAmBgB,eAAc,IAAAyuB,EAAAhE,KAqB3C9c,EAAU3O,mBAAmBkB,sBAAqB,IAAAuuB,EAAAhE,KAelD9c,EAAU3O,mBAAmBiB,oBAAmB,IAAAwuB,EAAAhE,KAchD9c,EAAUvP,oBAAoBU,iBAAgB,wBAAA2vB,EAAApyB,KAAA,GAzhBvCgU,EAAQnC,KAAKzY,OAAQ4a,EAAQnC,KAAKzY,KAAKqrB,UACtCzQ,EAAQnC,KAAKzY,KAAKqrB,SAAS4N,gBAAkB/gB,EAAUtG,UAAUE,SAASmnB,eAC3Ere,EAAQnC,KAAKzY,KAAKqrB,SAAS4N,gBAAkB/gB,EAAUtG,UAAUM,gBAAgB+mB,cAAc,CAAAD,EAAAl0B,KAAA,eAAAk0B,EAAA11B,OAAA,iBAGlF,OAAjB8uB,KAAiB4G,EAAAl0B,KAAA,GACgBiV,EAAgBwa,wBAAuB,QAAhD,GAAlBN,EAAkB+E,EAAA71B,MACpB6W,EAAuB,CAAFgf,EAAAl0B,KAAA,gBAAAk0B,EAAAl0B,KAAA,GACOmvB,EAAmBiF,uBAAsB,QAA/D7D,EAAa2D,EAAA71B,KACnB2X,GAAUoB,oBAAoBmZ,EAAevF,IAC7C9V,GAAwB,EACxBgZ,GAAc9a,EAAUlM,iBAAiBoB,kBAAmBioB,EAAc/R,OAAO,eAAA0V,EAAAl0B,KAAA,GAEjEmvB,EAAmBkF,WAAWve,EAAQnC,KAAKzY,MAAK,QAAhE4sB,EAAOoM,EAAA71B,KACX2X,GAAUoB,oBAAoB0Q,EAAS1J,IAEvC8P,IADQhzB,EAAS4sB,EAAT5sB,MACWqrB,SAAS4N,gBAAkB/gB,EAAUtG,UAAUG,SAASknB,cACvE/gB,EAAUlM,iBAAiBE,aAAegM,EAAUlM,iBAAiBG,eAAgBnM,GAAMg5B,EAAAl0B,KAAA,iBAAAk0B,EAAApyB,KAAA,GAAAoyB,EAAAI,GAAAJ,EAAA,SAE/Fhf,GAAwB,EACpBgf,EAAAI,cAAajf,EACboZ,GAAmByF,EAAAI,GAAIlhB,EAAU3O,mBAAmBC,aAEpDiqB,GAAavb,EAAUnK,UAAUC,wBAAyB,CAACqrB,YAAanhB,EAAU3O,mBAAmBC,YAAa8vB,eAAcN,EAAAI,KACnI,eAAAJ,EAAA11B,OAAA,4BAAA01B,EAAApyB,KAAA,GAAAoyB,EAAAl0B,KAAA,GAKgCiV,EAAgBwa,wBAAuB,QAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,GACJmvB,EAAmBsF,YAAY3e,EAAQnC,KAAKzY,MAAK,QAAlE4sB,EAAOoM,EAAA71B,KACb2X,GAAUoB,oBAAoB0Q,EAAS1J,IAC/BljB,EAAS4sB,EAAT5sB,KACRgzB,GAAc9a,EAAUlM,iBAAiB0B,OAAQ1N,GAAMg5B,EAAAl0B,KAAA,iBAAAk0B,EAAApyB,KAAA,GAAAoyB,EAAAQ,GAAAR,EAAA,UAEnDA,EAAAQ,cAAarf,EACboZ,GAAmByF,EAAAQ,GAAIthB,EAAU3O,mBAAmBE,cAEpD2pB,GAAclb,EAAUpJ,iBAAiBC,yBAAwBiqB,EAAAQ,GAAKthB,EAAU3O,mBAAmBE,cACtG,eAAAuvB,EAAA11B,OAAA,4BAAA01B,EAAApyB,KAAA,GAAAoyB,EAAAl0B,KAAA,GAKgCiV,EAAgBwa,wBAAuB,QAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,GACLmvB,EAAmBwF,QAAQ7e,EAAQnC,KAAKzY,KAAM4a,EAAQnC,KAAKgT,aAAY,QACxC,OAD/CmB,EAAOoM,EAAA71B,KACb2X,GAAUoB,oBAAoB0Q,EAASxJ,IAAc4V,EAAAl0B,KAAA,GACrBmvB,EAAmBU,iBAAgB,QAA7DN,EAAiB2E,EAAA71B,KACvB2X,GAAUoB,oBAAoBmY,EAAmBxY,GAC3CG,EAAcqY,EAAkBrY,YAC9BsH,EAAUsJ,EAAVtJ,MAEmB,IAAvBtH,EAAYnd,OACZm0B,GAAc9a,EAAUlM,iBAAiB0B,OAAQ4V,GAEjD0P,GAAc9a,EAAUlM,iBAAiBU,oBAAqB4W,EAAMzkB,OAAS,GAAKykB,EAAM,IAC3F0V,EAAAl0B,KAAA,iBAAAk0B,EAAApyB,KAAA,GAAAoyB,EAAAU,GAAAV,EAAA,UAEGA,EAAAU,cAAavf,EACboZ,GAAmByF,EAAAU,GAAIxhB,EAAU3O,mBAAmBG,UAEpD0pB,GAAclb,EAAUpJ,iBAAiBE,qBAAoBgqB,EAAAU,GAAKxhB,EAAU3O,mBAAmBG,UAClG,eAAAsvB,EAAA11B,OAAA,4BAAA01B,EAAApyB,KAAA,GAAAoyB,EAAAl0B,KAAA,GAKgCiV,EAAgBwa,wBAAuB,QAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,GACLmvB,EAAmB0F,KAAK/e,EAAQnC,KAAKzY,MAAK,QAA1D4sB,EAAOoM,EAAA71B,KACby2B,GAAa,CAAC/G,UAAW3a,EAAUlM,iBAAiBK,YAAaugB,QAAAA,IAAUoM,EAAAl0B,KAAA,iBAAAk0B,EAAApyB,KAAA,GAAAoyB,EAAAa,GAAAb,EAAA,UAEvEA,EAAAa,cAAa1f,EACboZ,GAAmByF,EAAAa,GAAI3hB,EAAU3O,mBAAmBI,MAEpDypB,GAAclb,EAAUpJ,iBAAiBK,kBAAiB6pB,EAAAa,GAAK3hB,EAAU3O,mBAAmBI,MAC/F,eAAAqvB,EAAA11B,OAAA,4BAAA01B,EAAApyB,KAAA,GAAAoyB,EAAAl0B,KAAA,GAKgCiV,EAAgBwa,wBAAuB,QAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,GACLmvB,EAAmB6F,OAAOlf,EAAQnC,KAAKzY,MAAK,QAA5D4sB,EAAOoM,EAAA71B,KACby2B,GAAa,CAAC/G,UAAW3a,EAAUlM,iBAAiBK,YAAaugB,QAAAA,IAAUoM,EAAAl0B,KAAA,iBAAAk0B,EAAApyB,KAAA,GAAAoyB,EAAAe,GAAAf,EAAA,UAEvEA,EAAAe,cAAa5f,EACboZ,GAAmByF,EAAAe,GAAI7hB,EAAU3O,mBAAmBK,QAEpDwpB,GAAclb,EAAUpJ,iBAAiBM,oBAAmB4pB,EAAAe,GAAK7hB,EAAU3O,mBAAmBK,QACjG,eAAAovB,EAAA11B,OAAA,4BAAA01B,EAAApyB,KAAA,GAAAoyB,EAAAl0B,KAAA,IAKgCiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACLmvB,EAAmB+F,KAAKpf,EAAQnC,KAAKzY,MAAK,SAA1D4sB,EAAOoM,EAAA71B,KACby2B,GAAa,CAAC/G,UAAW3a,EAAUlM,iBAAiBM,YAAasgB,QAAAA,IAAUoM,EAAAl0B,KAAA,sBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAiB,GAAAjB,EAAA,YAEvEA,EAAAiB,cAAa9f,GAAW,CAAA6e,EAAAl0B,KAAA,UACxByuB,GAAmByF,EAAAiB,GAAI/hB,EAAU3O,mBAAmBM,MAAMmvB,EAAAl0B,KAAA,mBAAAk0B,EAAAkB,GAEnD7H,GAAY2G,EAAAiB,IAAGjB,EAAAl0B,KAAAk0B,EAAAkB,KACbhiB,EAAUpJ,iBAAiBU,oBAAmB,uBACsE,OAArH4jB,GAAclb,EAAUpJ,iBAAiBU,oBAAqBmjB,GAAeqG,EAAAiB,IAAK/hB,EAAU3O,mBAAmBM,MAAMmvB,EAAA11B,OAAA,sBAGF,OAAnH8vB,GAAclb,EAAUpJ,iBAAiBG,kBAAmB0jB,GAAeqG,EAAAiB,IAAK/hB,EAAU3O,mBAAmBM,MAAMmvB,EAAA11B,OAAA,6BAAA01B,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAQ9FiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACLmvB,EAAmBkG,OAAOvf,EAAQnC,KAAKzY,MAAK,SAA5D4sB,EAAOoM,EAAA71B,KACby2B,GAAa,CAAC/G,UAAW3a,EAAUlM,iBAAiBM,YAAasgB,QAAAA,IAAUoM,EAAAl0B,KAAA,sBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAoB,GAAApB,EAAA,aAEvEA,EAAAoB,cAAajgB,GAAW,CAAA6e,EAAAl0B,KAAA,UACxByuB,GAAmByF,EAAAoB,GAAIliB,EAAU3O,mBAAmBO,QAAQkvB,EAAAl0B,KAAA,mBAAAk0B,EAAAqB,GAErDhI,GAAY2G,EAAAoB,IAAGpB,EAAAl0B,KAAAk0B,EAAAqB,KACbniB,EAAUpJ,iBAAiBU,oBAAmB,uBACwE,OAAvH4jB,GAAclb,EAAUpJ,iBAAiBU,oBAAqBmjB,GAAeqG,EAAAoB,IAAKliB,EAAU3O,mBAAmBO,QAAQkvB,EAAA11B,OAAA,sBAGA,OAAvH8vB,GAAclb,EAAUpJ,iBAAiBI,oBAAqByjB,GAAeqG,EAAAoB,IAAKliB,EAAU3O,mBAAmBO,QAAQkvB,EAAA11B,OAAA,6BAAA01B,EAAA11B,OAAA,sBASpE,OAToE01B,EAAApyB,KAAA,IAQ7H6lB,EAAa7R,EAAQnC,KAAKgU,YAAc,CAAC,EACzCC,EAAmB9R,EAAQnC,KAAKiU,mBAAoB,EAAKsM,EAAAl0B,KAAA,IACzCiV,EAAgBugB,eAAe1f,EAAQnC,KAAKgT,YAAagB,EAAYC,GAAiB,SAAtGE,EAAOoM,EAAA71B,KACb2X,GAAUoB,oBAAoB0Q,EAAS3H,IAC/BnB,EAAY8I,EAAZ9I,QACRkP,GAAc9a,EAAUnN,kBAAkBQ,wBAAyB,CAAEuY,QAAAA,IAAWkV,EAAAl0B,KAAA,sBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAuB,IAAAvB,EAAA,aAE5EA,EAAAuB,eAAapgB,GAAW,CAAA6e,EAAAl0B,KAAA,UACxByuB,GAAmByF,EAAAuB,IAAIriB,EAAUvP,oBAAoBK,kBAAkBgwB,EAAAl0B,KAAA,mBAEnE8V,EAAQnC,KAAKgU,YACbuG,GAAc9a,EAAUnN,kBAAkBQ,wBAAyB,CAAEuY,SAAS,IACjFkV,EAAAwB,IACMnI,GAAY2G,EAAAuB,KAAGvB,EAAAl0B,KAAAk0B,EAAAwB,MACbtiB,EAAUjK,kBAAkBI,qBAAoB,uBACmF,OAApI+kB,GAAclb,EAAUjK,kBAAkBI,qBAAsBskB,GAAeqG,EAAAuB,KAAKriB,EAAUvP,oBAAoBK,kBAAkBgwB,EAAA11B,OAAA,sBAGI,OAAxI8vB,GAAclb,EAAUjK,kBAAkBM,yBAA0BokB,GAAeqG,EAAAuB,KAAKriB,EAAUvP,oBAAoBK,kBAAkBgwB,EAAA11B,OAAA,6BAAA01B,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAQ9HiV,EAAgB0gB,iBAAgB,SAAhD7N,EAAOoM,EAAA71B,KACb2X,GAAUoB,oBAAoB0Q,EAASmB,IACvCiF,GAAc9a,EAAUnN,kBAAkBS,wBAAyBohB,GAASoM,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAA0B,IAAA1B,EAAA,WAExEA,EAAA0B,eAAavgB,EACboZ,GAAmByF,EAAA0B,IAAIxiB,EAAUvP,oBAAoBM,kBAErDmqB,GAAclb,EAAUjK,kBAAkBK,yBAA0BqkB,GAAeqG,EAAA0B,KAAKxiB,EAAUvP,oBAAoBM,kBACzH,gBAAA+vB,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAKgCiV,EAAgBwa,wBAAuB,SAEqC,OAFvGN,EAAkB+E,EAAA71B,KAClB2hB,EAAalK,EAAQnC,KAAKkiB,QAAU/f,EAAQnC,KAAKkiB,OAAO16B,QAAQiY,EAAUnB,aAAahF,WAAa,EACpGiT,EAAgBpK,EAAQnC,KAAKkiB,QAAU/f,EAAQnC,KAAKkiB,OAAO16B,QAAQiY,EAAUnB,aAAa5E,UAAY,EAAC6mB,EAAAl0B,KAAA,IACvFmvB,EAAmB2G,KAAK,IAAIlY,GAAQ9H,EAAQnC,KAAKyJ,SACzB,IAAIyC,GAAY,CAAEG,WAAAA,EAAYE,cAAAA,KAAiB,SADvF4H,EAAOoM,EAAA71B,KAEb2X,GAAUoB,oBAAoB0Q,EAAS1J,IAC/BljB,EAAS4sB,EAAT5sB,KAEJkY,EAAUtG,UAAUM,gBAAgB+mB,gBAAkBj5B,EAAKqrB,SAAS4N,eAAiBnU,EACrFkO,GAAc9a,EAAUlM,iBAAiBC,oBAAqBjM,GAE9DgzB,GAAc9a,EAAUlM,iBAAiBE,aAAclM,GAC1Dg5B,EAAAl0B,KAAA,mBAEqD,GAFrDk0B,EAAApyB,KAAA,IAAAoyB,EAAA6B,IAAA7B,EAAA,WAEDhG,GAAc9a,EAAUlM,iBAAiBI,eACrC4sB,EAAA6B,eAAa1gB,GAAW,CAAA6e,EAAAl0B,KAAA,UACxByuB,GAAmByF,EAAA6B,IAAI3iB,EAAU3O,mBAAmBQ,MAAMivB,EAAAl0B,KAAA,mBAAAk0B,EAAA8B,IAEnDzI,GAAY2G,EAAA6B,KAAG7B,EAAAl0B,KAAAk0B,EAAA8B,MACb5iB,EAAUpJ,iBAAiBe,oBAAmB,IAAAmpB,EAAA8B,MAG9C5iB,EAAUjK,kBAAkBE,cAAa,uBAF2E,OAArHilB,GAAclb,EAAUpJ,iBAAiBe,oBAAqB8iB,GAAeqG,EAAA6B,KAAK3iB,EAAU3O,mBAAmBQ,MAAMivB,EAAA11B,OAAA,sBAGL,OAAhH8vB,GAAclb,EAAUjK,kBAAkBE,cAAewkB,GAAeqG,EAAA6B,KAAK3iB,EAAU3O,mBAAmBQ,MAAMivB,EAAA11B,OAAA,sBAGQ,OAAxH8vB,GAAclb,EAAUpJ,iBAAiBoB,uBAAwByiB,GAAeqG,EAAA6B,KAAK3iB,EAAU3O,mBAAmBQ,MAAMivB,EAAA11B,OAAA,6BAAA01B,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAQnGiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACrBmvB,EAAmB8G,WAAWngB,EAAQnC,KAAKoT,QAAO,SAAAmN,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAgC,IAAAhC,EAAA,WAExDpG,GAAiB1a,EAAU3O,mBAAmBS,YAAa4Q,EAAQnC,KAAKoT,QAAQ,GAAM,gBAAAmN,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAKrDiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACLmvB,EAAmBgH,iBAAiBrgB,EAAQnC,KAAKqT,QAAO,SAAxEc,EAAOoM,EAAA71B,KACb2X,GAAUoB,oBAAoB0Q,EAAShK,IACjCL,EAAWqK,EAAQrK,SAAS2Y,KAAI,SAAChZ,GACnC,MAAO,CACH4H,GAAI5H,EAAQ4H,GACZrmB,KAAMye,EAAQze,KACdyC,KAAMgc,EAAQhc,KACd6jB,SAAU7H,EAAQ6H,SAClBhI,YAAaG,EAAQH,YACrBiI,OAAQ9H,EAAQ8H,OAChBC,UAAW/H,EAAQ+H,UACnBC,YAAahI,EAAQgI,YACrBC,MAAOjI,EAAQiI,MACfC,aAAclI,EAAQkI,aACtBG,cAAerI,EAAQqI,cACvBF,SAAUnI,EAAQmI,SAClBC,YAAapI,EAAQoI,YAE7B,IACA0I,GAAc9a,EAAUlM,iBAAiBO,eAAgB,CACrDgW,SAAAA,EAAUE,aAAcmK,EAAQnK,eACjCuW,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAmC,IAAAnC,EAAA,WAECA,EAAAmC,eAAahhB,EACboZ,GAAmByF,EAAAmC,IAAIjjB,EAAU3O,mBAAmBU,oBAEpDmpB,GAAclb,EAAUpJ,iBAAiBY,2BAA0BspB,EAAAmC,IAAKjjB,EAAU3O,mBAAmBU,oBACxG,gBAAA+uB,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAKqBiV,EAAgBqhB,YAAYxgB,EAAQnC,KAAKqT,OAAQlR,EAAQnC,KAAKoU,YAAW,SAAzFD,EAAOoM,EAAA71B,KACb2X,GAAUoB,oBAAoB0Q,EAASxK,IACjCG,EAAWqK,EAAQrK,SAAS2Y,KAAI,SAAChZ,GACnC,MAAO,CACH4H,GAAI5H,EAAQ4H,GACZrmB,KAAMye,EAAQze,KACdyC,KAAMgc,EAAQhc,KACd6jB,SAAU7H,EAAQ6H,SAClBhI,YAAaG,EAAQH,YACrBiI,OAAQ9H,EAAQ8H,OAChBC,UAAW/H,EAAQ+H,UACnBC,YAAahI,EAAQgI,YACrBC,MAAOjI,EAAQiI,MACfC,aAAclI,EAAQkI,aACtBG,cAAerI,EAAQqI,cACvBF,SAAUnI,EAAQmI,SAClBC,YAAapI,EAAQoI,YAE7B,IACA0I,GAAc9a,EAAUnN,kBAAkBc,oBAAqB,CAC3D0W,SAAAA,EAAUE,aAAcmK,EAAQnK,eACjCuW,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAqC,IAAArC,EAAA,WAEHzF,GAAmByF,EAAAqC,IAAInjB,EAAUvP,oBAAoBW,cAAc,gBAAA0vB,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAOlCiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACLmvB,EAAmBqH,KAAK1gB,EAAQnC,KAAK8iB,WAAY3gB,EAAQnC,KAAK+iB,cAAa,SAA3F5O,EAAOoM,EAAA71B,KACby2B,GAAa,CAAE/G,UAAW3a,EAAUlM,iBAAiBY,qBAAsBggB,QAAAA,IAAWoM,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAyC,IAAAzC,EAAA,WAElFA,EAAAyC,eAAathB,EACboZ,GAAmByF,EAAAyC,IAAIvjB,EAAU3O,mBAAmBW,mBAEpDkpB,GAAclb,EAAUpJ,iBAAiBa,0BAAyBqpB,EAAAyC,IAAKvjB,EAAU3O,mBAAmBW,mBACvG,gBAAA8uB,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAKgCiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACLmvB,EAAmByH,WAAW9gB,EAAQnC,KAAK6K,OAAM,SAAjEsJ,EAAOoM,EAAA71B,KACby2B,GAAa,CAAE/G,UAAW3a,EAAUlM,iBAAiBa,yBAA0B+f,QAAAA,IAAWoM,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAA2C,IAAA3C,EAAA,WAEtFA,EAAA2C,eAAaxhB,EACboZ,GAAmByF,EAAA2C,IAAIzjB,EAAU3O,mBAAmBa,YAEpDgpB,GAAclb,EAAUpJ,iBAAiBc,mBAAkBopB,EAAA2C,IAAKzjB,EAAU3O,mBAAmBa,YAChG,gBAAA4uB,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAKgCiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACLmvB,EAAmB2H,eAAe,IAAIlZ,GAAQ9H,EAAQnC,KAAKyJ,SAAUtH,EAAQnC,KAAKzY,KAAM4a,EAAQnC,KAAKyT,iBAAgB,SAArIU,EAAOoM,EAAA71B,KACby2B,GAAa,CAAE/G,UAAW3a,EAAUlM,iBAAiBQ,kBAAmBogB,QAAAA,IACpEhS,EAAQnC,KAAKyT,iBACb8G,GAAc9a,EAAUlM,iBAAiB0B,OAAQkN,EAAQnC,KAAKzY,MACjEg5B,EAAAl0B,KAAA,mBAKE,GALFk0B,EAAApyB,KAAA,IAAAoyB,EAAA6C,IAAA7C,EAAA,WAGDhG,GAAc9a,EAAUlM,iBAAiBU,oBAAqB,CAC1D6e,OAAQrT,EAAUnN,kBAAkBC,MAAMiuB,kBAE1CD,EAAA6C,eAAa1hB,GAAW,CAAA6e,EAAAl0B,KAAA,UACxByuB,GAAmByF,EAAA6C,IAAI3jB,EAAU3O,mBAAmBY,iBAAiB6uB,EAAAl0B,KAAA,mBAAAk0B,EAAA8C,IAE9DzJ,GAAY2G,EAAA6C,KAAG7C,EAAAl0B,KAAAk0B,EAAA8C,MACb5jB,EAAUpJ,iBAAiBe,oBAAmB,uBACiF,OAAhIujB,GAAclb,EAAUpJ,iBAAiBe,oBAAqB8iB,GAAeqG,EAAA6C,KAAK3jB,EAAU3O,mBAAmBY,iBAAiB6uB,EAAA11B,OAAA,sBAGI,OAApI8vB,GAAclb,EAAUpJ,iBAAiBkB,wBAAyB2iB,GAAeqG,EAAA6C,KAAK3jB,EAAU3O,mBAAmBY,iBAAiB6uB,EAAA11B,OAAA,6BAAA01B,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAQ/GiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,EAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACLmvB,EAAmB8H,eAAenhB,EAAQnC,KAAKzY,MAAK,SAApE4sB,GAAOoM,EAAA71B,KACby2B,GAAa,CAAE/G,UAAW3a,EAAUlM,iBAAiBW,iBAAkBigB,QAAAA,KAAWoM,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAgD,IAAAhD,EAAA,WAE9EA,EAAAgD,eAAa7hB,EACboZ,GAAmByF,EAAAgD,IAAI9jB,EAAU3O,mBAAmBc,iBAEpD+oB,GAAclb,EAAUpJ,iBAAiBqB,wBAAuB6oB,EAAAgD,IAAK9jB,EAAU3O,mBAAmBc,iBACrG,gBAAA2uB,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAKgCiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,GAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACLmvB,GAAmBgI,gBAAgBrhB,EAAQnC,KAAKzY,MAAK,SAArE4sB,GAAOoM,EAAA71B,KACby2B,GAAa,CAAE/G,UAAW3a,EAAUlM,iBAAiBW,iBAAkBigB,QAAAA,KAAWoM,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAkD,IAAAlD,EAAA,WAE9EA,EAAAkD,eAAa/hB,EACboZ,GAAmByF,EAAAkD,IAAIhkB,EAAU3O,mBAAmBe,kBAEpD8oB,GAAclb,EAAUpJ,iBAAiBsB,yBAAwB4oB,EAAAkD,IAAKhkB,EAAU3O,mBAAmBe,kBACtG,gBAAA0uB,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAKqBiV,EAAgBoiB,SAAQ,SAAxCvP,GAAOoM,EAAA71B,KACb2X,GAAUoB,oBAAoB0Q,GAASjH,IAC/B7B,GAA8B8I,GAA9B9I,QAASQ,GAAqBsI,GAArBtI,iBACjB0O,GAAc9a,EAAUnN,kBAAkBM,cAAe,CAAEyY,QAAAA,GAASQ,iBAAAA,KAAoB0U,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAoD,IAAApD,EAAA,WAEpFA,EAAAoD,eAAajiB,EACboZ,GAAmByF,EAAAoD,IAAIlkB,EAAUvP,oBAAoBO,QAErDkqB,GAAclb,EAAUjK,kBAAkBS,gBAAesqB,EAAAoD,IAAKlkB,EAAUvP,oBAAoBO,QAC/F,gBAAA8vB,EAAA11B,OAAA,sBAK+C,OAApDyW,EAAgBsiB,cAAczhB,EAAQnC,KAAKmC,SAASoe,EAAA11B,OAAA,6BAAA01B,EAAAl0B,KAAA,IAGnBiV,EAAgBwa,wBAAuB,SACvB,OADzByE,EAAA71B,KACLm5B,WAAW1hB,EAAQnC,KAAKzY,MAAMg5B,EAAA11B,OAAA,0BAI7CsX,EAAQnC,OAAQmC,EAAQnC,KAAK8jB,YAAW,CAAAvD,EAAAl0B,KAAA,iBAAAk0B,EAAAl0B,KAAA,IACPiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,GAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACKmvB,GAAmBU,iBAAgB,SAA7DN,GAAiB2E,EAAA71B,KACvB2X,GAAUoB,oBAAoBmY,GAAmBxY,GAC3CG,GAAcqY,GAAkBrY,YAAWgd,EAAAwD,IAAA3I,IAAAA,KAC5B7X,IAAW,aAAAgd,EAAAyD,IAAAzD,EAAAwD,OAAAv/B,KAAE,CAAF+7B,EAAAl0B,KAAA,UAIsF,GAJ3Gkd,GAAMgX,EAAAyD,IAAA1/B,MACPiD,GAAOgc,GAAYgG,IACnB6V,IAAe73B,GAAK6hB,UAAW7hB,GAAK6hB,SAASmG,aAC7C8P,GAAmB93B,GAAK8hB,gBAAkB9hB,GAAK8hB,eAAe6I,kBAAoBzS,EAAU3G,iBAAiBI,WAC7GqZ,GAAwB8M,IAAoB93B,GAAK8hB,gBAAkB9hB,GAAK8hB,eAAekJ,uBACzF6M,GAAc,CAAFmB,EAAAl0B,KAAA,UACZ9E,GAAK08B,gBAAiB,EAAK1D,EAAA2D,IACpB38B,GAAKwC,MAAKw2B,EAAAl0B,KAAAk0B,EAAA2D,MACRzkB,EAAUrD,WAAWE,UAAS,IAAAikB,EAAA2D,MAW9BzkB,EAAUrD,WAAWC,QAAO,IAAAkkB,EAAA2D,MAQ5BzkB,EAAUrD,WAAWG,aAAY,IAAAgkB,EAAA2D,MASjCzkB,EAAUrD,WAAWI,YAAW,2BA3B7B6iB,GAAkB,CAAFkB,EAAAl0B,KAAA,UAKf,OAJDkV,GAAwB,EACxBgZ,GAAc9a,EAAUlM,iBAAiBmB,0BAA2BnN,IAChEgrB,IACAgI,GAAc9a,EAAUlM,iBAAiBiB,qBAAsBjN,IAClEg5B,EAAA11B,OAAA,sBAG0D,OAA/D0vB,GAAc9a,EAAUlM,iBAAiBG,eAAgBnM,IAAMg5B,EAAA11B,OAAA,0BAG3Dw0B,GAAkB,CAAFkB,EAAAl0B,KAAA,UAEwD,OADxEkV,GAAwB,EACxBgZ,GAAc9a,EAAUlM,iBAAiBkB,wBAAyBlN,IAAMg5B,EAAA11B,OAAA,sBAGf,OAA7D0vB,GAAc9a,EAAUlM,iBAAiBE,aAAclM,IAAMg5B,EAAA11B,OAAA,sBAS1D,OANH0vB,GAAc9a,EAAUlM,iBAAiBQ,kBAAmB,CACxDuV,YAAa/hB,GAAKkiB,QAAQH,YAC1BG,QAAQliB,GAAKkiB,QACbL,SAAU7hB,GAAK6hB,SACfD,oBAAqB5hB,GAAK8hB,eAAeF,oBACzCI,OAAQhiB,GAAKgiB,SACdgX,EAAA11B,OAAA,sBASA,OANH0vB,GAAc9a,EAAUlM,iBAAiBS,sBAAuB,CAC5DsV,YAAa/hB,GAAKkiB,QAAQH,YAC1BG,QAAQliB,GAAKkiB,QACbL,SAAU7hB,GAAK6hB,SACfD,oBAAqB5hB,GAAK8hB,eAAeF,oBACzCI,OAAQhiB,GAAKgiB,SACdgX,EAAA11B,OAAA,6BAAA01B,EAAA11B,OAAA,sBAAA01B,EAAAl0B,KAAA,0BAAAk0B,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAYciV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,GAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACNmvB,GAAmB2I,eAAehiB,EAAQnC,KAAK0T,QAAO,SAArE3nB,GAAMw0B,EAAA71B,KACZ2X,GAAU+hB,qBAAqBr4B,GAAQygB,GAAeE,IAClD3gB,cAAkB2gB,IAClB3gB,GAAOs4B,mBAAmBliB,EAAQnC,KAAK0T,OAAO1G,eAElDuN,GAAc9a,EAAUlM,iBAAiBwB,qBAAsBhJ,IAAQw0B,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAA+D,IAAA/D,EAAA,WAEnEA,EAAA+D,eAAa5iB,EACboZ,GAAmByF,EAAA+D,IAAI7kB,EAAU3O,mBAAmBmB,kBAEpD0oB,GAAcf,GAAY2G,EAAA+D,OAAQ7kB,EAAUpJ,iBAAiByB,4BAA8B2H,EAAUpJ,iBAAiByB,4BAA8B2H,EAAUpJ,iBAAiBuB,yBAA2BsiB,GAAeqG,EAAA+D,KAAK7kB,EAAU3O,mBAAmBmB,kBAC9P,gBAAAsuB,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAKgCiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,GAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACNmvB,GAAmB+I,kBAAiB,SAAnDx4B,GAAMw0B,EAAA71B,KACZ2X,GAAUoB,oBAAoB1X,GAAQ4X,GACtC4W,GAAc9a,EAAUlM,iBAAiBlB,kBAAmBtG,IAAQw0B,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAiE,IAAAjE,EAAA,WAEpE5F,GAAclb,EAAUpJ,iBAAiBmC,0BAA2B0hB,GAAeqG,EAAAiE,KAAK/kB,EAAU3O,mBAAmBuB,mBAAmB,gBAAAkuB,EAAA11B,OAAA,sBAK7F,OAL6F01B,EAAApyB,KAAA,IAAAsxB,GAKxFtd,EAAQnC,KAAhD2T,GAAY8L,GAAZ9L,aAAcC,GAAa6L,GAAb7L,cAAerK,GAAMkW,GAANlW,OAAMgX,EAAAl0B,KAAA,IACViV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,GAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACNmvB,GAAmBiJ,sBAAsB9Q,GAAcC,GAAerK,IAAO,SAA5Fxd,GAAMw0B,EAAA71B,KACZ2X,GAAUoB,oBAAoB1X,GAAQof,IACtCoP,GAAc9a,EAAUlM,iBAAiBc,qBAAsBtI,IAAQw0B,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAmE,IAAAnE,EAAA,WAGjEV,GAA2B,IAAI1U,GAAyB,CAC1DE,SAAS,IAEbkP,GAAc9a,EAAUlM,iBAAiBc,qBAAsBwrB,IAA0B,GACzF1F,GAAiB1a,EAAU3O,mBAAmBoB,yBAA0B2tB,IAA0B,GAAM,gBAAAU,EAAA11B,OAAA,sBAIpE,OAAxCyW,EAAgBvB,aJzoBjBd,KAAK0lB,MAAM1lB,KAAKC,UAAUE,KIyoBemhB,EAAA11B,OAAA,sBAI8B,OAJ9Bi1B,GAGM3d,EAAQnC,KAA1CT,GAAQugB,GAARvgB,SAAUD,GAAUwgB,GAAVxgB,WAAY6U,GAAO2L,GAAP3L,QAC9B7S,EAAgB4S,mBAAmB3U,GAAUD,GAAY6U,IAASoM,EAAA11B,OAAA,sBAKrC,OALqC01B,EAAApyB,KAAA,IAKlEoT,GAAwB,EAAKgf,EAAAl0B,KAAA,IACIiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,GAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACNmvB,GAAmBoJ,cAAcziB,EAAQnC,KAAKzY,MAAK,SACb,OADrDwE,GAAMw0B,EAAA71B,KACZ2X,GAAUoB,oBAAoB1X,GAAQorB,IAAqBoJ,EAAAl0B,KAAA,IAC3BmvB,GAAmBO,iBAAgB,SAA5CwE,EAAA71B,KACFmd,cAAc7c,OAASyU,EAAU/C,WAAWE,WAC7D2d,GAAc9a,EAAUlM,iBAAiBmB,0BAA2B3I,GAAOxE,MAE3EgzB,GAAc9a,EAAUlM,iBAAiBkB,wBAAyB1I,GAAOxE,MAC5Eg5B,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAsE,IAAAtE,EAAA,WAEDhf,GAAwB,EACpBgf,EAAAsE,eAAanjB,EACboZ,GAAmByF,EAAAsE,IAAIplB,EAAU3O,mBAAmBgB,gBAEpD6oB,GAAclb,EAAUpJ,iBAAiB2B,uBAAsBuoB,EAAAsE,IAAKplB,EAAU3O,mBAAmBgB,gBACpG,gBAAAyuB,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAKgCiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,GAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACNmvB,GAAmBiF,qBAAqBte,EAAQnC,KAAKzY,MAAK,SAAzEwE,GAAMw0B,EAAA71B,KACZ2X,GAAUoB,oBAAoB1X,GAAQsrB,IACtC9V,GAAwB,EACxBgZ,GAAc9a,EAAUlM,iBAAiBoB,kBAAmB5I,GAAO8e,OAAO0V,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAuE,IAAAvE,EAAA,WAEtEA,EAAAuE,eAAapjB,EACboZ,GAAmByF,EAAAuE,IAAIrlB,EAAU3O,mBAAmBkB,uBAEpD2oB,GAAclb,EAAUpJ,iBAAiB4B,8BAA6BsoB,EAAAuE,IAAKrlB,EAAU3O,mBAAmBkB,uBAC3G,gBAAAuuB,EAAA11B,OAAA,6BAAA01B,EAAApyB,KAAA,IAAAoyB,EAAAl0B,KAAA,IAKgCiV,EAAgBwa,wBAAuB,SAAhD,OAAlBN,GAAkB+E,EAAA71B,KAAA61B,EAAAl0B,KAAG,IACNmvB,GAAmBuJ,kBAAkB5iB,EAAQnC,KAAKzY,MAAK,SAAtEwE,GAAMw0B,EAAA71B,KACZ2X,GAAUoB,oBAAoB1X,GAAQorB,IACtCoD,GAAc9a,EAAUlM,iBAAiBiB,qBAAsBzI,GAAOxE,MAAOg5B,EAAAl0B,KAAA,mBAAAk0B,EAAApyB,KAAA,IAAAoyB,EAAAyE,IAAAzE,EAAA,WAEzEA,EAAAyE,eAAatjB,EACboZ,GAAmByF,EAAAyE,IAAIvlB,EAAU3O,mBAAmBiB,qBAEpD4oB,GAAclb,EAAUpJ,iBAAiB6B,4BAA2BqoB,EAAAyE,IAAKvlB,EAAU3O,mBAAmBiB,qBACzG,gBAAAwuB,EAAA11B,OAAA,sBASF,OATEy1B,GAImCne,EAAQnC,KAAK+T,UAA/CK,GAAUkM,GAAVlM,WAAYW,GAAMuL,GAANvL,OAAQC,GAASsL,GAATtL,UAC1B1T,EAAgB2jB,iBAAiB,CAC7B7Q,WAAAA,GACAW,OAAAA,GACAC,UAAAA,KACDuL,EAAA11B,OAAA,6BAAA01B,EAAA11B,OAAA,uCAAA01B,EAAAjyB,OAAA,GAAAquB,EAAA,2PAMd73B,MAAA,KAAAD,UAAA,UAGcqgC,GAAoBC,GAAA,OAAAC,GAAAtgC,MAAC,KAADD,UAAA,UAAAugC,KAkDlC,OAlDkCA,GAAAjK,IAAAC,IAAAA,MAAnC,SAAAiK,EAAoCljB,GAAO,IAAAmjB,EAAAC,EAAAja,EAAA6I,EAAA,OAAAiH,IAAAA,MAAA,SAAAoK,GAAA,cAAAA,EAAAr3B,KAAAq3B,EAAAn5B,MAAA,OAAAm5B,EAAAjJ,GAC/Bpa,EAAQnC,KAAKhV,KAAIw6B,EAAAn5B,KAAAm5B,EAAAjJ,KAChB9c,EAAUvP,oBAAoBC,gBAAe,kBAGY,GAFpDm1B,EAAW,4OACXC,EAAY,IAAI9kB,IAAI0B,EAAQsjB,QAC5Bna,EAAMia,EAAUG,SAAW,KAAOH,EAAUI,UAE9CL,EAAS/Q,KAAKjJ,GAAM,CAAFka,EAAAn5B,KAAA,SAG2G,OAF7HgV,EAAcc,EAAQyjB,MAAM,IAChBC,UAAYrJ,GACxBrC,GAAiB1a,EAAUvP,oBAAoBC,gBAAiB21B,GAAuB3jB,EAAQnC,KAAK+lB,kBAAkB,GAAOP,EAAAr3B,KAAA,GAAAq3B,EAAAn5B,KAAA,GAEnGiV,EAAgB0kB,KAAK7jB,EAAQnC,KAAK+lB,iBAAgB,QAAlE5R,EAAOqR,EAAA96B,KACb2X,GAAUoB,oBAAoB0Q,EAAS3I,IACnC2I,EAAQlI,kBACRsO,GAAc9a,EAAUnN,kBAAkBY,oBAAqB,CAC3DmY,SAAS,IAEN8I,EAAQxI,UACf4O,GAAc9a,EAAUnN,kBAAkBO,WAAY,CAClDgZ,iBAAkBsI,EAAQtI,mBAEvBsI,EAAQpI,cACfwO,GAAc9a,EAAUnN,kBAAkBO,WAAY,CAClDkZ,cAAeoI,EAAQpI,gBAG3BkP,KACHuK,EAAAn5B,KAAA,oBAAAm5B,EAAAr3B,KAAA,GAAAq3B,EAAA7E,GAAA6E,EAAA,YAEGA,EAAA7E,cAAajf,GAAW,CAAA8jB,EAAAn5B,KAAA,SACxByuB,GAAmB0K,EAAA7E,GAAIlhB,EAAUvP,oBAAoBC,iBAAiBq1B,EAAAn5B,KAAA,iBAAAm5B,EAAAzE,GAE/DnH,GAAY4L,EAAA7E,IAAG6E,EAAAn5B,KAAAm5B,EAAAzE,KACbthB,EAAUpJ,iBAAiBW,eAAc,oBACkF,OAA5H2jB,GAAclb,EAAUpJ,iBAAiBW,eAAgBkjB,GAAesL,EAAA7E,IAAKlhB,EAAUvP,oBAAoBC,iBAAiBq1B,EAAA36B,OAAA,oBAGC,OAA7H8vB,GAAclb,EAAUjK,kBAAkBQ,eAAgBkkB,GAAesL,EAAA7E,IAAKlhB,EAAUvP,oBAAoBC,iBAAiBq1B,EAAA36B,OAAA,oBAMrF,OAA5Do7B,OAAOC,oBAAoB,UAAWhB,IAAsBM,EAAA36B,OAAA,2BAAA26B,EAAA36B,OAAA,qCAAA26B,EAAAl3B,OAAA,GAAA+2B,EAAA,qBAMvEvgC,MAAA,KAAAD,UAAA,CAED,SAASihC,GAAuB3R,GAC5BA,EAAUA,GAAW,CAAC,EACtB,IAAIttB,EAAM,CAAC,EAgBX,OAdA+X,EAAgCjT,SAAQ,SAAAqE,GAChCmkB,EAAQrrB,eAAekH,KACvBnJ,EAAImJ,GAAQmkB,EAAQnkB,GAE5B,IAEA6O,EAA2ClT,SAAQ,SAAAqE,GAC/CvJ,OAAOqH,KAAKqmB,GAASxoB,SAAQ,SAAAxH,GACrBA,EAAIgiC,WAAWn2B,KAAU8O,EAAkCsnB,SAASjiC,KACpE0C,EAAI1C,GAAOgwB,EAAQhwB,GAE3B,GACJ,IAEO0C,CACX,CAEA,SAASw/B,GAAgBlS,EAASmS,EAAa1L,EAAWR,GACtD,IAEI,OADA/X,GAAUoB,oBAAoB0Q,EAASmS,IAChC,CACX,CAAE,MAAO1+B,GAIL,OAHIgzB,GACAD,GAAcC,EAAWhzB,EAAGwyB,IAEzB,CACX,CACJ,CAOO,SAASmM,GAAoBC,GAChCllB,EAAkBklB,EAClBP,OAAOQ,iBAAiB,UAAWvB,GACvC,CASO,SAASwB,GAAU3kB,GACtBoY,GADkCpY,EAATqY,UAAkBrY,EAAPoS,QAAgBpS,EAAPsY,QAEjD,CAQO,SAASsM,GAAYnkB,GAAuB,IAApB4X,EAAS5X,EAAT4X,UAAW71B,EAAKie,EAALje,MACtC,GAAIA,aAAiBmd,EACjBoZ,GAAoBv2B,EAAO61B,QAI/B,OAAOA,GACH,KAAK3a,EAAUnN,kBAAkBK,aAC7BgoB,GAAclb,EAAUjK,kBAAkBQ,eAAgBzR,EAAOkb,EAAUnN,kBAAkBK,cAC7F,MACJ,KAAK8M,EAAUnN,kBAAkBM,cAC7B+nB,GAAclb,EAAUjK,kBAAkBS,gBAAiB1R,EAAOkb,EAAUnN,kBAAkBM,eAC9F,MACJ,KAAK6M,EAAUlM,iBAAiBE,aAC5BknB,GAAclb,EAAUpJ,iBAAiBoB,uBAAwBlT,EAAOkb,EAAUlM,iBAAiBE,cACnG,MACJ,KAAKgM,EAAUlM,iBAAiBC,oBAC5BmnB,GAAclb,EAAUpJ,iBAAiBoB,uBAAwBlT,EAAOkb,EAAUlM,iBAAiBC,qBACnG,MACJ,KAAKiM,EAAUlM,iBAAiBG,eAC5BinB,GAAclb,EAAUpJ,iBAAiBoB,uBAAwBlT,EAAOkb,EAAUlM,iBAAiBG,gBACnG,MACJ,KAAK+L,EAAUlM,iBAAiB0B,OAC5B0lB,GAAclb,EAAUpJ,iBAAiBE,qBAAsBhS,EAAOkb,EAAUlM,iBAAiB0B,QACjG,MACJ,KAAKwK,EAAUlM,iBAAiBQ,kBAC5B4mB,GAAcf,GAAar1B,KAAWkb,EAAUpJ,iBAAiBU,oBAAsB0I,EAAUpJ,iBAAiBU,oBAAsB0I,EAAUpJ,iBAAiBkB,wBAAyBhT,EAAOkb,EAAUlM,iBAAiBQ,mBAC9N,MACJ,KAAK0L,EAAUlM,iBAAiBS,sBAC5B2mB,GAAclb,EAAUpJ,iBAAiBmB,4BAA6BjT,EAAOkb,EAAUlM,iBAAiBS,uBACxG,MACJ,KAAKyL,EAAUlM,iBAAiBU,oBAC5B0mB,GAAclb,EAAUpJ,iBAAiBiB,2BAA4B/S,EAAOkb,EAAUlM,iBAAiBU,qBACvG,MACJ,KAAKwL,EAAUlM,iBAAiBK,YAC5B+mB,GAAclb,EAAUpJ,iBAAiBO,oBAAqBrS,EAAOkb,EAAUlM,iBAAiBK,aAChG,MACJ,KAAK6L,EAAUlM,iBAAiBM,YAC5B8mB,GAAcf,GAAar1B,KAAWkb,EAAUpJ,iBAAiBU,oBAAsB0I,EAAUpJ,iBAAiBU,oBAAsB0I,EAAUpJ,iBAAiBQ,oBAAqBtS,EAAOkb,EAAUlM,iBAAiBM,aAC1N,MACJ,KAAK4L,EAAUlM,iBAAiBW,iBAC5BymB,GAAclb,EAAUpJ,iBAAiBS,sBAAuBvS,EAAOkb,EAAUlM,iBAAiBW,kBAClG,MACJ,KAAKuL,EAAUlM,iBAAiBY,qBAC5BwmB,GAAclb,EAAUpJ,iBAAiBa,0BAA2B3S,EAAOkb,EAAUlM,iBAAiBY,sBACtG,MACJ,KAAKsL,EAAUlM,iBAAiBa,yBAC5BumB,GAAclb,EAAUpJ,iBAAiBc,mBAAoB5S,EAAOkb,EAAUlM,iBAAiBa,0BAC/F,MACJ,KAAKqL,EAAUlM,iBAAiByB,YAC5B2lB,GAAclb,EAAUpJ,iBAAiBrB,YAAazQ,EAAOkb,EAAUlM,iBAAiByB,aACxF,MACJ,KAAKyK,EAAUlM,iBAAiB2B,gBAC5B,OAAO0kB,GAAar1B,IAChB,KAAKkb,EAAUpJ,iBAAiBgC,oBAChC,KAAKoH,EAAUpJ,iBAAiB+B,sBAChC,KAAKqH,EAAUpJ,iBAAiBiC,gBAChC,KAAKmH,EAAUpJ,iBAAiBkC,aAC5BoiB,GAAcf,GAAar1B,GAAQA,EAAOkb,EAAUlM,iBAAiB2B,iBACrE,MACJ,QACIylB,GAAclb,EAAUjK,kBAAkBE,cAAenR,EAAOkb,EAAUlM,iBAAiB2B,iBAEnG,MACJ,KAAKuK,EAAUlM,iBAAiB8B,aAC5BslB,GAAclb,EAAUpJ,iBAAiBoC,oBAAqBlU,EAAOkb,EAAUlM,iBAAiB8B,cAChG,MACJ,QACIwlB,QAAQt2B,MAAM,2CAA4CM,WAEtE,CAwBO,SAAes8B,GAAYyF,GAAA,OAAAC,GAAA/hC,MAAC,KAADD,UAAA,CAkTjC,SAAAgiC,KAAA,OAAAA,GAAA1L,IAAAC,IAAAA,MAlTM,SAAA0L,EAAAlkB,GAAA,IAAAwX,EAAAjG,EAAA4S,EAAAvM,EAAAgB,EAAAoB,EAAAnT,EAAAN,EAAAC,EAAAC,EAAAC,EAAAC,EAAAyd,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA9/B,EAAA+/B,EAAA1L,EAAArY,EAAAyH,EAAAC,EAAAJ,EAAArC,EAAAE,EAAAE,EAAAE,EAAAE,EAAAue,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1c,EAAA2c,EAAAC,EAAAC,EAAA5S,EAAA,OAAAiG,IAAAA,MAAA,SAAA4M,GAAA,cAAAA,EAAA75B,KAAA65B,EAAA37B,MAAA,OAA8B+tB,EAASxX,EAATwX,UAAWjG,EAAOvR,EAAPuR,QAAO4S,EAAAnkB,EAAE4X,YAAAA,OAAW,IAAAuM,GAAOA,EAAAiB,EAAAzL,GAChEnC,EAAS4N,EAAA37B,KAAA27B,EAAAzL,KACP9c,EAAUnN,kBAAkBK,aAAY,EAAAq1B,EAAAzL,KASxC9c,EAAUnN,kBAAkBM,cAAa,EAAAo1B,EAAAzL,KAQzC9c,EAAUlM,iBAAiBE,aAAY,EAAAu0B,EAAAzL,KAKvC9c,EAAUlM,iBAAiBC,oBAAmB,GAAAw0B,EAAAzL,KAK9C9c,EAAUlM,iBAAiBG,eAAc,GAAAs0B,EAAAzL,KAezC9c,EAAUlM,iBAAiB0B,OAAM,GAAA+yB,EAAAzL,KAMjC9c,EAAUlM,iBAAiBQ,kBAAiB,GAAAi0B,EAAAzL,KAc5C9c,EAAUlM,iBAAiBS,sBAAqB,GAAAg0B,EAAAzL,KAchD9c,EAAUlM,iBAAiBU,oBAAmB,GAAA+zB,EAAAzL,KA6B9C9c,EAAUnN,kBAAkB5B,QAAO,GAAAs3B,EAAAzL,KAInC9c,EAAUlM,iBAAiBuB,wBAAuB,GAAAkzB,EAAAzL,KAGlD9c,EAAUlM,iBAAiBsB,cAAa,GAAAmzB,EAAAzL,KAIxC9c,EAAUnN,kBAAkBW,kBAAiB,GAAA+0B,EAAAzL,KAG7C9c,EAAUlM,iBAAiBK,YAAW,GAAAo0B,EAAAzL,KAKtC9c,EAAUlM,iBAAiBM,YAAW,GAAAm0B,EAAAzL,KAWtC9c,EAAUlM,iBAAiBW,iBAAgB,GAAA8zB,EAAAzL,KAkB3C9c,EAAUlM,iBAAiBY,qBAAoB,GAAA6zB,EAAAzL,KAW/C9c,EAAUlM,iBAAiBa,yBAAwB,GAAA4zB,EAAAzL,KAanD9c,EAAUlM,iBAAiB8B,aAAY,GAAA2yB,EAAAzL,KAOvC9c,EAAUlM,iBAAiBe,mBAAkB,GAAA0zB,EAAAzL,KAqB7C9c,EAAUlM,iBAAiBiB,qBAAoB,GAAAwzB,EAAAzL,KAO/C9c,EAAUlM,iBAAiBqB,eAAc,GAAAozB,EAAAzL,KAOzC9c,EAAUlM,iBAAiBkB,wBAAuB,GAAAuzB,EAAAzL,KAQlD9c,EAAUlM,iBAAiBmB,0BAAyB,GAAAszB,EAAAzL,KAQpD9c,EAAUlM,iBAAiBoB,kBAAiB,GAAAqzB,EAAAzL,KAQ5C9c,EAAUnN,kBAAkB/B,iBAAgB,GAAAy3B,EAAAzL,KAQ5C9c,EAAUlM,iBAAiB4B,mBAAkB,GAAA6yB,EAAAzL,KAK7C9c,EAAUnN,kBAAkBa,sBAAqB,GAAA60B,EAAAzL,KAejD9c,EAAUnN,kBAAkBe,gCAA+B,GAAA20B,EAAAzL,KAM3D9c,EAAUnN,kBAAkBgB,8BAA6B,GAAA00B,EAAAzL,KAUzD9c,EAAUnN,kBAAkB9B,iBAAgB,GAAAw3B,EAAAzL,KAU5C9c,EAAUnN,kBAAkBU,aAAY,mBAnSxC,OALGqzB,GAAgBlS,EAAS3H,GAAe/M,EAAUjK,kBAAkBQ,eAAgByJ,EAAUnN,kBAAkBK,gBAChH4nB,GAAc9a,EAAUnN,kBAAkBK,aAAcwhB,EAASqG,GAC7DrG,EAAQ9I,SACR4P,MAEP+M,EAAAn9B,OAAA,mBASA,OALGw7B,GAAgBlS,EAASjH,GAAczN,EAAUjK,kBAAkBS,gBAAiBwJ,EAAUnN,kBAAkBM,gBAChH2nB,GAAc9a,EAAUnN,kBAAkBM,cAAe,CACrDyY,QAAS8I,EAAQ9I,QACjBQ,iBAAkBsI,EAAQtI,kBAC3B2O,GACNwN,EAAAn9B,OAAA,mBAKA,OAFGw7B,GAAgBlS,EAAS1J,GAAYhL,EAAUpJ,iBAAiBoB,uBAAwBgI,EAAUlM,iBAAiBE,eACnH8mB,GAAc9a,EAAUlM,iBAAiBE,aAAc0gB,EAAQ5sB,MAAM,GACxEygC,EAAAn9B,OAAA,oBAKA,OAFGw7B,GAAgBlS,EAAS1J,GAAYhL,EAAUpJ,iBAAiBoB,uBAAwBgI,EAAUlM,iBAAiBC,sBACnH+mB,GAAc9a,EAAUlM,iBAAiBC,oBAAqB2gB,EAAQ5sB,MAAM,GAC/EygC,EAAAn9B,OAAA,wBAGGw7B,GAAgBlS,EAAS1J,GAAYhL,EAAUpJ,iBAAiBoB,uBAAwBgI,EAAUlM,iBAAiBG,gBAAiB,CAAFs0B,EAAA37B,KAAA,SACjH,GAAjBstB,MACIpY,EAAuB,CAAFymB,EAAA37B,KAAA,gBAAA27B,EAAA37B,KAAA,GACYiV,EAAgBwa,wBAAuB,QAAhD,OAAlBN,EAAkBwM,EAAAt9B,KAAAs9B,EAAA37B,KAAG,GACCmvB,EAAmBiF,uBAAsB,QAIqD,OAJpH7D,EAAaoL,EAAAt9B,KACnB2X,GAAUoB,oBAAoBmZ,EAAevF,IAC7C9V,GAAwB,EACxBgZ,GAAc9a,EAAUlM,iBAAiBoB,kBAAmBioB,GAAe,GAC3ErC,GAAc9a,EAAUlM,iBAAiBG,eAAgBygB,EAAQ5sB,MAAM,GAAmDygC,EAAAn9B,OAAA,oBAG9H0vB,GAAc9a,EAAUlM,iBAAiBG,eAAgBygB,EAAQ5sB,MAAM,GAAmD,eAAAygC,EAAAn9B,OAAA,oBAM7H,OAFGw7B,GAAgBlS,EAASxJ,GAAclL,EAAUpJ,iBAAiBE,qBAAsBkJ,EAAUlM,iBAAiB0B,SACnHslB,GAAc9a,EAAUlM,iBAAiB0B,OAAQkf,EAAQtJ,OAAO,GACnEmd,EAAAn9B,OAAA,oBAcA,OAVGw7B,GAAgBlS,EAASlL,EAAmBxJ,EAAUpJ,iBAAiBkB,wBAAyBkI,EAAUlM,iBAAiBQ,qBACnH0V,EAAgF0K,EAAhF1K,QAASN,EAAuEgL,EAAvEhL,oBAAqBC,EAAkD+K,EAAlD/K,SAAUC,EAAwC8K,EAAxC9K,eAAgBC,EAAwB6K,EAAxB7K,YAAaC,EAAW4K,EAAX5K,OAC7EgR,GAAc9a,EAAUlM,iBAAiBQ,kBAAmB,CACxD0V,QAAAA,EACAN,oBAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAC,YAAAA,EACAC,OAAAA,IACD,IACNye,EAAAn9B,OAAA,oBAcA,OAVGw7B,GAAgBlS,EAASlL,EAAmBxJ,EAAUpJ,iBAAiBmB,4BAA6BiI,EAAUlM,iBAAiBS,yBACvHmV,EAAgFgL,EAAhFhL,oBAAqBC,EAA2D+K,EAA3D/K,SAAUC,EAAiD8K,EAAjD9K,eAAgBC,EAAiC6K,EAAjC7K,YAAaC,EAAoB4K,EAApB5K,OAAQE,EAAY0K,EAAZ1K,QAC5E8Q,GAAc9a,EAAUlM,iBAAiBS,sBAAuB,CAC5DmV,oBAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAC,YAAAA,EACAC,OAAAA,EACAE,QAAAA,IACD,IACNue,EAAAn9B,OAAA,wBAOGw7B,GAAgBlS,EAAS1J,GAAYhL,EAAUpJ,iBAAiBiB,2BAA4BmI,EAAUlM,iBAAiBU,qBAAsB,CAAF+zB,EAAA37B,KAAA,SAC/H,OAAJ9E,EAAS4sB,EAAT5sB,KAAIygC,EAAA37B,KAAA,GACqBiV,EAAgBwa,wBAAuB,QAAhD,OAAlBN,EAAkBwM,EAAAt9B,KAAAs9B,EAAA37B,KAAG,GACKmvB,EAAmBU,iBAAgB,QAC/DmK,GADEzK,EAAiBoM,EAAAt9B,KACgB0Y,KAGR,KADrBG,EAAcqY,EAAkBrY,aACtBnd,OACZm0B,GAAc9a,EAAUlM,iBAAiB0B,OAAQ1N,GAAM,GAChDA,GAAQA,EAAK8hB,gBAAkB9hB,EAAK8hB,eAAe6I,kBAAoBzS,EAAU3G,iBAAiBE,eAIzGuhB,GAFqB9zB,OAAO+E,OAAO+X,GAAa8P,QAAO,SAACxsB,GAAG,OAAKA,EAAc,WAAM4Y,EAAUtG,UAAUzH,eAAe,IAAEzD,MAC9FlE,QAAU0V,EAAUrD,WAAWG,aAAekD,EAAUlM,iBAAiBQ,kBAAoB0L,EAAUlM,iBAAiBS,sBAC9H,CACjBmV,qBAAsB,IACvB,GAEHoR,GAAc9a,EAAUlM,iBAAiBU,oBAAqB,CAC1DsV,OAAShiB,EAAMA,EAAKgiB,OAAS,KAAMuJ,OAAQvrB,EAAMA,EAAKurB,OAAS,OAChE,IAEV,eAAAkV,EAAAn9B,OAAA,oBAKoE,OAAzE0vB,GAAc9a,EAAUnN,kBAAkB5B,QAASyjB,EAASqG,GAAawN,EAAAn9B,OAAA,oBAIe,OAAxF0vB,GAAc9a,EAAUlM,iBAAiBuB,wBAAyBqf,EAASqG,GAAawN,EAAAn9B,OAAA,oBAGV,OAA9E0vB,GAAc9a,EAAUlM,iBAAiBsB,cAAesf,EAASqG,GAAawN,EAAAn9B,OAAA,oBAI/C,OAA/B2xB,GAAsBrI,GAAS6T,EAAAn9B,OAAA,oBAK9B,OAFGw7B,GAAgBlS,EAASnR,EAAkBvD,EAAUpJ,iBAAiBO,oBAAqB6I,EAAUlM,iBAAiBK,cACtH2mB,GAAc9a,EAAUlM,iBAAiBK,YAAaugB,EAASqG,GAClEwN,EAAAn9B,OAAA,oBAUA,OAPOmgB,EAA+CmJ,EAA/CnJ,mBAAoBC,EAA2BkJ,EAA3BlJ,iBAAkBJ,EAASsJ,EAATtJ,MAC1Cwb,GAAgBlS,EAASrJ,GAAkBrL,EAAUpJ,iBAAiBQ,oBAAqB4I,EAAUlM,iBAAiBM,cACtH0mB,GAAc9a,EAAUlM,iBAAiBM,YAAa,CAClDmX,mBAAAA,EACAC,iBAAAA,EACAJ,MAAAA,GACD2P,GACNwN,EAAAn9B,OAAA,oBAkBA,OAdO2d,EAKJ2L,EALI3L,kBACJE,EAIAyL,EAJAzL,UACAE,EAGAuL,EAHAvL,iBACAE,EAEAqL,EAFArL,WACAE,EACAmL,EADAnL,OAEAqd,GAAgBlS,EAAS7L,EAAuB7I,EAAUpJ,iBAAiBS,sBAAuB2I,EAAUlM,iBAAiBW,mBAC7HqmB,GAAc9a,EAAUlM,iBAAiBW,iBAAkB,CACvDsU,kBAAAA,EACAE,UAAAA,EACAE,iBAAAA,EACAE,WAAAA,EACAE,OAAAA,GACDwR,GACNwN,EAAAn9B,OAAA,oBAWA,OAPGw7B,GAAgBlS,EAASrJ,GAAkBrL,EAAUpJ,iBAAiBa,0BAA2BuI,EAAUlM,iBAAiBY,wBACpH6W,EAAgDmJ,EAAhDnJ,mBAAoBC,EAA4BkJ,EAA5BlJ,iBAAkBJ,EAAUsJ,EAAVtJ,MAC9C0P,GAAc9a,EAAUlM,iBAAiBM,YAAa,CAClDmX,mBAAAA,EACAC,iBAAAA,EACAJ,MAAAA,IACD,IACNmd,EAAAn9B,OAAA,oBAYA,OARGw7B,GAAgBlS,EAASrJ,GAAkBrL,EAAUpJ,iBAAiBc,mBAAoBsI,EAAUlM,iBAAiBa,4BAC7G4W,EAA8DmJ,EAA9DnJ,mBAAoBC,EAA0CkJ,EAA1ClJ,iBAAkBJ,EAAwBsJ,EAAxBtJ,MAAQK,EAAgBiJ,EAAhBjJ,aACtDqP,GAAc9a,EAAUlM,iBAAiBM,YAAa,CAClDmX,mBAAAA,EACAC,iBAAAA,EACAC,aAAAA,EACAL,MAAAA,IACD,IACNmd,EAAAn9B,OAAA,oBAOA,OAFGw7B,GAAgBlS,EAAS1J,GAAYhL,EAAUpJ,iBAAiBoC,oBAAqBgH,EAAUlM,iBAAiB8B,eAChHklB,GAAc9a,EAAUlM,iBAAiB8B,aAAc8e,EAASqG,GACnEwN,EAAAn9B,OAAA,oBAqBA,OAhBGw7B,GAAgBlS,EAASgC,MACrBhC,EAAQkC,QDllCK4R,ECmlCI9T,EAAQkC,MDllCrCjV,GACA6mB,EAAWt8B,SAAQ,SAAC0qB,GACZA,EAAMK,oBACNtV,EAAYsV,kBAAkBQ,aAC9B9V,EAAYsV,kBAAkBI,cAAuD,EAAvCT,EAAMK,kBAAkBI,aACtE1V,EAAYsV,kBAAkBK,aAAqD,EAAtCV,EAAMK,kBAAkBK,YACrE3V,EAAYsV,kBAAkBM,oBAAmE,EAA7CX,EAAMK,kBAAkBM,mBAC5E5V,EAAYsV,kBAAkBO,qBAAqE,EAA9CZ,EAAMK,kBAAkBO,qBAE7EZ,EAAMM,qBACNvV,EAAYuV,mBAAmBO,aAC/B9V,EAAYuV,mBAAmBG,cAAwD,EAAxCT,EAAMM,mBAAmBG,aACxE1V,EAAYuV,mBAAmBI,aAAsD,EAAvCV,EAAMM,mBAAmBI,YACvE3V,EAAYuV,mBAAmBK,oBAAoE,EAA9CX,EAAMM,mBAAmBK,mBAC9E5V,EAAYuV,mBAAmBM,qBAAsE,EAA/CZ,EAAMM,mBAAmBM,oBAEvF,ICqkCgB4Q,EADA1T,EAAQ5K,OACK,CAAC8M,MAAOlC,EAAQkC,MAAO9M,OAAQ4K,EAAQ5K,QAEvC,CAAC8M,MAAOlC,EAAQkC,OAEjCkE,GAAc9a,EAAUlM,iBAAiB6B,YAAa,CAACyyB,WAAAA,GAAarN,IAEpErG,EAAQmC,uBAAyBnC,EAAQ5K,SACnCA,EAAS4K,EAAQ5K,OACjBwe,EAAMzO,KACZiB,GAAc9a,EAAUlM,iBAAiBgB,6BAA8B,CAACgV,OAAAA,EAAQwe,IAAAA,GAAMvN,KAE7FwN,EAAAn9B,OAAA,oBAOA,OAFGw7B,GAAgBlS,EAASgD,GAAqB1X,EAAUpJ,iBAAiB6B,4BAA6BuH,EAAUlM,iBAAiBiB,uBACjI+lB,GAAc9a,EAAUlM,iBAAiBiB,qBAAsB2f,EAAQ5sB,MAAM,GAChFygC,EAAAn9B,OAAA,oBAOA,OAFGw7B,GAAgBlS,EAAS0B,GAAqBpW,EAAUjK,kBAAkBE,cAAe+J,EAAUlM,iBAAiBqB,iBACpH2lB,GAAc9a,EAAUlM,iBAAiBqB,eAAgBuf,GAAS,GACrE6T,EAAAn9B,OAAA,oBAQA,OAHGw7B,GAAgBlS,EAASgD,GAAsB1X,EAAUpJ,iBAAiB2B,uBAAwByH,EAAUlM,iBAAiBkB,2BAC7H8M,GAAwB,EACxBgZ,GAAc9a,EAAUlM,iBAAiBkB,wBAAyB0f,EAAQ5sB,MAAM,IACnFygC,EAAAn9B,OAAA,oBAQA,OAHGw7B,GAAgBlS,EAASgD,GAAsB1X,EAAUpJ,iBAAiB2B,uBAAwByH,EAAUlM,iBAAiBmB,6BAC7H6M,GAAwB,EACxBgZ,GAAc9a,EAAUlM,iBAAiBmB,0BAA2Byf,EAAQ5sB,MAAM,IACrFygC,EAAAn9B,OAAA,oBAQA,OAHGw7B,GAAgBlS,EAASkD,GAAyB5X,EAAUpJ,iBAAiB4B,8BAA+BwH,EAAUlM,iBAAiBoB,qBACvI4M,GAAwB,EACxBgZ,GAAc9a,EAAUlM,iBAAiBoB,kBAAmBwf,EAAQtJ,OAAO,IAC9Emd,EAAAn9B,OAAA,oBAQA,OAHGw7B,GAAgBlS,EAASc,GAAkBxV,EAAUjK,kBAAkBM,yBAA0B2J,EAAUnN,kBAAkB/B,oBACvH4kB,EAAWhB,EAAQgB,SACzBoF,GAAc9a,EAAUnN,kBAAkB/B,iBAAkB,CAAE4kB,SAAAA,GAAYqF,IAC7EwN,EAAAn9B,OAAA,oBAKqE,OAAtE0vB,GAAc9a,EAAUlM,iBAAiB4B,mBAAoBgf,GAAS6T,EAAAn9B,OAAA,oBAgBrE,OAXEw7B,GAAgBlS,EAASsD,GAAyBhY,EAAUjK,kBAAkBW,8BAA+BsJ,EAAUnN,kBAAkBa,yBACxIonB,GAAc9a,EAAUnN,kBAAkBa,sBAAuBghB,GAC9DA,EAAQ9I,UACH8I,EAAQxI,UACR4O,GAAc9a,EAAUnN,kBAAkBO,WAAY,CAClDgZ,iBAAkBsI,EAAQtI,kBAC3B2O,GAEHS,OAGX+M,EAAAn9B,OAAA,oBAMA,OAFGw7B,GAAgBlS,EAAS0E,GAASpZ,EAAUjK,kBAAkBY,iBAAkBqJ,EAAUnN,kBAAkBe,kCAC5GknB,GAAc9a,EAAUnN,kBAAkBe,gCAAiC8gB,EAASqG,GACvFwN,EAAAn9B,OAAA,oBAMA,OAFGw7B,GAAgBlS,EAAS0E,GAASpZ,EAAUjK,kBAAkBY,iBAAkBqJ,EAAUnN,kBAAkBgB,gCAC5GinB,GAAc9a,EAAUnN,kBAAkBgB,8BAA+B6gB,EAASqG,GACrFwN,EAAAn9B,OAAA,oBAUA,OAFGw7B,GAAgBlS,EAASmB,GAAuB7V,EAAUjK,kBAAkBK,yBAA0B4J,EAAUnN,kBAAkB9B,mBAClI+pB,GAAc9a,EAAUnN,kBAAkB9B,iBAAkB2jB,EAASqG,GACxEwN,EAAAn9B,OAAA,oBAUA,OAFEw7B,GAAgBlS,EAASsB,GAAmBhW,EAAUjK,kBAAkBU,4BAA6BuJ,EAAUnN,kBAAkBU,eAChIunB,GAAc9a,EAAUnN,kBAAkBU,aAAcmhB,GAC3D6T,EAAAn9B,OAAA,qCAAAm9B,EAAA15B,ODpsCN,IAA0B25B,CCosCpB,GAAAnB,EAAA,MAIZhiC,MAAA,KAAAD,UAAA,C","sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/construct.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/isNativeFunction.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/wrapNativeSuper.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/./node_modules/regenerator-runtime/runtime.js","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/webpack/runtime/compat get default export","webpack://SCVConnectorBase/webpack/runtime/define property getters","webpack://SCVConnectorBase/webpack/runtime/hasOwnProperty shorthand","webpack://SCVConnectorBase/webpack/runtime/make namespace object","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, () => {\nreturn ","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeFunction = require(\"./isNativeFunction\");\n\nvar construct = require(\"./construct\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    SHARED_MESSAGE_TYPE: {\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        AGENT_WORK_EVENT: 'AGENT_WORK_EVENT',\n        GET_CONTACTS: 'GET_CONTACTS'\n    },\n    VOICE_MESSAGE_TYPE: {\n        ACCEPT_CALL: 'ACCEPT_CALL',\n        DECLINE_CALL: 'DECLINE_CALL',\n        END_CALL: 'END_CALL',\n        MUTE: 'MUTE',\n        UNMUTE: 'UNMUTE',\n        HOLD: 'HOLD',\n        RESUME: 'RESUME',\n        DIAL: 'DIAL',\n        SEND_DIGITS: 'SEND_DIGITS',\n        GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n        SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n        ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n        CONFERENCE: 'CONFERENCE',\n        PAUSE_RECORDING: 'PAUSE_RECORDING',\n        RESUME_RECORDING: 'RESUME_RECORDING',\n        SUPERVISE_CALL: 'SUPERVISE_CALL',\n        SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n        SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT',\n        SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n        GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n        WRAP_UP_CALL: 'WRAP_UP_CALL',\n        AGENT_AVAILABLE: 'AGENT_AVAILABLE',\n        GET_AUDIO_DEVICES: 'GET_AUDIO_DEVICES'\n    },\n    SHARED_EVENT_TYPE: {\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        MESSAGE: 'MESSAGE',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE',\n        REMOTE_CONTROLLER: 'REMOTE_CONTROLLER',\n        SHOW_STORAGE_ACCESS: 'SHOW_STORAGE_ACCESS',\n        STORAGE_ACCESS_RESULT: 'STORAGE_ACCESS_RESULT',\n        GET_CONTACTS_RESULT: 'GET_CONTACTS_RESULT',\n        AFTER_CONVERSATION_WORK_STARTED: 'AFTER_CONVERSATION_WORK_STARTED',\n        AFTER_CONVERSATION_WORK_ENDED: 'AFTER_CONVERSATION_WORK_ENDED'\n    },\n    VOICE_EVENT_TYPE: {\n        QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n        CALL_STARTED: 'CALL_STARTED',\n        CALL_CONNECTED: 'CALL_CONNECTED',\n        CALL_FAILED: 'CALL_FAILED',\n        MUTE_TOGGLE: 'MUTE_TOGGLE',\n        HOLD_TOGGLE: 'HOLD_TOGGLE',\n        PHONE_CONTACTS: 'PHONE_CONTACTS',\n        PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n        PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n        PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n        RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n        PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n        PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n        UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n        SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n        SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n        SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n        SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n        CALL_BARGED_IN : 'CALL_BARGED_IN',\n        WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n        AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n        AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n        AGENT_ERROR: 'AGENT_ERROR',\n        HANGUP: 'HANGUP',\n        SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n        SHOW_TRANSFER_VIEW: 'SHOW_TRANSFER_VIEW',\n        GET_AUDIO_DEVICES: 'GET_AUDIO_DEVICES',\n        AUDIO_STATS: 'AUDIO_STATS',\n        CALL_UPDATED: 'CALL_UPDATED' //sent during a call to update call controls\n    },\n    INFO_TYPE: {\n        CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n    },\n    SHARED_ERROR_TYPE: {\n        CUSTOM_ERROR: 'CUSTOM_ERROR',\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT',\n        INVALID_STORAGE_ACCESS_RESULT: 'INVALID_STORAGE_ACCESS_RESULT',\n        INVALID_ACW_INFO: 'INVALID_ACW_INFO'\n    },\n    VOICE_ERROR_TYPE: {\n        CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n        CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n        CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n        CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n        CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n        CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n        CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n        CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n        CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n        INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n        INVALID_PARAMS: 'INVALID_PARAMS',\n        CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n        CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n        CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n        INVALID_DESTINATION: 'INVALID_DESTINATION',\n        INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n        CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n        CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n        CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n        CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n        CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n        CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n        CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n        CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n        CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n        CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n        CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n        CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n        CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n        CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n        AGENT_ERROR: 'AGENT_ERROR',\n        MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n        UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER',\n        USER_BUSY_ERROR: 'USER_BUSY_ERROR',\n        WEBRTC_ERROR: 'WEBRTC_ERROR',\n        CAN_NOT_GET_AUDIO_DEVICES: 'CAN_NOT_GET_AUDIO_DEVICES',\n        CAN_NOT_UPDATE_CALL: 'CAN_NOT_UPDATE_CALL'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork'\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer',\n        INTERNAL_CALL: 'InternalCall',\n        DIALED_CALLBACK: 'DialedCallback',\n        CONSULT: 'Consult'\n    },\n    CALL_SUBTYPE: {\n        PSTN: 'PSTN',\n        WEB_RTC: 'WebRTC'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    CONTACT_LIST_TYPE: {\n        TRANSFER: 'Transfer',\n        CONFERENCE: 'Conference',\n        ALL: 'All'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    SHARED_CAPABILITIES_TYPE: {\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        VENDOR_PROVIDED_QUEUE_WAIT_TIME: 'VENDOR_PROVIDED_QUEUE_WAIT_TIME',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE',\n        SFDC_PENDING_STATE: 'SFDC_PENDING_STATE',\n        AUTO_ACCEPT_ENABLED:'AUTO_ACCEPT_ENABLED'\n    },\n    VOICE_CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        PHONEBOOK: 'PHONEBOOK',\n        HAS_GET_EXTERNAL_SPEAKER: 'HAS_GET_EXTERNAL_SPEAKER',\n        HAS_SET_EXTERNAL_SPEAKER: 'HAS_SET_EXTERNAL_SPEAKER',\n        HAS_GET_EXTERNAL_MICROPHONE: 'HAS_GET_EXTERNAL_MICROPHONE',\n        HAS_SET_EXTERNAL_MICROPHONE: 'HAS_SET_EXTERNAL_MICROPHONE',\n        CAN_CONSULT: 'CAN_CONSULT',\n        DIAL_PAD: 'DIAL_PAD',\n        HAS_HID_SUPPORT: 'HAS_HID_SUPPORT',\n        PHONEBOOK_DISABLE: 'PHONEBOOK_DISABLE'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        AGENT: \"AGENT\",\n        QUEUE: \"QUEUE\",\n        CONTACT: \"CONTACT\",\n        DIRECTORY: \"DIRECTORY\",\n        FLOW: \"FLOW\",\n        AVAILABLE: \"AVAILABLE\"\n    },\n    WORK_EVENT: {\n        ASSIGNED: 'ASSIGNED',\n        ACCEPTED: 'ACCEPTED',\n        DECLINED: 'DECLINED',\n        COMPLETED: 'COMPLETED',\n        CLOSED: 'CLOSED',\n        PAUSED: 'PAUSED',\n        UNPAUSED: 'UNPAUSED'\n    },\n    DIAL_OPTIONS: {\n        CALLBACK: \"isCallback=true\",\n        CONSULT: \"isConsultCall\"\n    },\n    HANGUP_STATUS: {\n        MISSED_AGENT: \"MissedCallAgent\",\n        DECLINED: \"DeclinedByAgent\",\n        FAILED_CONNECT_AGENT: \"FailedConnectAgent\",\n        FAILED_CONNECT_CUSTOMER: \"FailedConnectCustomer\",\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n\n/**\n * Fields in the connector configuration that are NOT logged. \n */\nexport const CONNECTOR_CONFIG_EXCEPTION_FIELDS = [\n    \"/reqHvcc/reqTelephonyIntegrationCertificate\"\n];\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\n export function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    /**\n    * @enum {string}\n    */\n    SHARED_EVENT_TYPE: {\n        LOGIN_RESULT: constants.SHARED_EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.SHARED_EVENT_TYPE.LOGOUT_RESULT,\n        MESSAGE: constants.SHARED_EVENT_TYPE.MESSAGE,\n        SET_AGENT_STATUS: constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.SHARED_EVENT_TYPE.STATE_CHANGE,\n        STORAGE_ACCESS_RESULT: constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT,\n        GET_CONTACTS_RESULT: constants.SHARED_EVENT_TYPE.GET_CONTACTS_RESULT,\n        AFTER_CONVERSATION_WORK_STARTED: constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED,\n        AFTER_CONVERSATION_WORK_ENDED: constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED\n    },\n    /**\n    * @enum {string}\n    */\n    VOICE_EVENT_TYPE: {\n        CALL_STARTED: constants.VOICE_EVENT_TYPE.CALL_STARTED,\n        QUEUED_CALL_STARTED: constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED,\n        CALL_CONNECTED: constants.VOICE_EVENT_TYPE.CALL_CONNECTED,\n        HANGUP: constants.VOICE_EVENT_TYPE.HANGUP,\n        MUTE_TOGGLE: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE,\n        HOLD_TOGGLE: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE,\n        RECORDING_TOGGLE: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE,\n        PARTICIPANTS_SWAPPED: constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED,\n        PARTICIPANTS_CONFERENCED: constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED,\n        PARTICIPANT_ADDED: constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, \n        PARTICIPANT_CONNECTED: constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED,\n        PARTICIPANT_REMOVED: constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED,\n        AFTER_CALL_WORK_STARTED: constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED,\n        WRAP_UP_ENDED: constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED,\n        AGENT_ERROR: constants.VOICE_EVENT_TYPE.AGENT_ERROR,\n        SOFTPHONE_ERROR: constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR,\n        UPDATE_AUDIO_STATS: constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS,\n        CALL_BARGED_IN: constants.VOICE_EVENT_TYPE.CALL_BARGED_IN,\n        SUPERVISOR_BARGED_IN: constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN,\n        SUPERVISOR_CALL_STARTED : constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED,\n        SUPERVISOR_CALL_CONNECTED: constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED,\n        SUPERVISOR_HANGUP : constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP,\n        SHOW_TRANSFER_VIEW: constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW,\n        AUDIO_STATS: constants.VOICE_EVENT_TYPE.AUDIO_STATS,\n        CALL_UPDATED: constants.VOICE_EVENT_TYPE.CALL_UPDATED\n    },\n    /**\n    * @enum {string}\n    */\n    SHARED_ERROR_TYPE: {\n        GENERIC_ERROR: constants.SHARED_ERROR_TYPE.GENERIC_ERROR,\n        INVALID_AGENT_STATUS: constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS\n    },\n    /**\n    * @enum {string}\n    */\n    VOICE_ERROR_TYPE: {\n        INVALID_PARTICIPANT: constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT,\n        INVALID_DESTINATION: constants.VOICE_ERROR_TYPE.INVALID_DESTINATION,\n        CAN_NOT_UPDATE_PHONE_NUMBER: constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER,\n        INVALID_PARAMS: constants.VOICE_ERROR_TYPE.INVALID_PARAMS\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n     * @enum {string}\n     */\n    CALL_SUBTYPE: { ...constants.CALL_SUBTYPE },\n    /**\n     * @enum {string}\n     */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_LIST_TYPE: { ...constants.CONTACT_LIST_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n    REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES },\n    /**\n     * @enum {String}\n     */\n    WORK_EVENT: { ...constants.WORK_EVENT },\n    /**\n     * @enum {String}\n     */\n    HANGUP_STATUS: { ...constants.HANGUP_STATUS }\n};\n\n/**\n * Class representing a Custom Error\n */\nexport class CustomError extends Error {\n    /**\n     * Custom error\n     * @param {object} param\n     * @param {String} param.labelName\n     * @param {String} param.namespace\n     * @param {String} [param.message]\n     */\n    constructor({ labelName, namespace, message }) {\n        super(message);\n\n        Validator.validateString(labelName);\n        Validator.validateString(namespace);\n        if (message) {\n            Validator.validateString(message);\n        }\n        this.labelName = labelName;\n        this.namespace = namespace;\n        this.message = message;\n    }\n}\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing a Hid Device\n */\nexport class HidDevice {\n    /**\n     * Create Hid Device\n     * @param productId\n     * @param vendorId\n     */\n     constructor({ productId, vendorId }) {\n         if (productId) {\n             Validator.validateNumber(productId);\n         }\n         if (vendorId) {\n             Validator.validateNumber(vendorId);\n         }\n\n         this.productId = productId;\n         this.vendorId = vendorId;\n     }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create MuteToggleResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     * @param {PhoneCall} param.call\n     * @param {boolean} param.isGlobal\n     */\n    constructor({ isMuted, call, isGlobal }) {\n        this.isMuted = isMuted;\n        this.call = call;\n        this.isGlobal = isGlobal;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getAudioDevices()\n */\nexport class AudioDevicesResult {\n    /**\n     * Create AudioDevicesResult\n     * @param {object} param\n     * @param {AudioDevice[]} param.audioDevices\n     */\n    constructor({ audioDevices = [] }) {\n        this.audioDevices = audioDevices;\n    }\n}\n\n/**\n * Class representing result type for getSharedCapabilities()\n */\nexport class SharedCapabilitiesResult {\n    /**\n     * Create SharedCapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability, false if Salesforce provides it.\n     * @param {boolean} [param.hasQueueWaitTime] True if getPhoneContacts also provides estimated queue wait time, false if Salesforce provides it.\n     * @param {boolean} [param.hasTransferToOmniFlow] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     * @param {boolean} [param.hasSFDCPendingState] True if amazon connect has sfdc_pending state\n     * @param {boolean} [param.hasAutoAcceptEnabled] True if agent has enabled auto accept\n     */\n    constructor({\n        debugEnabled = true,\n        hasContactSearch = false,\n        hasAgentAvailability = false,\n        hasQueueWaitTime = false,\n        hasTransferToOmniFlow = false,\n        hasPendingStatusChange = false,\n        hasSFDCPendingState = false,\n        hasAutoAcceptEnabled = false\n    }){\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(hasQueueWaitTime);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n        Validator.validateBoolean(hasSFDCPendingState);\n        Validator.validateBoolean(hasAutoAcceptEnabled);\n\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.hasQueueWaitTime = hasQueueWaitTime;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n        this.hasSFDCPendingState = hasSFDCPendingState;\n        this.hasAutoAcceptEnabled = hasAutoAcceptEnabled;\n    }\n}\n\n/**\n * Class representing result type for getVoiceCapabilities()\n */\nexport class VoiceCapabilitiesResult {\n    /**\n     * Create VoiceCapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasPhoneBook] True if vendor supports the phoneBook UI\n     * @param {boolean} [param.hasGetExternalSpeakerDeviceSetting] True if vendor supports retrieving the speaker device ID\n     * @param {boolean} [param.hasSetExternalSpeakerDeviceSetting] True if vendor supports setting the speaker device ID\n     * @param {boolean} [param.hasGetExternalMicrophoneDeviceSetting] True if vendor supports retrieving the microphone device ID\n     * @param {boolean} [param.hasSetExternalMicrophoneDeviceSetting] True if vendor supports setting the microphone device ID\n     * @param {boolean} [param.canConsult] True if can consult\n     * @param {boolean} [param.isDialPadDisabled] True if dial pad is disabled\n     * @param {boolean} [param.isHidSupported] True if vendor supports hid or headset controllers\n     * @param {boolean} [param.isPhoneBookDisabled] True if phone book is disabled\n     */\n    constructor({\n        hasMute = true,\n        hasRecord = true,\n        hasMerge = true,\n        hasSwap = true,\n        hasBlindTransfer = false,\n        hasSignedRecordingUrl = false,\n        supportsMos = false,\n        hasSupervisorListenIn = false,\n        hasSupervisorBargeIn = false,\n        hasPhoneBook = false,\n        hasGetExternalSpeakerDeviceSetting = false,\n        hasSetExternalSpeakerDeviceSetting = false,\n        hasGetExternalMicrophoneDeviceSetting = false,\n        hasSetExternalMicrophoneDeviceSetting = false,\n        canConsult= false,\n        isDialPadDisabled = false,\n        isHidSupported = false,\n        isPhoneBookDisabled = false\n    }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasPhoneBook);\n        Validator.validateBoolean(hasGetExternalSpeakerDeviceSetting);\n        Validator.validateBoolean(hasSetExternalSpeakerDeviceSetting);\n        Validator.validateBoolean(hasGetExternalMicrophoneDeviceSetting);\n        Validator.validateBoolean(hasSetExternalMicrophoneDeviceSetting);\n        Validator.validateBoolean(canConsult);\n        Validator.validateBoolean(isDialPadDisabled);\n        Validator.validateBoolean(isHidSupported);\n        Validator.validateBoolean(isPhoneBookDisabled);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasPhoneBook = hasPhoneBook;\n        this.hasGetExternalSpeakerDeviceSetting = hasGetExternalSpeakerDeviceSetting;\n        this.hasSetExternalSpeakerDeviceSetting = hasSetExternalSpeakerDeviceSetting;\n        this.hasGetExternalMicrophoneDeviceSetting = hasGetExternalMicrophoneDeviceSetting;\n        this.hasSetExternalMicrophoneDeviceSetting = hasSetExternalMicrophoneDeviceSetting;\n        this.canConsult = canConsult;\n        this.isDialPadDisabled = isDialPadDisabled;\n        this.isHidSupported = isHidSupported;\n        this.isPhoneBookDisabled = isPhoneBookDisabled;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} param.phones\n     * @param {Phone} param.selectedPhone\n     * @param {string} param.speakerDeviceId\n     * @param {string} param.microphoneDeviceId\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}),\n                    speakerDeviceId = '', microphoneDeviceId = ''}) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n        Validator.validateString(speakerDeviceId);\n        Validator.validateString(microphoneDeviceId);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n        this.speakerDeviceId = speakerDeviceId;\n        this.microphoneDeviceId = microphoneDeviceId;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} param.selectedPhone\n     * @param {string} param.speakerDeviceId\n     * @param {string} param.microphoneDeviceId\n     * @param {HidDevice} param.hidDeviceInfo\n     */\n    constructor({ selectedPhone,speakerDeviceId, microphoneDeviceId, hidDeviceInfo }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        //Hid device info is optional\n        if (hidDeviceInfo !== undefined) {\n            Validator.validateClassObject(hidDeviceInfo, HidDevice);\n        }\n        this.selectedPhone = selectedPhone;\n        this.speakerDeviceId = speakerDeviceId;\n        this.microphoneDeviceId = microphoneDeviceId;\n        this.hidDeviceInfo = hidDeviceInfo;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     * @param {Contact} param.contact\n     */\n    constructor({ initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId, contact = null }) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.callAttributes = callAttributes;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n        this.contact = contact\n    }\n}\n\n/**\n * Class representing result type for getContacts()\n */\nexport class ContactsResult {\n     /**\n     * Create ContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n * NOTE: TO BE DEPRECATED, Use ContactsResult instead\n */\nexport class PhoneContactsResult extends ContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        super({ contacts, contactTypes });\n    }\n}\n\n\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     * @param {boolean} param.isCallMerged\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls , isCallMerged}) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n        this.isCallMerged = isCallMerged;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     * @param {boolean} [param.isSilentLogin]\n     * @param {boolean} [param.showStorageAccess]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350, isSilentLogin = false, showStorageAccess = false }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n        this.isSilentLogin = this.showLogin ? false : isSilentLogin;\n        this.showStorageAccess = showStorageAccess;\n    }\n}\n\n/**\n * Class representing dial options for outbound dialing \n */\nexport class DialOptions {\n    /**\n     * Create DialOptions\n     * @param {boolean} [param.isCallback]\n     * @param {boolean} [param.isConsultCall]\n     */\n    constructor({ isCallback = false, isConsultCall = false }) {\n        this.isCallback = isCallback;\n        this.isConsultCall = isConsultCall;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing result type for setAgentConfig()\n */\nexport class SetAgentConfigResult extends GenericResult {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     */\n    constructor({ success, isSystemEvent = false }) {\n        super({ success });\n        this.isSystemEvent = isSystemEvent;\n    }\n    \n    setIsSystemEvent(isSystemEvent) {\n        this.isSystemEvent = isSystemEvent;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {string} [param.queueName]\n     * @param {string} [param.queueId]\n     * @param {Date} [param.queueTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {boolean} [param.showMuteButton]\n     * @param {boolean} [param.showRecordButton]\n     * @param {boolean} [param.showAddCallerButton]\n     * @param {boolean} [param.showAddBlindTransferButton]\n     * @param {boolean} [param.showMergeButton]\n     * @param {boolean} [param.showSwapButton]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call.\n     * @param {String} [param.additionalFields] - Represents additional standard and custom fields in the voice call record, where each key-value pair value corresponds to a standard or custom field and its values.\n     * @param {boolean} [param.isMultiParty]\n     * @param {boolean} [param.isHIDCall]\n     * @param {boolean} [param.endCallDisabled]\n     * @param {string} [param.renderContactId]\n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, queueId = null, queueName = null, queueTimestamp = null, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        showMuteButton = true, showRecordButton = true, showAddCallerButton = true, showAddBlindTransferButton = true, showMergeButton = true,\n\n        showSwapButton = true, removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS, additionalFields = null, isMultiParty = false, isHIDCall = false, endCallDisabled = false, renderContactId = null }) {\n\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        if (queueTimestamp) {\n            Validator.validateDate(queueTimestamp);\n        }\n        if (queueId) {\n            Validator.validateString(queueId);\n        }\n        if (queueName) {\n            Validator.validateString(queueName);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        Validator.validateBoolean(showMuteButton);\n        Validator.validateBoolean(showRecordButton);\n        Validator.validateBoolean(showAddCallerButton);\n        Validator.validateBoolean(showAddBlindTransferButton);\n        Validator.validateBoolean(showMergeButton);\n        Validator.validateBoolean(showSwapButton);\n        Validator.validateBoolean(isHIDCall);\n        Validator.validateBoolean(endCallDisabled);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        if (additionalFields) {\n            Validator.validateString(additionalFields);\n        }\n        Validator.validateBoolean(isMultiParty);\n        if (renderContactId) {\n            Validator.validateString(renderContactId);\n        }\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.queueName = queueName;\n        this.queueId = queueId;\n        this.queueTimestamp = queueTimestamp;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n        this.showMuteButton = showMuteButton;\n        this.showRecordButton = showRecordButton;\n        this.showAddCallerButton = showAddCallerButton;\n        this.showAddBlindTransferButton = showAddBlindTransferButton;\n        this.showMergeButton = showMergeButton;\n        this.showSwapButton = showSwapButton;\n        this.additionalFields = additionalFields;\n        this.isMultiParty = isMultiParty;\n        this.isHIDCall = isHIDCall;\n        this.endCallDisabled = endCallDisabled;\n        this.renderContactId = renderContactId;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {(\"Transfer\"|\"Conference\"|\"All\")} [param.listType] - The type of contact List, one of the CONTACT_LIST_TYPE values. Messaging Only\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description\n     * @param {string} [param.queueWaitTime] - Estimated Queue Wait Time\n     */\n    constructor({phoneNumber, id, type, name, listType, prefix, extension, endpointARN, queue, availability, recordId, description, queueWaitTime}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (listType) {\n            Validator.validateEnum(listType, Object.values(Constants.CONTACT_LIST_TYPE));\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n        if (queueWaitTime) {\n            Validator.validateString(queueWaitTime);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.listType = listType;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.queueWaitTime = queueWaitTime;\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     * @param {boolean} [param.isAutoMergeOn] - for multiparty conference, the call cannot be put on hold, and is being auto-merged\n     * @param {boolean} [param.isConsultCall] - true if the call is a Consult call\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false, isAutoMergeOn = false, isConsultCall = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n        Validator.validateBoolean(isAutoMergeOn);\n        Validator.validateBoolean(isConsultCall);\n        \n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n        this.isAutoMergeOn = isAutoMergeOn;\n        this.isConsultCall = isConsultCall;\n    }\n}\n\n/** \n* Class representing a PhoneCall (PSTN or WebRTC).\n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {CALL_SUBTYPE} [param.callSubtype] - The subtype of the call, one of the CALL_SUBTYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact \n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     * @param {string} [param.agentARN]\n     */\n    constructor({callId, callType, callSubtype, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus, agentARN }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (callSubtype) {\n            Validator.validateEnum(callSubtype, Object.values(constants.CALL_SUBTYPE));\n            this.callSubtype = callSubtype;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        if (agentARN) {\n            this.agentARN = agentARN;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a TelephonyConnector\n*/\nexport class TelephonyConnector {\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @param {DialOptions} dialOptions\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact, dialOptions) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @param {ContactsFilter} filterType\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts(filter) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact: The transfer target\n     * @param {PhoneCall} parentCall: The call to which a participant will be added\n     * @param {Boolean} isBlindTransfer: True if blind transfering a call and hanging up upon transfer\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, parentCall, isBlindTransfer) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get voice capabilities\n     * @returns {Promise<VoiceCapabilitiesResult>}\n     */\n    getVoiceCapabilities() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervise a call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the call to be supervised\n     * @returns {Promise <SuperviseCallResult>}\n     */\n    superviseCall(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the supervised call to be disconnected\n     * @returns {Promise <SupervisorHangupResult>}\n     */\n    supervisorDisconnect(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the supervised call which supervisor barges in\n     * @returns {Promise <SuperviseCallResult>}\n     */\n    supervisorBargeIn(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Gets the telephonyConnector\n     * @returns {Promise<TelephonyConnector>} \n     * \n     */\n    getTelephonyConnector() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Sends non-voice agent work events to vendor such as work accepted, declined, etc\n     * @param {AgentWork} agentWork\n     * \n     */\n    onAgentWorkEvent(agentWork) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {Constants.AGENT_STATUS} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n\n    /**\n     * To get the Contacts for this workItem's transfer/other channel operation\n     * @param {ContactsFilter} filter It has fields like the search term  and contact Type\n     * @param {String} workItemId\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getContacts(filter, workItemId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Returns a list of valid device IDs that can be used for the speaker and microphone devices.\n     */\n    getAudioDevices() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get shared capabilities\n     * @returns {Promise<SharedCapabilitiesResult>}\n     */\n    getSharedCapabilities() {\n        throw new Error('Not implemented');\n    }\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n    \n    static validateClassObjects(object, ...classNames) {\n        let isValid = false;\n        for (let i = 0; i < classNames.length; i++) {\n            try {\n                this.validateClassObject(object, classNames[i]);\n                isValid = true;\n                break;\n            } catch(e) {\n                // continue on\n            }\n        }\n        if (!isValid) {\n            throw new Error(`Invalid className. Expecting object matching a class name in ${classNames} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n* Class representing an AgentWork\n*/\nexport class AgentWork {\n    /**\n     * Create an AgentWork.\n     * @param {object} param\n     * @param {string} [param.workItemId] - Salesforce agent work item Id\n     * @param {string} [param.workId] - Salesforce work Id\n     * @param {WORK_EVENT} [param.workEvent] - The work lifecycle event\n     */\n    constructor({ workItemId, workId, workEvent }) {\n        Validator.validateEnum(workEvent, Object.values(constants.WORK_EVENT));\n        this.workEvent = workEvent;\n        this.workItemId = workItemId;\n        this.workId = workId;\n    }\n }\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn}) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }\n\n/** \n * Class representing result type for STORAGE_ACCESS_RESULT\n * @param {object} param\n * @param {boolean} [param.success]\n * @param {boolean} [param.showLogin] \n * @param {number} [param.loginFrameHeight]\n */\nexport class ShowStorageAccessResult {\n    constructor({success= false, showLogin = false, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class used to filter contacts. Passed as a parameter to TelephonyConnector.getPhoneContacts\n * @param {object} param\n * @param {string} param.contains\n * @param {number} param.limit\n * @param {number} param.offset\n * @param {CONTACTS_FILTER_TYPES[]} param.types \n */ \nexport class ContactsFilter {\n    constructor(param) {\n        if (param) {\n            const {contains = null, limit = 50, offset = 0, types = []} = param;\n            if (contains) {\n                Validator.validateString(contains);\n            }\n            Validator.validateNumber(limit);\n            Validator.validateNumber(offset);\n            for (const type of types){\n                Validator.validateEnum(types, Object.values(constants.CONTACTS_FILTER_TYPES));\n            }\n            this.contains = contains;\n            this.limit = limit;\n            this.offset = offset;\n            this.types = types;\n        }\n    }\n}\n\n/**\n * Class used as a parameter to AFTER_CONVERSATION_WORK_STARTED and AFTER_CONVERSATION_WORK_ENDED\n */\nexport class ACWInfo {\n    /**\n     * @param {object} param\n     * @param {string} param.agentWorkId the id of the AgentWork\n     * @param {string} param.workItemId the id of the work item (voice call or messaging session)\n     */\n    constructor({agentWorkId, workItemId}) {\n        if (agentWorkId) {\n            Validator.validateString(agentWorkId);\n            this.agentWorkId = agentWorkId;\n        }\n        if (workItemId) {\n            Validator.validateString(workItemId);\n            this.workItemId = workItemId;\n        }\n        if (!agentWorkId && !workItemId) {\n            throw new Error('You must pass at least one of agent work id or work item (voice call or messaging session) id');\n        }\n    }\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH, CONNECTOR_CONFIG_EXCEPTION_FIELDS } from './constants.js';\nimport { Validator, GenericResult, InitResult, CallResult, HangupResult, HoldToggleResult, ContactsResult, PhoneContactsResult, MuteToggleResult,\n    ParticipantResult, RecordingToggleResult, AgentConfigResult, ActiveCallsResult, SignedRecordingUrlResult, LogoutResult,\n    VendorConnector, Contact, AudioStats, SuperviseCallResult, SupervisorHangupResult, AgentStatusInfo, SupervisedCallInfo,\n    SharedCapabilitiesResult, VoiceCapabilitiesResult, AgentVendorStatusInfo, StateChangeResult, CustomError, DialOptions, ShowStorageAccessResult,\n    AudioDevicesResult, ACWInfo, SetAgentConfigResult } from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes' &&\n                        property !== '/reqHvcc/reqTelephonyIntegrationCertificate') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.VOICE_EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n    channelPort.postMessage({\n        type: constants.SHARED_MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.VOICE_EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.SHARED_MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {constants.VOICE_ERROR_TYPE} errorType Error Type, ex: constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.ERROR, { message: errorType }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {CustomError} error Error object representing the custom error\n * @param {string} eventType The event that caused this error, ex: constants.SHARED_MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchCustomError(error, eventType) {\n    // eslint-disable-next-line no-console\n    const payload = {\n        customError: {\n            labelName: error.labelName,\n            namespace: error.namespace,\n            message: error.message\n        }\n    };\n    console.error(`SCV dispatched custom error for eventType ${eventType}`, payload);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.ERROR, payload, false);\n    dispatchEventLog(eventType, { errorType: constants.SHARED_ERROR_TYPE.CUSTOM_ERROR, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.INFO, { message: eventType }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const telephonyConnector = await vendorConnector.getTelephonyConnector();\n        const agentConfigResult = await telephonyConnector.getAgentConfig();\n        const sharedCapabilitiesResult = await vendorConnector.getSharedCapabilities();\n        const voiceCapabilitiesResult = await telephonyConnector.getVoiceCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(voiceCapabilitiesResult, VoiceCapabilitiesResult);\n        if (voiceCapabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await telephonyConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.SHARED_CAPABILITIES_TYPE.DEBUG_ENABLED] : sharedCapabilitiesResult.debugEnabled,\n                [constants.SHARED_CAPABILITIES_TYPE.CONTACT_SEARCH] : sharedCapabilitiesResult.hasContactSearch,\n                [constants.SHARED_CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : sharedCapabilitiesResult.hasAgentAvailability,\n                [constants.SHARED_CAPABILITIES_TYPE.VENDOR_PROVIDED_QUEUE_WAIT_TIME] : sharedCapabilitiesResult.hasQueueWaitTime,\n                [constants.SHARED_CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : sharedCapabilitiesResult.hasTransferToOmniFlow,\n                [constants.SHARED_CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : sharedCapabilitiesResult.hasPendingStatusChange,\n                [constants.SHARED_CAPABILITIES_TYPE.SFDC_PENDING_STATE]: sharedCapabilitiesResult.hasSFDCPendingState,\n                [constants.SHARED_CAPABILITIES_TYPE.AUTO_ACCEPT_ENABLED]: sharedCapabilitiesResult.hasAutoAcceptEnabled,\n                [constants.VOICE_CAPABILITIES_TYPE.MUTE] : voiceCapabilitiesResult.hasMute,\n                [constants.VOICE_CAPABILITIES_TYPE.RECORD] : voiceCapabilitiesResult.hasRecord,\n                [constants.VOICE_CAPABILITIES_TYPE.MERGE] : voiceCapabilitiesResult.hasMerge,\n                [constants.VOICE_CAPABILITIES_TYPE.SWAP] : voiceCapabilitiesResult.hasSwap,\n                [constants.VOICE_CAPABILITIES_TYPE.BLIND_TRANSFER] : voiceCapabilitiesResult.hasBlindTransfer,\n                [constants.VOICE_CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : voiceCapabilitiesResult.hasSignedRecordingUrl,\n                [constants.VOICE_CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : voiceCapabilitiesResult.hasSupervisorListenIn,\n                [constants.VOICE_CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : voiceCapabilitiesResult.hasSupervisorBargeIn,\n                [constants.VOICE_CAPABILITIES_TYPE.MOS] : voiceCapabilitiesResult.supportsMos,\n                [constants.VOICE_CAPABILITIES_TYPE.PHONEBOOK] : voiceCapabilitiesResult.hasPhoneBook,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_GET_EXTERNAL_SPEAKER] : voiceCapabilitiesResult.hasGetExternalSpeakerDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_SET_EXTERNAL_SPEAKER] : voiceCapabilitiesResult.hasSetExternalSpeakerDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_GET_EXTERNAL_MICROPHONE] : voiceCapabilitiesResult.hasGetExternalMicrophoneDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_SET_EXTERNAL_MICROPHONE] : voiceCapabilitiesResult.hasSetExternalMicrophoneDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.CAN_CONSULT]: voiceCapabilitiesResult.canConsult,\n                [constants.VOICE_CAPABILITIES_TYPE.DIAL_PAD]: voiceCapabilitiesResult.isDialPadDisabled,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_HID_SUPPORT]: voiceCapabilitiesResult.isHidSupported,\n                [constants.VOICE_CAPABILITIES_TYPE.PHONEBOOK_DISABLE]: voiceCapabilitiesResult.isPhoneBookDisabled\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.SHARED_MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    (message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase() ||\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase())) {\n                    return;\n                }\n                initAudioStats();\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await telephonyConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.VOICE_EVENT_TYPE.CALL_STARTED : constants.VOICE_EVENT_TYPE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL);\n                } else {\n                    dispatchInfo(constants.INFO_TYPE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL, additionalInfo: e});\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.DECLINE_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload =  await telephonyConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, call);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.DECLINE_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_DECLINE_THE_CALL, e, constants.VOICE_MESSAGE_TYPE.DECLINE_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.END_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.END_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, e, constants.VOICE_MESSAGE_TYPE.END_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.MUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.mute(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.MUTE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_MUTE_CALL, e, constants.VOICE_MESSAGE_TYPE.MUTE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.UNMUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.unmute(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.UNMUTE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_UNMUTE_CALL, e, constants.VOICE_MESSAGE_TYPE.UNMUTE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.HOLD:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.hold(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.HOLD);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.HOLD);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.HOLD);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.RESUME:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resume(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.RESUME);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.RESUME);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.RESUME);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult);\n                const { success } = payload;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                } else {\n                    if (message.data.statusInfo) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success: false });\n                    }\n                    switch(getErrorType(e)) {\n                        case constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS:\n                            dispatchError(constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                        default:\n                            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS);\n                } else {\n                    dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.DIAL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const isCallback = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CALLBACK) >= 0;\n                const isConsultCall = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CONSULT) >= 0;\n                const payload = await telephonyConnector.dial(new Contact(message.data.contact),\n                                                              new DialOptions({ isCallback, isConsultCall }));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                // If connectors wants this to be created as callback \n                if (constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase() === call.callType.toLowerCase() && isCallback) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED, call);\n                } else { // continue treating this as outbound\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, call);\n                }\n            } catch (e) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_FAILED);\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.DIAL);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                        case constants.SHARED_ERROR_TYPE.GENERIC_ERROR:\n                            dispatchError(constants.SHARED_ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SEND_DIGITS:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                await telephonyConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.VOICE_MESSAGE_TYPE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS:\n            try  {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        listType: contact.listType,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.GET_CONTACTS:\n            try  {\n                const payload = await vendorConnector.getContacts(message.data.filter, message.data.workItemId);\n                Validator.validateClassObject(payload, ContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        listType: contact.listType,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_CONTACTS_RESULT, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.GET_CONTACTS);\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.CONFERENCE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.CONFERENCE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, e, constants.VOICE_MESSAGE_TYPE.CONFERENCE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, {\n                    reason: constants.SHARED_EVENT_TYPE.ERROR.toLowerCase()\n                });\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_PAUSE_RECORDING, e, constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_RESUME_RECORDING, e, constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.LOGOUT);\n                } else {\n                    dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.SHARED_MESSAGE_TYPE.LOGOUT);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.VOICE_MESSAGE_TYPE.WRAP_UP_CALL: {\n            const telephonyConnector = await vendorConnector.getTelephonyConnector();\n            telephonyConnector.wrapUpCall(message.data.call);\n        }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.AGENT_AVAILABLE: {\n            if (message.data && message.data.isAvailable) {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    contact:call.contact,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    contact:call.contact,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObjects(result, GenericResult, SetAgentConfigResult);\n                if (result instanceof SetAgentConfigResult) {\n                    result.setIsSystemEvent(!!message.data.config.isSystemEvent);\n                }\n                dispatchEvent(constants.VOICE_EVENT_TYPE.AGENT_CONFIG_UPDATED, result);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG);\n                } else {\n                    dispatchError(getErrorType(e) === constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.VOICE_ERROR_TYPE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.GET_AUDIO_DEVICES:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getAudioDevices();\n                Validator.validateClassObject(result, AudioDevicesResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.GET_AUDIO_DEVICES, result);\n            } catch (e) {\n                dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_GET_AUDIO_DEVICES, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.GET_AUDIO_DEVICES);\n            }\n            break;\n        case constants.VOICE_MESSAGE_TYPE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.VOICE_MESSAGE_TYPE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.SHARED_MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await telephonyConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, e, constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.AGENT_WORK_EVENT: {\n            let { workItemId, workId, workEvent } = message.data.agentWork;\n            vendorConnector.onAgentWorkEvent({\n                workItemId,\n                workId,\n                workEvent\n            });\n        }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.vf\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showStorageAccess) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_STORAGE_ACCESS, {\n                            success: true\n                        });\n                    } else if (payload.showLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else if (payload.isSilentLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            isSilentLogin: payload.isSilentLogin\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    if (e instanceof CustomError) {\n                        dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                    } else {\n                        switch(getErrorType(e)) {\n                            case constants.VOICE_ERROR_TYPE.INVALID_PARAMS:\n                                dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARAMS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                            default:\n                                dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                        }\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop) && !CONNECTOR_CONFIG_EXCEPTION_FIELDS.includes(key)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    if (error instanceof CustomError) {\n        dispatchCustomError(error, eventType);\n        return;\n    }\n\n    switch(eventType) {\n        case constants.SHARED_EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.SHARED_EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.SHARED_EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.SHARED_EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_STARTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_STARTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_CONNECTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_CONNECTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.HANGUP: \n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, error, constants.VOICE_EVENT_TYPE.HANGUP);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT ? constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT : constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED); \n            break;\n        case constants.VOICE_EVENT_TYPE.MUTE_TOGGLE:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, error, constants.VOICE_EVENT_TYPE.MUTE_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT ? constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT : constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, error, constants.VOICE_EVENT_TYPE.HOLD_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, error, constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, error, constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.VOICE_EVENT_TYPE.AGENT_ERROR:\n            dispatchError(constants.VOICE_ERROR_TYPE.AGENT_ERROR, error, constants.VOICE_EVENT_TYPE.AGENT_ERROR);\n            break;\n        case constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.VOICE_ERROR_TYPE.UNSUPPORTED_BROWSER:\n                case constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED:\n                case constants.VOICE_ERROR_TYPE.USER_BUSY_ERROR:\n                case constants.VOICE_ERROR_TYPE.WEBRTC_ERROR:\n                    dispatchError(getErrorType(error), error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.SHARED_ERROR_TYPE.GENERIC_ERROR, error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_UPDATED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_UPDATED);\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n * AUDIO_STATS - AudioStats\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.SHARED_EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, constants.SHARED_EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, constants.SHARED_EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.CALL_STARTED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload, true /* ignoring registerLog for critical event*/);\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n                    break;\n                } \n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, constants.VOICE_EVENT_TYPE.HANGUP)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED)) {\n                const { contact, initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, {\n                    contact,\n                    initialCallHasEnded,\n                    callInfo,\n                    callAttributes,\n                    phoneNumber,\n                    callId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.VOICE_ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId, contact } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    callAttributes,\n                    phoneNumber,\n                    callId,\n                    contact\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, call, true /* ignoring registerLog for critical event*/);\n                    } else if (call && call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED : constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        }, true /* ignoring registerLog for critical event*/)\n                    } else {\n                        dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, {\n                            callId:  call? call.callId : null, reason: call? call.reason : null\n                        }, true /* ignoring registerLog for critical event*/);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.SHARED_EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED:\n            dispatchEvent(constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.SHARED_EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.VOICE_EVENT_TYPE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, constants.VOICE_EVENT_TYPE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, constants.VOICE_EVENT_TYPE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        }\n        break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls , isCallMerged} = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    isCallMerged,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.CALL_UPDATED: {\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_CALL, constants.VOICE_EVENT_TYPE.CALL_UPDATED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_UPDATED, payload, registerLog);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                    let audioStats;\n                    if (payload.callId) {\n                        audioStats = {stats: payload.stats, callId: payload.callId};\n                    } else {\n                        audioStats = {stats: payload.stats}\n                    }\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.AUDIO_STATS, {audioStats}, registerLog);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.SHARED_ERROR_TYPE.GENERIC_ERROR, constants.VOICE_EVENT_TYPE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_BARGED_IN, payload, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.SHARED_ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW: {\n            dispatchEvent(constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW, payload);\n            break;\n        }\n\n        case constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT: {\n            if(validatePayload(payload, ShowStorageAccessResult, constants.SHARED_ERROR_TYPE.INVALID_STORAGE_ACCESS_RESULT, constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT, payload);\n                if(payload.success) {\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        }, registerLog);\n                    } else {\n                        setConnectorReady();\n                    }   \n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED: {\n            if (validatePayload(payload, ACWInfo, constants.SHARED_ERROR_TYPE.INVALID_ACW_INFO, constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED)){\n                dispatchEvent(constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED, payload, registerLog);\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED: {\n            if (validatePayload(payload, ACWInfo, constants.SHARED_ERROR_TYPE.INVALID_ACW_INFO, constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED)){\n                dispatchEvent(constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.SHARED_ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.SHARED_EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.SHARED_ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.SHARED_EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","this","self","ReferenceError","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","fn","args","arguments","apply","err","undefined","instance","Constructor","TypeError","setPrototypeOf","isNativeReflectConstruct","_construct","Parent","Class","Reflect","construct","a","push","Function","bind","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","protoProps","staticProps","obj","_getPrototypeOf","o","getPrototypeOf","__proto__","subClass","superClass","create","constructor","toString","call","indexOf","sham","Proxy","Date","e","_typeof","assertThisInitialized","_setPrototypeOf","p","Symbol","iterator","isNativeFunction","_wrapNativeSuper","_cache","Map","has","get","set","Wrapper","runtime","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","GenStateSuspendedYield","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","result","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","name","mark","awrap","async","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","definition","prop","r","SHARED_MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","SET_AGENT_STATUS","GET_AGENT_STATUS","LOGOUT","MESSAGE","DOWNLOAD_VENDOR_LOGS","AGENT_WORK_EVENT","GET_CONTACTS","VOICE_MESSAGE_TYPE","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","WRAP_UP_CALL","AGENT_AVAILABLE","GET_AUDIO_DEVICES","SHARED_EVENT_TYPE","ERROR","WARNING","INFO","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","STATE_CHANGE","REMOTE_CONTROLLER","SHOW_STORAGE_ACCESS","STORAGE_ACCESS_RESULT","GET_CONTACTS_RESULT","AFTER_CONVERSATION_WORK_STARTED","AFTER_CONVERSATION_WORK_ENDED","VOICE_EVENT_TYPE","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","HANGUP","SOFTPHONE_ERROR","SHOW_TRANSFER_VIEW","AUDIO_STATS","CALL_UPDATED","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","SHARED_ERROR_TYPE","CUSTOM_ERROR","GENERIC_ERROR","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_GET_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_STATE_CHANGE_RESULT","INVALID_STORAGE_ACCESS_RESULT","INVALID_ACW_INFO","VOICE_ERROR_TYPE","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","USER_BUSY_ERROR","WEBRTC_ERROR","CAN_NOT_GET_AUDIO_DEVICES","CAN_NOT_UPDATE_CALL","AGENT_STATUS","ONLINE","OFFLINE","ACW","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","INTERNAL_CALL","DIALED_CALLBACK","CONSULT","CALL_SUBTYPE","PSTN","WEB_RTC","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","CONTACT_LIST_TYPE","ALL","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","SHARED_CAPABILITIES_TYPE","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","VENDOR_PROVIDED_QUEUE_WAIT_TIME","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","SFDC_PENDING_STATE","AUTO_ACCEPT_ENABLED","VOICE_CAPABILITIES_TYPE","RECORD","MERGE","SWAP","BLIND_TRANSFER","SUPERVISOR_LISTEN_IN","MOS","HAS_GET_EXTERNAL_SPEAKER","HAS_SET_EXTERNAL_SPEAKER","HAS_GET_EXTERNAL_MICROPHONE","HAS_SET_EXTERNAL_MICROPHONE","CAN_CONSULT","DIAL_PAD","HAS_HID_SUPPORT","PHONEBOOK_DISABLE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONTACT","DIRECTORY","WORK_EVENT","ASSIGNED","ACCEPTED","DECLINED","COMPLETED","CLOSED","PAUSED","UNPAUSED","DIAL_OPTIONS","HANGUP_STATUS","MISSED_AGENT","FAILED_CONNECT_AGENT","FAILED_CONNECT_CUSTOMER","CALLBACK_MISSED_OR_REJECTED","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","CONNECTOR_CONFIG_EXCEPTION_FIELDS","MAX_LOGS_SIZE","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","constants","logStr","toISOString","concat","join","_log","downloadLogs","data","fileName","fileType","document","dataStr","file","Blob","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","_objectSpread","CustomError","_Error","_inherits","_super","_createSuper","_ref","_this","labelName","namespace","message","_classCallCheck","Validator","validateString","Phone","_ref2","number","validateEnum","HidDevice","_ref3","productId","vendorId","validateNumber","MuteToggleResult","_ref4","isMuted","isGlobal","ActiveCallsResult","_ref5","_ref5$activeCalls","activeCalls","activeCall","validateClassObject","PhoneCall","AudioDevicesResult","_ref6","_ref6$audioDevices","audioDevices","SharedCapabilitiesResult","_ref7","_ref7$debugEnabled","debugEnabled","_ref7$hasContactSearc","hasContactSearch","_ref7$hasAgentAvailab","hasAgentAvailability","_ref7$hasQueueWaitTim","hasQueueWaitTime","_ref7$hasTransferToOm","hasTransferToOmniFlow","_ref7$hasPendingStatu","hasPendingStatusChange","_ref7$hasSFDCPendingS","hasSFDCPendingState","_ref7$hasAutoAcceptEn","hasAutoAcceptEnabled","validateBoolean","VoiceCapabilitiesResult","_ref8","_ref8$hasMute","hasMute","_ref8$hasRecord","hasRecord","_ref8$hasMerge","hasMerge","_ref8$hasSwap","hasSwap","_ref8$hasBlindTransfe","hasBlindTransfer","_ref8$hasSignedRecord","hasSignedRecordingUrl","_ref8$supportsMos","supportsMos","_ref8$hasSupervisorLi","hasSupervisorListenIn","_ref8$hasSupervisorBa","hasSupervisorBargeIn","_ref8$hasPhoneBook","hasPhoneBook","_ref8$hasGetExternalS","hasGetExternalSpeakerDeviceSetting","_ref8$hasSetExternalS","hasSetExternalSpeakerDeviceSetting","_ref8$hasGetExternalM","hasGetExternalMicrophoneDeviceSetting","_ref8$hasSetExternalM","hasSetExternalMicrophoneDeviceSetting","_ref8$canConsult","canConsult","_ref8$isDialPadDisabl","isDialPadDisabled","_ref8$isHidSupported","isHidSupported","_ref8$isPhoneBookDisa","isPhoneBookDisabled","AgentConfigResult","_ref9","_ref9$phones","phones","_ref9$selectedPhone","selectedPhone","_ref9$speakerDeviceId","speakerDeviceId","_ref9$microphoneDevic","microphoneDeviceId","Array","AgentConfig","_ref10","hidDeviceInfo","RecordingToggleResult","_ref11","isRecordingPaused","_ref11$contactId","contactId","_ref11$initialContact","initialContactId","_ref11$instanceId","instanceId","_ref11$region","region","ParticipantResult","_ref12","initialCallHasEnded","callInfo","callAttributes","phoneNumber","callId","_ref12$contact","contact","CallInfo","ContactsResult","_ref13","_ref13$contacts","contacts","_ref13$contactTypes","contactTypes","Contact","filterType","PhoneContactsResult","_ContactsResult","_super2","_ref14","_ref14$contacts","_ref14$contactTypes","CallResult","_ref15","HangupResult","_ref16","calls","HoldToggleResult","_ref17","isThirdPartyOnHold","isCustomerOnHold","isCallMerged","SignedRecordingUrlResult","_ref18","success","url","duration","InitResult","_ref19","_ref19$showLogin","showLogin","_ref19$loginFrameHeig","loginFrameHeight","_ref19$isSilentLogin","isSilentLogin","_ref19$showStorageAcc","showStorageAccess","DialOptions","_ref20","_ref20$isCallback","isCallback","_ref20$isConsultCall","isConsultCall","GenericResult","_ref21","SetAgentConfigResult","_GenericResult","_super3","_ref22","_this2","_ref22$isSystemEvent","isSystemEvent","_createClass","LogoutResult","_ref23","_ref23$loginFrameHeig","_ref24","_ref24$callStateTimes","callStateTimestamp","isOnHold","_ref24$isMuted","_ref24$isRecordingPau","initialCallId","_ref24$queueId","queueId","_ref24$queueName","queueName","_ref24$queueTimestamp","queueTimestamp","_ref24$isSoftphoneCal","isSoftphoneCall","_ref24$acceptEnabled","acceptEnabled","_ref24$declineEnabled","declineEnabled","_ref24$muteEnabled","muteEnabled","_ref24$swapEnabled","swapEnabled","_ref24$conferenceEnab","conferenceEnabled","_ref24$holdEnabled","holdEnabled","_ref24$recordEnabled","recordEnabled","_ref24$addCallerEnabl","addCallerEnabled","_ref24$extensionEnabl","extensionEnabled","_ref24$isReplayable","isReplayable","_ref24$isBargeable","isBargeable","isExternalTransfer","_ref24$showMuteButton","showMuteButton","_ref24$showRecordButt","showRecordButton","_ref24$showAddCallerB","showAddCallerButton","_ref24$showAddBlindTr","showAddBlindTransferButton","_ref24$showMergeButto","showMergeButton","_ref24$showSwapButton","showSwapButton","_ref24$removeParticip","removeParticipantVariant","_ref24$additionalFiel","additionalFields","_ref24$isMultiParty","isMultiParty","_ref24$isHIDCall","isHIDCall","_ref24$endCallDisable","endCallDisabled","_ref24$renderContactI","renderContactId","validateDate","_ref25","id","listType","prefix","extension","endpointARN","queue","availability","recordId","description","queueWaitTime","PhoneCallAttributes","_ref26","voiceCallId","participantType","_ref26$dialerType","dialerType","parentId","_ref26$hasSupervisorB","hasSupervisorBargedIn","_ref26$isAutoMergeOn","isAutoMergeOn","_ref26$isConsultCall","_ref27","callType","callSubtype","reason","closeCallOnError","agentStatus","agentARN","TelephonyConnector","dialOptions","digits","filter","call1","call2","parentCall","isBlindTransfer","config","recordingUrl","vendorCallKey","supervisedCallInfo","VendorConnector","agentWork","statusInfo","enqueueNextState","logMessageToVendor","payload","workItemId","enumValues","RegExp","test","className","isValid","_len","classNames","_key","AgentWork","_ref28","workId","workEvent","AgentStatusInfo","_ref29","statusId","statusApiName","statusName","AgentVendorStatusInfo","_ref30","statusType","StateChangeResult","_ref31","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","_ref32","from","to","supervisorName","isBargedIn","AudioStats","_ref33","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","_ref34","inputChannelStats","outputChannelStats","StatsInfo","_ref35","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","_ref36","SupervisorHangupResult","_HangupResult","_super4","_ref37","ShowStorageAccessResult","_ref38","_ref38$success","_ref38$showLogin","_ref38$loginFrameHeig","ContactsFilter","param","_param$contains","contains","_param$limit","limit","_param$offset","offset","_param$types","types","_step","_iterator","_createForOfIteratorHelper","s","f","ACWInfo","_ref39","agentWorkId","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","getErrorType","sanitizePayload","isArray","sanitizedPayload","element","property","getErrorMessage","dispatchEventLog","eventType","isError","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","console","dispatchCustomError","customError","dispatchInfo","setConnectorReady","_setConnectorReady","_asyncToGenerator","_regeneratorRuntime","_callee","_agentConfig","_capabilities","telephonyConnector","agentConfigResult","sharedCapabilitiesResult","voiceCapabilitiesResult","activeCallsResult","_context","getTelephonyConnector","getAgentConfig","getSharedCapabilities","getVoiceCapabilities","getActiveCalls","agentConfig","_defineProperty","capabilities","callInProgress","t0","channelMessageHandler","_x","_channelMessageHandler","_callee2","hangupPayload","_telephonyConnector","_payload","_call","_telephonyConnector2","_payload2","_telephonyConnector3","_payload3","_telephonyConnector4","_payload4","_telephonyConnector5","_payload5","_telephonyConnector6","_payload6","_payload7","_payload8","_telephonyConnector7","_payload9","_call2","_telephonyConnector8","_telephonyConnector9","_payload10","_payload11","_contacts","_telephonyConnector10","_payload12","_telephonyConnector11","_payload13","_telephonyConnector12","_payload14","_telephonyConnector13","_payload15","_telephonyConnector14","_payload16","_payload17","_success","_telephonyConnector16","_activeCallsResult","_activeCalls","_call3","shouldReplay","isSupervisorCall","_telephonyConnector17","_telephonyConnector18","_result","_message$data","_callId","_telephonyConnector19","_result2","signedRecordingUrlResult","_message$data2","_payload18","_telephonyConnector20","_result3","_telephonyConnector21","_result4","_telephonyConnector22","_result5","_message$data$agentWo","_context2","toLowerCase","supervisorDisconnect","acceptCall","t1","messagetype","additionalInfo","declineCall","t2","endCall","t3","mute","publishEvent","t4","unmute","t5","hold","t6","t7","resume","t8","t9","setAgentStatus","t10","t11","getAgentStatus","t12","params","dial","t13","t14","sendDigits","t15","getPhoneContacts","map","t16","getContacts","t17","swap","callToHold","callToResume","t18","conference","t19","addParticipant","t20","t21","pauseRecording","t22","resumeRecording","t23","logout","t24","handleMessage","wrapUpCall","isAvailable","t25","t26","isReplayedCall","t27","setAgentConfig","validateClassObjects","setIsSystemEvent","t28","getAudioDevices","t29","getSignedRecordingUrl","t30","parse","superviseCall","t31","t32","supervisorBargeIn","t33","onAgentWorkEvent","windowMessageHandler","_x2","_windowMessageHandler","_callee3","sfDomain","originUrl","_context3","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","startsWith","includes","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","_x3","_publishEvent","_callee4","_ref3$registerLog","_initialCallHasEnded","_callInfo","_callAttributes","_phoneNumber","_callId2","_contact","_telephonyConnector23","_isThirdPartyOnHold","_isCustomerOnHold","_calls","_isThirdPartyOnHold2","_isCustomerOnHold2","_calls2","audioStats","_callId3","mos","_context4","statsArray"],"sourceRoot":""}